[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "RxMap/lib/commands/common/addData.js",
    "content": "\nconst addData = (context, typeId, data) => {\n  const { RxMap } = context;\n  const type = RxMap.getDataType(typeId);\n  if (!type) {\n    throw new Error(`Not type ${typeId} register`);\n  }\n  switch (type.geomType) {\n    case 'point':\n      return new Promise((resolve) => {\n        data.reduce((map, element) => map.point(element, type.style, element), RxMap)\n          .subscribe((last, all) => resolve(all));\n      });\n    case 'marker':\n      return new Promise((resolve) => {\n        data.reduce((map, element) => map.marker(element, type.style, element), RxMap)\n          .subscribe((last, all) => resolve(all));\n      });\n\n    default:\n      return null;\n  }\n};\n/**\n * @private\n*/\nexport default addData;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/common/addData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "addData",
    "memberof": "RxMap/lib/commands/common/addData.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/common/addData.js~addData",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/common/addData.js",
    "importStyle": "addData",
    "description": "",
    "lineNumber": 2,
    "ignore": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "typeId",
        "types": [
          "*"
        ]
      },
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/addData.js",
    "content": "import addData from '../common/addData';\n\n/**\n * @external {addData}  function/index.html#static-function-addData\n */\nexport default addData;\n/**\n * @private\n*/\nexport const name = 'addData';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/addData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "addData",
    "externalLink": "function/index.html#static-function-addData",
    "memberof": "RxMap/lib/commands/google@latest/addData.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/addData.js~addData",
    "access": "public",
    "description": "",
    "lineNumber": 6
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/addData.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/addData.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/addData.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/create.js",
    "content": "\nconst create = (context, id, lat, lng, zoom) => {\n  const googleMaps = context.library.maps;\n  const _map = new googleMaps.Map(document.getElementById(id), {\n    center: { lat, lng },\n    zoom,\n  });\n  context.RxMap.setMap(_map);\n  return _map;\n};\n\nexport default create;\n/**\n * @private\n*/\nexport const name = 'create';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/create.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/create.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/create.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "create",
    "memberof": "RxMap/lib/commands/google@latest/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/create.js~create",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/create.js",
    "importStyle": "create",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "lat",
        "types": [
          "*"
        ]
      },
      {
        "name": "lng",
        "types": [
          "*"
        ]
      },
      {
        "name": "zoom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/marker.js",
    "content": "\nimport googlePoint from '../../utils/transformPointGoogle';\nimport extractProperties from '../../utils/extractProperties';\n\nconst drawMarker = (context, point, options = {}, properties = {}) => {\n  const googleMaps = context.library.maps;\n  const map = context.RxMap.getMap();\n  const markerOptions = {\n    position: googlePoint(point),\n    map,\n  };\n  if (options && options.icon) {\n    const image = {\n      url: options.icon,\n      // This marker is 20 pixels wide by 32 pixels high.\n      scaledSize: options.size ? new googleMaps.Size(options.size.width, options.size.height) : null,\n      // The origin for this image is (0, 0).\n      origin: new googleMaps.Point(0, 0),\n      // The anchor for this image is the base of the flagpole at (0, 32).\n      // anchor: new googleMaps.Point(0, 32),\n    };\n    markerOptions.icon = image;\n  }\n\n  const markerMap = new googleMaps.Marker(markerOptions);\n  markerMap.properties = extractProperties(properties);\n  return markerMap;\n};\n\nexport default drawMarker;\n/**\n * @private\n*/\nexport const name = 'marker';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/marker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/marker.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/marker.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/marker.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "drawMarker",
    "memberof": "RxMap/lib/commands/google@latest/marker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/marker.js~drawMarker",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/marker.js",
    "importStyle": "drawMarker",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "properties",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/point.js",
    "content": "\nimport googlePoint from '../../utils/transformPointGoogle';\nimport extractProperties from '../../utils/extractProperties';\n\nconst drawPoint = (context, point, style, properties) => {\n  // TODO: calcular el radio desde pixels a metros\n  const googleMaps = context.library.maps;\n  const _map = context.RxMap.getMap();\n  const circle = new googleMaps.Circle({\n    strokeColor: style.color || '#FF0000',\n    strokeOpacity: style.opacity || 1,\n    strokeWeight: style.weight || 1,\n    fillColor: style.fillColor || '#FF0000',\n    fillOpacity: style.fillOpacity || 0.35,\n    map: _map,\n    center: googlePoint(point),\n    radius: style.radius * 100 || 500,\n  });\n\n  circle.properties = extractProperties(properties);\n  return circle;\n};\n\nexport default drawPoint;\n/**\n * @private\n*/\nexport const name = 'point';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/point.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/point.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/point.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/point.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 28,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 13,
    "kind": "function",
    "name": "drawPoint",
    "memberof": "RxMap/lib/commands/google@latest/point.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/point.js~drawPoint",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/point.js",
    "importStyle": "drawPoint",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/popup.js",
    "content": "// Create a marker and set its position.\n\nconst addPopup = (googleMaps, marker, content) => {\n  const { properties } = marker;\n  let contentString = content;\n  if (typeof content === 'function') {\n    contentString = content(properties);\n  }\n  return new googleMaps.InfoWindow({\n    content: contentString,\n  });\n};\n\nconst popup = (context, content) => {\n  const googleMaps = context.library.maps;\n  const map = context.RxMap.getMap();\n  const { value, name } = context.lastExecution;\n  if (name === 'marker') {\n    const infowindow = addPopup(googleMaps, value, content);\n    value.addListener('click', () => {\n      infowindow.open(map, value);\n    });\n  } else if (name === 'addData') {\n    value.forEach((marker) => {\n      const infoWindow = addPopup(googleMaps, marker, content);\n      marker.addListener('click', () => {\n        infoWindow.setPosition(marker.getCenter());\n        infoWindow.open(map);\n      });\n    });\n  }\n  return context.lastExecution;\n};\n\nexport default popup;\n/**\n * @private\n*/\nexport const name = 'popup';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/popup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "function",
    "name": "addPopup",
    "memberof": "RxMap/lib/commands/google@latest/popup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/popup.js~addPopup",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/popup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "googleMaps",
        "types": [
          "*"
        ]
      },
      {
        "name": "marker",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/popup.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/popup.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/popup.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 39,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "popup",
    "memberof": "RxMap/lib/commands/google@latest/popup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/popup.js~popup",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/popup.js",
    "importStyle": "popup",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 18,
    "kind": "file",
    "name": "RxMap/lib/commands/google@latest/setCenter.js",
    "content": "\nimport googlePoint from '../../utils/transformPointGoogle';\n\nconst setCenter = (context, options) => {\n  const { zoom } = options;\n  const map = context.RxMap.getMap();\n  const oldCenter = map.getCenter();\n  const center = googlePoint(options, true) || { lat: oldCenter.lat, lng: oldCenter.lng };\n  map.setCenter(center);\n  map.setZoom(zoom || map.getZoom());\n  return context.lastExecution;\n};\n\nexport default setCenter;\n/**\n * @private\n*/\nexport const name = 'setCenter';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/google@latest/setCenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/google@latest/setCenter.js",
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/setCenter.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/setCenter.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "setCenter",
    "memberof": "RxMap/lib/commands/google@latest/setCenter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/google@latest/setCenter.js~setCenter",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/google@latest/setCenter.js",
    "importStyle": "setCenter",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 21,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/addData.js",
    "content": "import addData from '../common/addData';\n\nexport default addData;\n/**\n * @private\n*/\nexport const name = 'addData';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/addData.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/addData.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/addData.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/addData.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/create.js",
    "content": "\nconst create = (context, id, lat, lng, zoom) => {\n  const L = context.library;\n  const map = L.map(id).setView([lat, lng], zoom);\n  L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {\n    attribution: '&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors',\n  }).addTo(map);\n  context.RxMap.setMap(map);\n  return map;\n};\n\nexport default create;\n/**\n * @private\n*/\nexport const name = 'create';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/create.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/create.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/create.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "create",
    "memberof": "RxMap/lib/commands/leaflet@latest/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/create.js~create",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/create.js",
    "importStyle": "create",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "lat",
        "types": [
          "*"
        ]
      },
      {
        "name": "lng",
        "types": [
          "*"
        ]
      },
      {
        "name": "zoom",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/marker.js",
    "content": "\nimport leafletPoint from '../../utils/transformPointLeaflet';\nimport extractProperties from '../../utils/extractProperties';\n\nconst drawMarker = (context, point, options = {}, properties = {}) => {\n  const L = context.library;\n  const center = leafletPoint(point);\n  const _map = context.RxMap.getMap();\n  let markerOptions = {};\n  if (options && options.icon) {\n    const myIcon = L.icon({\n      iconUrl: options.icon,\n      iconSize: options.size ? [options.size.width, options.size.height] : null,\n    });\n    markerOptions = {\n      icon: myIcon,\n    };\n  }\n\n  const marker = L.marker(center, markerOptions);\n  marker.properties = extractProperties(properties);\n  marker.addTo(_map);\n  return marker;\n};\n\nexport default drawMarker;\n/**\n * @private\n*/\nexport const name = 'marker';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/marker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 27,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/marker.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/marker.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/marker.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 30,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 28,
    "kind": "function",
    "name": "drawMarker",
    "memberof": "RxMap/lib/commands/leaflet@latest/marker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/marker.js~drawMarker",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/marker.js",
    "importStyle": "drawMarker",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "properties",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 29,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/point.js",
    "content": "\nimport leafletPoint from '../../utils/transformPointLeaflet';\nimport extractProperties from '../../utils/extractProperties';\n\nconst drawPoint = (context, point, style, properties) => {\n  const L = context.library;\n  // TODO: fixed default styles\n  const center = leafletPoint(point);\n  const _map = context.RxMap.getMap();\n  const marker = L.circleMarker(center, style);\n  marker.properties = extractProperties(properties);\n  marker.addTo(_map);\n  return marker;\n};\n\nexport default drawPoint;\n/**\n * @private\n*/\nexport const name = 'point';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/point.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 30,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/point.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/point.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/point.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 20,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 31,
    "kind": "function",
    "name": "drawPoint",
    "memberof": "RxMap/lib/commands/leaflet@latest/point.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/point.js~drawPoint",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/point.js",
    "importStyle": "drawPoint",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "point",
        "types": [
          "*"
        ]
      },
      {
        "name": "style",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/popup.js",
    "content": "\nconst addPopup = (marker, content) => {\n  const { properties } = marker;\n  let contentString = content;\n  if (typeof content === 'function') {\n    contentString = content(properties);\n  }\n  marker.bindPopup(contentString);\n};\n\nconst popup = (context, content) => {\n  const { value, name } = context.lastExecution;\n  if (name === 'marker') {\n    addPopup(value, content);\n  } else if (name === 'addData') {\n    value.forEach(marker => addPopup(marker, content));\n  }\n  return context.lastExecution;\n};\n\nexport default popup;\n/**\n * @private\n*/\nexport const name = 'popup';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/popup.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 33,
    "kind": "function",
    "name": "addPopup",
    "memberof": "RxMap/lib/commands/leaflet@latest/popup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/popup.js~addPopup",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/popup.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "marker",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 34,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/popup.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/popup.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/popup.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 35,
    "kind": "function",
    "name": "popup",
    "memberof": "RxMap/lib/commands/leaflet@latest/popup.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/popup.js~popup",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/popup.js",
    "importStyle": "popup",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 36,
    "kind": "file",
    "name": "RxMap/lib/commands/leaflet@latest/setCenter.js",
    "content": "\nimport leafletPoint from '../../utils/transformPointLeaflet';\n\nconst setCenter = (context, options) => {\n  const { zoom } = options;\n  const map = context.RxMap.getMap();\n  const center = leafletPoint(options, true) || { lat: map.center.lat, lng: map.center.lng };\n  map.setView(center, zoom || map.zoom);\n  return context.lastExecution;\n};\n\nexport default setCenter;\n/**\n * @private\n*/\nexport const name = 'setCenter';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/commands/leaflet@latest/setCenter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 37,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/commands/leaflet@latest/setCenter.js",
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/setCenter.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/setCenter.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 38,
    "kind": "function",
    "name": "setCenter",
    "memberof": "RxMap/lib/commands/leaflet@latest/setCenter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/commands/leaflet@latest/setCenter.js~setCenter",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/commands/leaflet@latest/setCenter.js",
    "importStyle": "setCenter",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "RxMap/lib/google@latest.js",
    "content": "import * as create from './commands/google@latest/create';\nimport * as marker from './commands/google@latest/marker';\nimport * as popup from './commands/google@latest/popup';\nimport * as point from './commands/google@latest/point';\nimport * as setCenter from './commands/google@latest/setCenter';\nimport * as center from './observers/google@latest/center';\nimport * as click from './observers/google@latest/click';\nimport * as addData from './commands/google@latest/addData';\nimport * as gps from './observers/google@latest/gps';\n\n\n/**\n * @private\n*/\nexport default (registerCommand, registerObserver) => {\n  registerCommand(create.name, create.default);\n  registerCommand(marker.name, marker.default);\n  registerCommand(popup.name, popup.default);\n  registerCommand(point.name, point.default);\n  registerCommand(setCenter.name, setCenter.default);\n  registerCommand(addData.name, addData.default);\n  registerObserver(center.name, center.default);\n  registerObserver(click.name, click.default);\n  registerObserver(gps.name, gps.default);\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/google@latest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "function",
    "name": "googlelatest",
    "memberof": "RxMap/lib/google@latest.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/google@latest.js~googlelatest",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/google@latest.js",
    "importStyle": "googlelatest",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "registerCommand",
        "types": [
          "*"
        ]
      },
      {
        "name": "registerObserver",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 41,
    "kind": "file",
    "name": "RxMap/lib/leaflet@latest.js",
    "content": "import * as create from './commands/leaflet@latest/create';\nimport * as marker from './commands/leaflet@latest/marker';\nimport * as popup from './commands/leaflet@latest/popup';\nimport * as point from './commands/leaflet@latest/point';\nimport * as setCenter from './commands/leaflet@latest/setCenter';\nimport * as center from './observers/leaflet@latest/center';\nimport * as click from './observers/leaflet@latest/click';\nimport * as addData from './commands/leaflet@latest/addData';\nimport * as gps from './observers/leaflet@latest/gps';\n\n/**\n * @private\n*/\nexport default (registerCommand, registerObserver) => {\n  registerCommand(create.name, create.default);\n  registerCommand(marker.name, marker.default);\n  registerCommand(popup.name, popup.default);\n  registerCommand(point.name, point.default);\n  registerCommand(setCenter.name, setCenter.default);\n  registerCommand(addData.name, addData.default);\n  registerObserver(center.name, center.default);\n  registerObserver(click.name, click.default);\n  registerObserver(gps.name, gps.default);\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/leaflet@latest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 42,
    "kind": "function",
    "name": "leafletlatest",
    "memberof": "RxMap/lib/leaflet@latest.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/leaflet@latest.js~leafletlatest",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/leaflet@latest.js",
    "importStyle": "leafletlatest",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "registerCommand",
        "types": [
          "*"
        ]
      },
      {
        "name": "registerObserver",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 43,
    "kind": "file",
    "name": "RxMap/lib/middlewares/logger.js",
    "content": "\nexport const LoggerMiddleware = next => async (Map, args) => {\n  const commandName = Map.getCommandName();\n  const now = new Date().getTime();\n  const name = `Command ${commandName} [${now}]: `;\n  console.log(`Pre ${name}`, args);\n  const res = await next(Map, args);\n  console.log(`Post ${name}`, res);\n  return res;\n};\n\nexport const TimerMiddleware = next => async (Map, args) => {\n  const commandName = Map.getCommandName();\n  const now = new Date().getTime();\n  const name = `${commandName}_${now}`;\n  console.time(name);\n  const res = await next(Map, args);\n  console.timeEnd(name);\n  return res;\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/middlewares/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 44,
    "kind": "function",
    "name": "LoggerMiddleware",
    "memberof": "RxMap/lib/middlewares/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/middlewares/logger.js~LoggerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/middlewares/logger.js",
    "importStyle": "{LoggerMiddleware}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "TimerMiddleware",
    "memberof": "RxMap/lib/middlewares/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/middlewares/logger.js~TimerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/middlewares/logger.js",
    "importStyle": "{TimerMiddleware}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "file",
    "name": "RxMap/lib/observers/common/gps.js",
    "content": "import { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = () => {\n  const watchPosition = handler => (navigator.geolocation ? navigator.geolocation.watchPosition(handler) : () => { });\n  const clearPosition = handler => (navigator.geolocation ? navigator.geolocation.clearWatch(handler) : () => { });\n\n  return fromEventPattern(\n    watchPosition,\n    clearPosition,\n  ).pipe(map(position => position.coords));\n};\n\nexport default event;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/common/gps.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "event",
    "memberof": "RxMap/lib/observers/common/gps.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/observers/common/gps.js~event",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/common/gps.js",
    "importStyle": "event",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "RxMap/lib/observers/google@latest/center.js",
    "content": "import { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = (context) => {\n  const googleMaps = context.library.maps;\n  const map_ = context.RxMap.getMap();\n\n  const addClickHandler = handler => map_.addListener('center_changed', handler);\n  const removeClickHandler = (handler, listener) => googleMaps.event.removeListener(listener);\n\n\n  return fromEventPattern(\n    addClickHandler,\n    removeClickHandler,\n  ).pipe(map(() => {\n    const center = map_.getCenter();\n    return { lat: center.lat(), lng: center.lng() };\n  }));\n};\n\nexport default event;\n/**\n * @private\n*/\nexport const name = 'center';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/google@latest/center.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/google@latest/center.js",
    "static": true,
    "longname": "RxMap/lib/observers/google@latest/center.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/google@latest/center.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "event",
    "memberof": "RxMap/lib/observers/google@latest/center.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/observers/google@latest/center.js~event",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/google@latest/center.js",
    "importStyle": "event",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "RxMap/lib/observers/google@latest/click.js",
    "content": "import { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = (context) => {\n  const map_ = context.RxMap.getMap();\n  const { value, name } = context.lastExecution;\n  let object = map_;\n  let mapFunction = evt => ({ lat: evt[0].latLng.lat(), lng: evt[0].latLng.lng() });\n\n  if (name === 'marker') {\n    object = value;\n    mapFunction = evt => (evt[1].properties || evt[1]);\n  } else if (name === 'addData') {\n    object = value;\n    mapFunction = evt => (evt[1].properties || evt[1]);\n  }\n\n  if (!Array.isArray(object)) {\n    object = [object];\n  }\n  const addClickHandler = handler => object.map(element => element.addListener('click', evt => handler(evt, element)));\n  const removeClickHandler = (handler, listener) => listener.forEach(element => element.remove());\n\n  return fromEventPattern(\n    addClickHandler,\n    removeClickHandler,\n  ).pipe(map(mapFunction));\n};\n\nexport default event;\n/**\n * @private\n*/\nexport const name = 'click';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/google@latest/click.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/google@latest/click.js",
    "static": true,
    "longname": "RxMap/lib/observers/google@latest/click.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/google@latest/click.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 34,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "event",
    "memberof": "RxMap/lib/observers/google@latest/click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/observers/google@latest/click.js~event",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/google@latest/click.js",
    "importStyle": "event",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "RxMap/lib/observers/google@latest/gps.js",
    "content": "import gps from '../common/gps';\n\nexport default gps;\n/**\n * @private\n*/\nexport const name = 'gps';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/google@latest/gps.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/google@latest/gps.js",
    "static": true,
    "longname": "RxMap/lib/observers/google@latest/gps.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/google@latest/gps.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "RxMap/lib/observers/leaflet@latest/center.js",
    "content": "import { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = (context) => {\n  const map_ = context.RxMap.getMap();\n  const addClickHandler = handler => map_.on('move', handler);\n  const removeClickHandler = handler => map_.off('move', handler);\n\n  return fromEventPattern(\n    addClickHandler,\n    removeClickHandler,\n  ).pipe(map(() => map_.getCenter()));\n};\n\nexport default event;\n/**\n * @private\n*/\nexport const name = 'center';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/leaflet@latest/center.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/leaflet@latest/center.js",
    "static": true,
    "longname": "RxMap/lib/observers/leaflet@latest/center.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/leaflet@latest/center.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 19,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "event",
    "memberof": "RxMap/lib/observers/leaflet@latest/center.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/observers/leaflet@latest/center.js~event",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/leaflet@latest/center.js",
    "importStyle": "event",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "RxMap/lib/observers/leaflet@latest/click.js",
    "content": "import { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = (context) => {\n  const L = context.library;\n  const map_ = context.RxMap.getMap();\n  const { value, name } = context.lastExecution;\n  let object = map_;\n  let mapFunction = evt => evt.latlng;\n\n  if (name === 'marker') {\n    object = value;\n    mapFunction = (evt) => {\n      L.DomEvent.stopPropagation(evt);\n      return evt.target.properties || evt.target;\n    };\n  } else if (name === 'addData') {\n    object = value;\n    mapFunction = (evt) => {\n      L.DomEvent.stopPropagation(evt);\n      return evt.target.properties || evt.target;\n    };\n  }\n\n  if (!Array.isArray(object)) {\n    object = [object];\n  }\n\n  const addClickHandler = handler => object.map(element => element.on('click', handler));\n  const removeClickHandler = handler => object.forEach(element => element.off('click', handler));\n\n  return fromEventPattern(\n    addClickHandler,\n    removeClickHandler,\n  ).pipe(map(mapFunction));\n};\n\nexport default event;\n/**\n * @private\n*/\nexport const name = 'click';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/leaflet@latest/click.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/leaflet@latest/click.js",
    "static": true,
    "longname": "RxMap/lib/observers/leaflet@latest/click.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/leaflet@latest/click.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "event",
    "memberof": "RxMap/lib/observers/leaflet@latest/click.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/observers/leaflet@latest/click.js~event",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/leaflet@latest/click.js",
    "importStyle": "event",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "RxMap/lib/observers/leaflet@latest/gps.js",
    "content": "import gps from '../common/gps';\n\nexport default gps;\n/**\n * @private\n*/\nexport const name = 'gps';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/observers/leaflet@latest/gps.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib/observers/leaflet@latest/gps.js",
    "static": true,
    "longname": "RxMap/lib/observers/leaflet@latest/gps.js~name",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/observers/leaflet@latest/gps.js",
    "importStyle": "{name}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "RxMap/lib/utils/extractProperties.js",
    "content": "\nconst extractProperties = (item) => {\n  if (!item || Array.isArray(item)) {\n    return {};\n  }\n  if (item.properties) {\n    return extractProperties(item.properties);\n  }\n  if (item.attributes) {\n    return extractProperties(item.attributes);\n  }\n  if (item.fields) {\n    return extractProperties(item.fields);\n  }\n  return item;\n};\n\nexport default extractProperties;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/utils/extractProperties.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "extractProperties",
    "memberof": "RxMap/lib/utils/extractProperties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/utils/extractProperties.js~extractProperties",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/utils/extractProperties.js",
    "importStyle": "extractProperties",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "RxMap/lib/utils/transformPointGoogle.js",
    "content": "const googlePoint = (item, noMandatory) => {\n  if (!item) {\n    throw new Error('Geometry Param is mandatory');\n  }\n  if (Array.isArray(item)) {\n    return { lat: item[0], lng: item[1] };\n  }\n  if (item.lat && item.lng) {\n    return item;\n  }\n  if (item.lat && item.lon) {\n    return { lat: item.lat, lng: item.lon };\n  }\n  if (item.latitude && item.longitude) {\n    return { lat: item.latitude, lng: item.longitude };\n  }\n  if (item.latitud && item.longitud) {\n    return { lat: item.latitud, lng: item.longitud };\n  }\n  if (item.position) {\n    return googlePoint(item.position);\n  }\n  if (item.location) {\n    return googlePoint(item.location);\n  }\n  if (item.center) {\n    return googlePoint(item.center);\n  }\n  if (noMandatory) {\n    return null;\n  }\n  throw new Error('Geometry is mandatory');\n};\n\nexport default googlePoint;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/utils/transformPointGoogle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "googlePoint",
    "memberof": "RxMap/lib/utils/transformPointGoogle.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/utils/transformPointGoogle.js~googlePoint",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/utils/transformPointGoogle.js",
    "importStyle": "googlePoint",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "noMandatory",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "RxMap/lib/utils/transformPointLeaflet.js",
    "content": "const leafletPoint = (item, noMandatory) => {\n  if (!item) {\n    throw new Error('Geometry Param is mandatory');\n  }\n  if (Array.isArray(item)) {\n    return item;\n  }\n  if (item.lat && item.lng) {\n    return [item.lat, item.lng];\n  }\n  if (item.lat && item.lon) {\n    return [item.lat, item.lon];\n  }\n  if (item.latitude && item.longitude) {\n    return [item.latitude, item.longitude];\n  }\n  if (item.latitud && item.longitud) {\n    return [item.latitud, item.longitud];\n  }\n  if (item.position) {\n    return leafletPoint(item.position);\n  }\n  if (item.location) {\n    return leafletPoint(item.location);\n  }\n  if (item.center) {\n    return leafletPoint(item.center);\n  }\n  if (noMandatory) {\n    return null;\n  }\n  throw new Error('Geometry is mandatory');\n};\n\nexport default leafletPoint;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib/utils/transformPointLeaflet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "leafletPoint",
    "memberof": "RxMap/lib/utils/transformPointLeaflet.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib/utils/transformPointLeaflet.js~leafletPoint",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib/utils/transformPointLeaflet.js",
    "importStyle": "leafletPoint",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      },
      {
        "name": "noMandatory",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "RxMap/lib.js",
    "content": "// import { addImportFunction } from './src/core/importLazyLoad';\n\nimport { addImportFunction } from './dist/esm/core/importLazyLoad';\n\naddImportFunction('rxmap', arg => import(/* webpackMode: \"lazy\" */ `./dist/lib/${arg}`));\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "RxMap/src/RxMap.js",
    "content": "\nimport { from } from 'rxjs/internal/observable/from';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport CommandBus from './core/CommandBus';\nimport { registerObserver } from './core/registerObserver';\nimport { registerCommand } from './core/registerCommand';\nimport { loadLib } from './core/importLazyLoad';\nimport importMapLibrary from './core/importMapLibrary';\n\nlet _Map;\n\n/**\n * Clase que permite interactiar con los mapas a partir de comandos y observadores\n *\n * @extends {CommandBus}\n */\nexport class RxMap extends CommandBus {\n  constructor() {\n    super();\n    /** @private  */\n    this.createAsync = false;\n    this._dataTypes = {};\n    this.setSource(this);\n  }\n\n  /**\n   *\n   * Funcion que establece el mapa nativo inicializado\n   * que se va a utilizar se llama desde el comando 'create'\n   *\n   * @param {Object} map\n   * @memberof RxMap\n   */\n  setMap(map) {\n    this._sourceMap = map;\n  }\n\n  /**\n   * Debuelve la instancia del mapa nativo que se esta utilizando\n   *\n   * @returns {object}\n   * @memberof RxMap\n   */\n  getMap() {\n    return this._sourceMap;\n  }\n\n  /**\n    * @typedef {Object} Command\n    * @property {String} key nombre del comando.\n    * @property {string} [lib] libreria del comando.\n    * @property {string} [path] Ruta de la libreria.\n    * @private\n  */\n\n  /**\n   * @typedef {Object} loadOptions\n   * @property {Array<String|Command>} [commands] Comandos a utilizar. Si se la pasa un string se da pr supuesto que son de la libreria rxmap.\n   * @property {Array<String|Command>} [observers] Observadores a utilizar. Si se la pasa un string se da pr supuesto que son de la libreria rxmap.\n   * @property {String} [version=latest] Version de la libreria, actualmente solo soporta latest\n   * @property {String} [key] Clave de la libreria de mapas que se utiliza, para las librerias que necesiten key\n   * @property {Boolean} [defer=true] Permite cargar todos los comandos al incializar si el valor es false.\n   *                                En lugar de ir cargandolos segun se necesitan, por defecto true\n   * @private\n   *\n  */\n\n  /**\n   * Metodo asyncrono que permite cargar la libreria de mapas que se le pasa por\n   * parametros y que inicializa los comandos y observadres que se le pasan por parametro\n   * Si no se pasan ni comando ni observadres se inicializan todos los camandos\n   * de las librerias que se han añadido con la funcion addImportLib\n   *\n   * @param {String} lib Nombre de la libreria de mapas\n   * @param {loadOptions} [options={}]\n   *\n   * @returns {Promise}\n   * @memberof RxMap\n   */\n  async load(lib, options = {}) {\n    const { commands, observers } = options;\n    if (commands || observers) {\n      // eslint-disable-next-line no-param-reassign\n      options.noLoadCommands = true;\n    }\n    // First Load Map Lib\n    this._nativeLibrary = await importMapLibrary(lib, options);\n\n    if (!commands || !observers) {\n      return this;\n    }\n    if (!options.defer) {\n      // After Load all Commands and observers if not defer the loader.\n      const _commands = commands.map(key => loadLib(lib, 'commands', key, options.version));\n      const _observers = observers.map(key => loadLib(lib, 'observers', key, options.version));\n      return Promise.all(_commands.concat(_observers))\n        .then(() => this);\n    }\n\n    // create commands and observers for loader funcions when use it.\n    commands.forEach((item) => {\n      const key = typeof item === 'string' ? item : item.key;\n      registerCommand(key, (...args) => {\n        const res = loadLib(lib, 'commands', item, options.version);\n        return res.then(func => func(...args));\n      });\n    });\n    observers.forEach((item) => {\n      const key = typeof item === 'string' ? item : item.key;\n      registerObserver(key, (...args) => from(loadLib(lib, 'observers', item, options.version))\n        .pipe(switchMap(observer => observer(...args))));\n    });\n    return Promise.resolve(this);\n  }\n\n  /**\n   *  Devuelve la libreria nativa que se esta utilizando\n   *\n   * @returns {Object}\n   * @memberof RxMap\n   */\n  getMapLibrary() {\n    if (this._nativeLibrary) {\n      return this._nativeLibrary;\n    }\n    if (window.L) {\n      return window.L;\n    }\n    if (window.google && window.google.maps) {\n      return window.google;\n    }\n    return null;\n  }\n\n  /**\n   *  Crear un nuevo objeto RxMap\n   *\n   * @returns RxMap\n   * @memberof RxMap\n   */\n  init() {\n    return new RxMap();\n  }\n\n  /**\n  * @typedef {Object} Style\n  * @property {String} [icon] url del icono.\n  * @property {object} [size] tamaño del icono con {width:0,height:0}\n  * @property {string} [color] Color del contorno\n  * @property {string} [fillColor] Color del relleno\n  * @property {number} [opacity] opacidad del contorno\n  * @property {number} [fillOpacity] opacidad del contorno\n  * @property {number} [weight] ancho de la linea\n  * @property {number} [radius] Radio del elemento\n  * @private\n*/\n\n  /**\n   * Funcion que añade un estilo para dibujar posteriormenrte los diferentes\n   * objetos que se inserten\n   *\n   * @param {string} id Id unico del tipo de dato\n   * @param {string} geomType tipos de geometría valores posibles (marker / point)\n   * @param {Style} style estilo del tipo de dato a pintar.\n   * @memberof RxMap\n   */\n  setDataType(id, geomType, style) {\n    this._dataTypes[id] = { geomType, style };\n  }\n\n  /**\n   * Recupera un tipo de dato\n   *\n   * @param {String} id Nombre del tipo de dato a recuperar\n   * @returns {Object{geomType:string,style:Style}}\n   * @memberof RxMap\n   */\n  getDataType(id) {\n    return this._dataTypes[id];\n  }\n}\n\nconst createMap = () => {\n  if (!_Map) {\n    _Map = new RxMap();\n  }\n  return _Map;\n};\n\n/**\n * Instancia de RxMap\n */\nexport default createMap();\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/RxMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "RxMap",
    "memberof": "RxMap/src/RxMap.js",
    "static": true,
    "longname": "RxMap/src/RxMap.js~RxMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/RxMap.js",
    "importStyle": "{RxMap}",
    "description": "Clase que permite interactiar con los mapas a partir de comandos y observadores",
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "CommandBus"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "createAsync",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#createAsync",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_dataTypes",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#_dataTypes",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "setMap",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#setMap",
    "access": "public",
    "description": "\nFuncion que establece el mapa nativo inicializado\nque se va a utilizar se llama desde el comando 'create'",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_sourceMap",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#_sourceMap",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "getMap",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#getMap",
    "access": "public",
    "description": "Debuelve la instancia del mapa nativo que se esta utilizando",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 79,
    "kind": "typedef",
    "name": "Command",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/RxMap.js~RxMap.Command",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "nombre del comando."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "lib",
        "description": "libreria del comando."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "Ruta de la libreria."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Command"
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "typedef",
    "name": "loadOptions",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/RxMap.js~RxMap.loadOptions",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array<String|Command>"
        ],
        "spread": false,
        "optional": true,
        "name": "commands",
        "description": "Comandos a utilizar. Si se la pasa un string se da pr supuesto que son de la libreria rxmap."
      },
      {
        "nullable": null,
        "types": [
          "Array<String|Command>"
        ],
        "spread": false,
        "optional": true,
        "name": "observers",
        "description": "Observadores a utilizar. Si se la pasa un string se da pr supuesto que son de la libreria rxmap."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "latest",
        "defaultRaw": "latest",
        "name": "version",
        "description": "Version de la libreria, actualmente solo soporta latest"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "key",
        "description": "Clave de la libreria de mapas que se utiliza, para las librerias que necesiten key"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "defer",
        "description": "Permite cargar todos los comandos al incializar si el valor es false.\n                               En lugar de ir cargandolos segun se necesitan, por defecto true"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "loadOptions"
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "load",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#load",
    "access": "public",
    "description": "Metodo asyncrono que permite cargar la libreria de mapas que se le pasa por\nparametros y que inicializa los comandos y observadres que se le pasan por parametro\nSi no se pasan ni comando ni observadres se inicializan todos los camandos\nde las librerias que se han añadido con la funcion addImportLib",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "lib",
        "description": "Nombre de la libreria de mapas"
      },
      {
        "nullable": null,
        "types": [
          "loadOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "_nativeLibrary",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#_nativeLibrary",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "getMapLibrary",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#getMapLibrary",
    "access": "public",
    "description": " Devuelve la libreria nativa que se esta utilizando",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "init",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#init",
    "access": "public",
    "description": " Crear un nuevo objeto RxMap",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "RxMap"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "RxMap"
    },
    "params": []
  },
  {
    "__docId__": 85,
    "kind": "typedef",
    "name": "Style",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/RxMap.js~RxMap.Style",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "icon",
        "description": "url del icono."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": "tamaño del icono con {width:0,height:0}"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "Color del contorno"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "fillColor",
        "description": "Color del relleno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opacity",
        "description": "opacidad del contorno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "fillOpacity",
        "description": "opacidad del contorno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "weight",
        "description": "ancho de la linea"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "radius",
        "description": "Radio del elemento"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Style"
    },
    "ignore": true
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "setDataType",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#setDataType",
    "access": "public",
    "description": "Funcion que añade un estilo para dibujar posteriormenrte los diferentes\nobjetos que se inserten",
    "lineNumber": 167,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id unico del tipo de dato"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "geomType",
        "description": "tipos de geometría valores posibles (marker / point)"
      },
      {
        "nullable": null,
        "types": [
          "Style"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "estilo del tipo de dato a pintar."
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getDataType",
    "memberof": "RxMap/src/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/RxMap.js~RxMap#getDataType",
    "access": "public",
    "description": "Recupera un tipo de dato",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object{geomType:string,style:Style}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Nombre del tipo de dato a recuperar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object{geomType:string,style:Style}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "createMap",
    "memberof": "RxMap/src/RxMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/RxMap.js~createMap",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/RxMap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "RxMap/src/config.js",
    "content": "import { take } from 'rxjs/internal/operators/take';\nimport rxMap from './RxMap';\nimport isPromise from './utils/isPromise';\n\n/** @private */\nconst mandatoryCommands = ['create'];\n/** @private */\nconst mandatoryObservers = [];\n\nconst rxMapFromConfig = async (id, config) => {\n  const {\n    type, commands, observers, map, options, dataTypes,\n  } = config;\n  const { center, zoom, autoCenter } = map;\n  const mapCenter = center || { lat: 0, lng: 0 };\n\n  if (commands) {\n    let allComands = commands.concat(mandatoryCommands);\n    allComands = allComands.filter((item, pos) => allComands.indexOf(item) === pos);\n    options.commands = allComands;\n  }\n\n  if (observers) {\n    let allObservers = observers.concat(mandatoryObservers, autoCenter ? 'gps' : []);\n    allObservers = allObservers.filter((item, pos) => allObservers.indexOf(item) === pos);\n    options.observers = allObservers;\n  }\n\n  await rxMap.load(type, options);\n\n  const create = rxMap.create(id, mapCenter.lat, mapCenter.lng, zoom);\n\n  if (isPromise(create)) {\n    await new Promise(resolve => create.subscribe(data => resolve(data)));\n  }\n\n  if (autoCenter) {\n    rxMap.observer('gps')\n      .pipe(take(1))\n      .setCenter(res => ({ lat: res.latitude, lng: res.longitude }))\n      .subscribe();\n  }\n  if (dataTypes) {\n    dataTypes.forEach(element => rxMap.setDataType(element.id, element.geomType, element.style));\n  }\n\n  return rxMap;\n};\n\nexport default rxMapFromConfig;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "mandatoryCommands",
    "memberof": "RxMap/src/config.js",
    "static": true,
    "longname": "RxMap/src/config.js~mandatoryCommands",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "mandatoryObservers",
    "memberof": "RxMap/src/config.js",
    "static": true,
    "longname": "RxMap/src/config.js~mandatoryObservers",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/config.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "rxMapFromConfig",
    "memberof": "RxMap/src/config.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/config.js~rxMapFromConfig",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/config.js",
    "importStyle": "rxMapFromConfig",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "RxMap/src/core/AsyncCommandBus.js",
    "content": "import { from } from 'rxjs/internal/observable/from';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport CommandBus from './CommandBus';\nimport isPromise from '../utils/isPromise';\n\nclass AsyncCommandBus extends CommandBus {\n  constructor() {\n    super();\n    this.queue = [];\n    this.subscribers = [];\n    this.allResults = [];\n  }\n\n  execute(commandName, command, args) {\n    this.queue.push({\n      commandName,\n      command,\n      args,\n    });\n    if (this.queue.length === 1) {\n      this._executingCommand = commandName;\n      setTimeout(() => this._next(), 1);\n    }\n  }\n\n  _saveExecution(commandName, result) {\n    const res = super._saveExecution(commandName, result);\n    this.allResults.push(res);\n    return res;\n  }\n\n  _next() {\n    if (this.queue.length === 0) {\n      this._complete();\n      return;\n    }\n    const params = this.queue.shift();\n    const ret = this._execute(params.commandName, params.command, params.args);\n    if (isPromise(ret)) {\n      ret.then(() => this._next());\n      return;\n    }\n    this._next();\n  }\n\n  _complete() {\n    this.subscribers.map(f => f(this._lastCommand, this.allResults));\n  }\n\n  subscribe(func) {\n    this.subscribers.push(func);\n  }\n\n  observer(observerName, ...args) {\n    if (this.isExecuting()) {\n      return from(new Promise(resolve => this.subscribe(resolve)))\n        .pipe(switchMap(() => super.observer(observerName, ...args)));\n    }\n    return super.observer(observerName, ...args);\n  }\n}\n\nAsyncCommandBus.lift = function (source) {\n  const bus = new AsyncCommandBus();\n  bus.setSource(source);\n  return bus;\n};\n\nexport default AsyncCommandBus;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/AsyncCommandBus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "lift",
    "memberof": "RxMap/src/core/AsyncCommandBus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/AsyncCommandBus.js~lift",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/AsyncCommandBus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "AsyncCommandBus",
    "memberof": "RxMap/src/core/AsyncCommandBus.js",
    "static": true,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/AsyncCommandBus.js",
    "importStyle": "AsyncCommandBus",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "RxMap/src/core/CommandBus.js~CommandBus"
    ]
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "queue",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#queue",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "subscribers",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#subscribers",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "allResults",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#allResults",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "execute",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#execute",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "member",
    "name": "_executingCommand",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_executingCommand",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "_saveExecution",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_saveExecution",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_next",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_next",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_complete",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_complete",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "subscribe",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#subscribe",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "observer",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#observer",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "observerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "RxMap/src/core/CommandBus.js",
    "content": "\nimport { from } from 'rxjs/internal/observable/from';\nimport isPromise from '../utils/isPromise';\nimport { getObserver } from './registerObserver';\nimport { applyOperators } from './registerOperator';\n\nconst _applyCommandBus = (observer) => {\n  if (!observer.setCommandBus) {\n    applyOperators(observer);\n  }\n};\n\nclass CommandBus {\n  constructor() {\n    this._lastCommand = {\n      value: null,\n      name: null,\n    };\n  }\n\n  setSource(source) {\n    this._source = source;\n  }\n\n  getRxMap() {\n    return this._source;\n  }\n\n  value() {\n    return this._lastCommand;\n  }\n\n  execute(commandName, command, args) {\n    return this._execute(commandName, command, args);\n  }\n\n  _saveExecution(commandName, result) {\n    this._lastCommand = {\n      value: result,\n      name: commandName,\n    };\n    this._executingCommand = false;\n    return result;\n  }\n\n  _execute(commandName, command, args) {\n    this._executingCommand = commandName;\n    const ret = command(this, args);\n    const value = ret;\n    if (isPromise(ret)) {\n      return ret.then(data => this._saveExecution(commandName, data));\n    }\n    return this._saveExecution(commandName, value);\n  }\n\n  isExecuting() {\n    return !!this._executingCommand;\n  }\n\n  getCommandName() {\n    return this._executingCommand;\n  }\n\n  fromObserver(observer) {\n    _applyCommandBus(observer);\n    return observer.setCommandBus(this);\n  }\n\n  observer(observerName, ...args) {\n    if (typeof observerName !== 'string') {\n      const obser = from(observerName);\n      _applyCommandBus(obser);\n      return obser.setCommandBus(this);\n    }\n    const observer = getObserver(observerName);\n\n    if (!observer) {\n      throw new Error(`Observer ${observerName} not register`);\n    }\n    const obser = observer(this.getContext(), ...args);\n    _applyCommandBus(obser);\n    return obser.setCommandBus(this);\n  }\n\n  getContext() {\n    return {\n      RxMap: this.getRxMap(),\n      lastExecution: this.value(),\n      library: this.getRxMap().getMapLibrary(),\n    };\n  }\n}\n\nexport default CommandBus;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/CommandBus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "_applyCommandBus",
    "memberof": "RxMap/src/core/CommandBus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/CommandBus.js~_applyCommandBus",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/CommandBus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "class",
    "name": "CommandBus",
    "memberof": "RxMap/src/core/CommandBus.js",
    "static": true,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/CommandBus.js",
    "importStyle": "CommandBus",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 110,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "_lastCommand",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_lastCommand",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"value\": *, \"name\": *}"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "setSource",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#setSource",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "_source",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_source",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getRxMap",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getRxMap",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "value",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#value",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "execute",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#execute",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "_saveExecution",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_saveExecution",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "_executingCommand",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_executingCommand",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_execute",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_execute",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "isExecuting",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#isExecuting",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getCommandName",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getCommandName",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "fromObserver",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#fromObserver",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "observer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "observer",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#observer",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "observerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "getContext",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getContext",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"RxMap\": *, \"lastExecution\": *, \"library\": *}"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "RxMap/src/core/importLazyLoad.js",
    "content": "\nimport { getCommand } from './registerCommand';\n\nconst _importFunctions = {};\n\n// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\nconst ready = (cb) => {\n  if (document.body) {\n    return cb();\n  }\n  setTimeout(() => ready(cb));\n  return null;\n};\n\nconst getRef = () => {\n  const refs = (document.body || document.getElementsByTagName('head')[0]).childNodes;\n  return refs[refs.length - 1];\n};\n\nconst addElement = (tag) => {\n  ready(() => {\n    const ref = getRef();\n    // Inject link\n    // Note: the ternary preserves the existing behavior of 'before' argument, but we could choose to change the argument to 'after'\n    // in a later release and standardize on ref.nextSibling for all refs\n    // Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n    if (ref && ref.parentNode) {\n      ref.parentNode.insertBefore(tag, ref.nextSibling);\n    } else {\n      document.head.appendChild(tag);\n    }\n  });\n};\n\nconst loadJS = url => new Promise((resolve) => {\n  const implementationCode = args => resolve(args);\n  const scriptTag = document.createElement('script');\n  scriptTag.src = url;\n  scriptTag.onload = implementationCode;\n  scriptTag.onreadystatechange = implementationCode;\n  addElement(scriptTag);\n});\n\nexport const loadCSS = href => new Promise((resolve) => {\n  const ss = document.createElement('link');\n  ss.rel = 'stylesheet';\n  ss.href = href;\n  // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n  ss.media = 'only x';\n  addElement(ss);\n  // A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n  const onloadcssdefined = (cb) => {\n    const resolvedHref = ss.href;\n    const sheets = document.styleSheets;\n    let i = sheets.length;\n    i -= 1;\n    while (i) {\n      if (sheets[i].href === resolvedHref) {\n        return cb();\n      }\n      i -= 1;\n    }\n    setTimeout(() => onloadcssdefined(cb));\n    return null;\n  };\n\n  const loadCB = () => {\n    if (ss.addEventListener) {\n      ss.removeEventListener('load', loadCB);\n    }\n    ss.media = 'all';\n    resolve(ss);\n  };\n\n  // once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n  if (ss.addEventListener) {\n    ss.addEventListener('load', loadCB);\n  }\n  ss.onloadcssdefined = onloadcssdefined;\n  onloadcssdefined(loadCB);\n});\n\n/**\n   *\n   *  Funcion que permite añadir librerias externas para cargar dinamicamente nuevos\n   *  comandos y observadores\n   *  la funcion recibe como parametro la ruta del fichero a cargar siguiendo el siguiente\n   *  patron ${type}/${mapLib}@${version}/${command.key} y la funcion tiene que hacer el import\n   *  dinamico import()\n   * @example\n   *\n   * RxMap.addImportLib('test',arg => import(`../lib/${arg}`));\n   *\n   * @param {string} lib Nombre de la libreria\n   * @param {function} func Funcion a invocar\n   */\nexport const addImportFunction = (lib, func) => {\n  _importFunctions[lib] = func;\n};\n\nexport const loadLib = async (mapLib, type, name, version = 'latest') => {\n  let command = name;\n  if (typeof name === 'string') {\n    command = {\n      key: name,\n      lib: 'rxmap',\n    };\n  }\n  if (command.path) {\n    await loadJS(`${command.path}/${type}/${mapLib}@${version}/${command.key}.js`);\n    return getCommand(command.key);\n  }\n  const importFunc = _importFunctions[command.lib];\n  if (importFunc) {\n    const module = await importFunc(`${type}/${mapLib}@${version}/${command.key}`);\n    return module.default;\n  }\n  throw new Error(`not Found Import function for ${command.lib}`);\n};\n\nexport const loadAllRootLib = name => Promise.all(Object.keys(_importFunctions).map(key => _importFunctions[key](name)));\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/importLazyLoad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "_importFunctions",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~_importFunctions",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "ready",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~ready",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "getRef",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~getRef",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "addElement",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~addElement",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "tag",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "loadJS",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadJS",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "function",
    "name": "loadCSS",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadCSS",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{loadCSS}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "href",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "addImportFunction",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~addImportFunction",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{addImportFunction}",
    "description": "\n Funcion que permite añadir librerias externas para cargar dinamicamente nuevos\n comandos y observadores\n la funcion recibe como parametro la ruta del fichero a cargar siguiendo el siguiente\n patron ${type}/${mapLib}@${version}/${command.key} y la funcion tiene que hacer el import\n dinamico import()",
    "examples": [
      "\nRxMap.addImportLib('test',arg => import(`../lib/${arg}`));"
    ],
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lib",
        "description": "Nombre de la libreria"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "Funcion a invocar"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "function",
    "name": "loadLib",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadLib",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{loadLib}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "mapLib",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "version",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "latest",
        "defaultValue": "latest"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "loadAllRootLib",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadAllRootLib",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{loadAllRootLib}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "RxMap/src/core/importMapLibrary.js",
    "content": "import { loadAllRootLib, loadCSS } from './importLazyLoad';\nimport { registerCommand } from './registerCommand';\nimport { registerObserver } from './registerObserver';\n\nconst loadAll = async (name) => {\n  const register = await loadAllRootLib(name);\n  if (register && register[0] && register[0].default) {\n    register[0].default(registerCommand, registerObserver);\n  }\n};\n\nexport default async (lib, options = {}) => {\n  const version = options.version || 'latest';\n  if (lib === 'leaflet') {\n    await loadCSS('https://unpkg.com/leaflet@1.3.4/dist/leaflet.css');\n    const _lib = await import(/* webpackChunkName: \"leaflet\" */'leaflet');\n    if (!options.noLoadCommands) {\n      await loadAll(`leaflet@${version}`);\n    }\n    return _lib;\n  }\n\n  if (lib === 'google') {\n    const { loadGoogle } = await import(/* webpackChunkName: \"google\" */'../utils/google');\n    const _lib = await loadGoogle(options.key);\n    if (!options.noLoadCommands) {\n      await loadAll(`google@${version}`);\n    }\n    return _lib;\n  }\n  throw new Error(`Library ${lib} not supported`);\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/importMapLibrary.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "loadAll",
    "memberof": "RxMap/src/core/importMapLibrary.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/core/importMapLibrary.js~loadAll",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importMapLibrary.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "importMapLibrary",
    "memberof": "RxMap/src/core/importMapLibrary.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/core/importMapLibrary.js~importMapLibrary",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importMapLibrary.js",
    "importStyle": "importMapLibrary",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "lib",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "file",
    "name": "RxMap/src/core/middlewares.js",
    "content": "\nconst _middlewares = {\n  _global: [],\n};\n\nconst _subscribers = [];\n\nconst compose = (command, ...funcs) => {\n  if (funcs.length === 0) {\n    return command;\n  }\n  if (funcs.length === 1) {\n    return funcs[0](command);\n  }\n  return funcs.reduce((a, b) => a(b(command)));\n};\n\nconst executeCommand = command => (commandBus, args) => command(commandBus.getContext(), ...args);\n\nexport const applyMiddlewares = (commandName, command) => {\n  let middlewares = _middlewares._global;\n  if (_middlewares[commandName]) {\n    middlewares = _middlewares._global.concat(_middlewares[commandName]);\n  }\n  return compose(executeCommand(command), ...middlewares);\n};\n\nexport const registerMiddleware = (commandName, ...middlewares) => {\n  if (!commandName) {\n    return;\n  }\n  if (typeof commandName === 'string') {\n    _middlewares[commandName] = middlewares;\n    _subscribers.forEach(func => func(commandName));\n    return;\n  }\n  _middlewares._global = [commandName, ...middlewares];\n  _subscribers.forEach(func => func());\n};\n\nexport const subscribe = func => _subscribers.push(func);\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/middlewares.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "_middlewares",
    "memberof": "RxMap/src/core/middlewares.js",
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~_middlewares",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"_global\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "_subscribers",
    "memberof": "RxMap/src/core/middlewares.js",
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~_subscribers",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "compose",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~compose",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      },
      {
        "name": "funcs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "executeCommand",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~executeCommand",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "applyMiddlewares",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~applyMiddlewares",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{applyMiddlewares}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "registerMiddleware",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~registerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{registerMiddleware}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "middlewares",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "subscribe",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~subscribe",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{subscribe}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "RxMap/src/core/registerCommand.js",
    "content": "import { applyMiddlewares, subscribe } from './middlewares';\nimport registerOperator from './registerOperator';\nimport AsyncCommandBus from './AsyncCommandBus';\nimport CommandBus from './CommandBus';\n\nconst registerCommands = {};\n\nconst isAsyncCommandBus = function (value) {\n  return value && typeof value.subscribe === 'function' && typeof value.execute === 'function';\n};\n\nconst createFunctionInCommandBus = (commandName, commandExecute) => {\n  CommandBus.prototype[commandName] = function (...args) {\n    let _this = this;\n    if (!(isAsyncCommandBus(_this))\n      && (commandName !== 'create' || (commandName === 'create' && this.createAsync))) {\n      _this = AsyncCommandBus.lift(this);\n    }\n    _this.execute(commandName, commandExecute, args);\n    return _this;\n  };\n};\n\nconst _registerCommand = (commandName, command) => {\n  const commandExecute = applyMiddlewares(commandName, command);\n  createFunctionInCommandBus(commandName, commandExecute);\n  registerOperator(commandName, commandExecute);\n};\n\n/**\n * Permite registrar los comandos que luego se podra utilizar en @link {RxMap}\n * o desde los Observadores\n *  * @example\n *  // Registrar comando\n *  registerCommand('test',arg=>console.log(arg));\n *\n *  // Utilizar el comando\n *  RxMap.test('asasfasdf');\n *  RxMap.fromObserver(from(5)).test('asfadf').subscribe(console.log)\n *\n * @param {string} commandName Nombre del comando a regitrar\n * @param {function} command Commando a ejecutar\n * @param {object} [options] Opciones para el comando\n */\nexport const registerCommand = (commandName, command, options = {}) => {\n  registerCommands[commandName] = { command, options };\n  _registerCommand(commandName, command);\n};\n\n/**\n * Recupera la informacion adicional del comando a partir de su nombre\n * @param {string} commandName\n * @return {object}\n */\nexport const getCommandInfo = commandName => registerCommands[commandName].options;\n\n/**\n * Recupera el comando a partir de su nombre\n * @param {string} commandName\n * @return {Function}\n */\nexport const getCommand = commandName => registerCommands[commandName].command;\n\n/**\n * Recupera la lista de comandos registrados\n * @return {Array<String|command>}\n */\nexport const getAllCommandsName = () => Object.keys(registerCommands);\n\nconst updateCommandWithMiddleware = (commandName) => {\n  const commandValue = registerCommands[commandName];\n  if (commandValue) {\n    _registerCommand(commandName, commandValue.command);\n  }\n};\n\nsubscribe((commandName) => {\n  if (typeof commandName === 'string') {\n    updateCommandWithMiddleware(commandName);\n  } else {\n    Object.keys(registerCommands).forEach(key => updateCommandWithMiddleware(key));\n  }\n});\n\nexport default registerCommand;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerCommand.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "registerCommands",
    "memberof": "RxMap/src/core/registerCommand.js",
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~registerCommands",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "isAsyncCommandBus",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~isAsyncCommandBus",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "createFunctionInCommandBus",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~createFunctionInCommandBus",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "commandExecute",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "_registerCommand",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~_registerCommand",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "registerCommand",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~registerCommand",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": "{registerCommand}",
    "description": "Permite registrar los comandos que luego se podra utilizar en @link {RxMap}\no desde los Observadores\n * @example\n // Registrar comando\n registerCommand('test',arg=>console.log(arg));\n\n // Utilizar el comando\n RxMap.test('asasfasdf');\n RxMap.fromObserver(from(5)).test('asfadf').subscribe(console.log)",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commandName",
        "description": "Nombre del comando a regitrar"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "Commando a ejecutar"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Opciones para el comando"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "getCommandInfo",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~getCommandInfo",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": "{getCommandInfo}",
    "description": "Recupera la informacion adicional del comando a partir de su nombre",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commandName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "getCommand",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~getCommand",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": "{getCommand}",
    "description": "Recupera el comando a partir de su nombre",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "commandName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "getAllCommandsName",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~getAllCommandsName",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": "{getAllCommandsName}",
    "description": "Recupera la lista de comandos registrados",
    "lineNumber": 68,
    "return": {
      "nullable": null,
      "types": [
        "Array<String|command>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "updateCommandWithMiddleware",
    "memberof": "RxMap/src/core/registerCommand.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerCommand.js~updateCommandWithMiddleware",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerCommand.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "RxMap/src/core/registerObserver.js",
    "content": "\nconst registerObservers = {};\n\n/**\n * Funcion que permite registrar los observadores que luego se podran utilzar\n * desde el metodo RxMap.observer({name}).\n * La funcion tiene que devolver un objeto observable de RxJs\n *\n * @example\n *  // Registrar observador\n *  registerObserver('gps',()=>from('5'));\n *\n *  // Utilizar observador\n *  RxMap.observer('gps').subscribe(cosole.log);\n *\n * @param {string} name nombre del observador a registrar\n * @param {function} observer observador a implementar\n */\nexport const registerObserver = (name, observer) => {\n  registerObservers[name] = observer;\n};\n\n/**\n * Recupera el obsservador que recibe por parametro\n * @param {string} name\n*/\nexport const getObserver = name => registerObservers[name];\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerObserver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "registerObservers",
    "memberof": "RxMap/src/core/registerObserver.js",
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~registerObservers",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "registerObserver",
    "memberof": "RxMap/src/core/registerObserver.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~registerObserver",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": "{registerObserver}",
    "description": "Funcion que permite registrar los observadores que luego se podran utilzar\ndesde el metodo RxMap.observer({name}).\nLa funcion tiene que devolver un objeto observable de RxJs",
    "examples": [
      " // Registrar observador\n registerObserver('gps',()=>from('5'));\n\n // Utilizar observador\n RxMap.observer('gps').subscribe(cosole.log);"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "nombre del observador a registrar"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "observador a implementar"
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "getObserver",
    "memberof": "RxMap/src/core/registerObserver.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~getObserver",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": "{getObserver}",
    "description": "Recupera el obsservador que recibe por parametro",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "RxMap/src/core/registerOperator.js",
    "content": "\nimport { from } from 'rxjs/internal/observable/from';\nimport { of } from 'rxjs/internal/observable/of';\nimport { concatMap } from 'rxjs/internal/operators/concatMap';\nimport { mergeMap } from 'rxjs/internal/operators/mergeMap';\nimport isPromise from '../utils/isPromise';\n\nconst _operators = {};\n\nlet _pipe = null;\n\nconst getArgs = (param, value) => {\n  let args = param;\n  if (typeof param === 'function') {\n    args = param(value);\n  }\n  if (args && !Array.isArray(args)) {\n    args = [args];\n  }\n  return args;\n};\n\nconst getCommandBus = (observable) => {\n  const commandBus = observable.getCommandBus();\n  if (commandBus) {\n    return commandBus;\n  }\n  if (observable.source) {\n    return getCommandBus(observable.source);\n  }\n  return null;\n};\n\nconst _applyOperators = (observable) => {\n  const obj = observable.prototype || observable;\n  Object.keys(_operators).forEach((key) => {\n    // eslint-disable-next-line no-param-reassign\n    obj[key] = _operators[key];\n  });\n  return observable;\n};\n\nconst applyCommandBus = (observable) => {\n  // eslint-disable-next-line no-param-reassign\n  const obj = observable.prototype || observable;\n  if (!_pipe) {\n    _pipe = obj.pipe;\n  }\n  obj.setCommandBus = function (commandBus) {\n    this._commandBus = commandBus;\n    return this;\n  };\n  // eslint-disable-next-line no-param-reassign\n  obj.getCommandBus = function () {\n    return this._commandBus;\n  };\n  // eslint-disable-next-line no-param-reassign\n  obj.observer = function (observerName, ...args) {\n    const commandBus = getCommandBus(this);\n    return this.pipe(mergeMap(() => commandBus.observer(observerName, ...args)));\n  };\n  // obj._pipe = obj.pipe;\n  obj.pipe = function (...args) {\n    const observer = _pipe.bind(this)(...args);\n    const _commandBus = this.getCommandBus();\n    _applyOperators(observer);\n    applyCommandBus(observer);\n    return observer.setCommandBus(_commandBus);\n  };\n  return observable;\n};\n\nexport const applyOperators = (observable) => {\n  _applyOperators(observable);\n  return applyCommandBus(observable);\n};\n\nconst registerOperator = (commandName, command) => {\n  _operators[commandName] = function (someCallback) {\n    const commandBus = getCommandBus(this);\n    return this.pipe(concatMap((value) => {\n      const args = getArgs(someCallback, value);\n      const result = commandBus.execute(commandName, command, args);\n      if (!isPromise(result)) {\n        return of(result);\n      }\n      return from(result);\n    }));\n  };\n};\nexport default registerOperator;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerOperator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "_operators",
    "memberof": "RxMap/src/core/registerOperator.js",
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~_operators",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "variable",
    "name": "_pipe",
    "memberof": "RxMap/src/core/registerOperator.js",
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~_pipe",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "getArgs",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~getArgs",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "param",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "getCommandBus",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~getCommandBus",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "observable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "_applyOperators",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~_applyOperators",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "observable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "applyCommandBus",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~applyCommandBus",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "observable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "applyOperators",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~applyOperators",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": "{applyOperators}",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "observable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "registerOperator",
    "memberof": "RxMap/src/core/registerOperator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerOperator.js~registerOperator",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerOperator.js",
    "importStyle": "registerOperator",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "commandName",
        "types": [
          "*"
        ]
      },
      {
        "name": "command",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "RxMap/src/importFunctions.js",
    "content": "import { addImportFunction } from './core/importLazyLoad';\n\n// TODO: hacer una funcion con webpack que cree esto\n// const _fixedImports = () => ({\n//   'google@latest': () => import(/* webpackChunkName: \"google@latest\" */'../lib/google@latest'),\n//   'leaflet@latest': () => import(/* webpackChunkName: \"leaflet@latest\" */'../lib/leaflet@latest'),\n//   'commands/google@latest/create': () => import('../lib/commands/google@latest/create'),\n//   'commands/google@latest/marker': () => import('../lib/commands/google@latest/marker'),\n//   'commands/google@latest/popup': () => import('../lib/commands/google@latest/popup'),\n//   'commands/google@latest/point': () => import('../lib/commands/google@latest/point'),\n//   'commands/google@latest/setCenter': () => import('../lib/commands/google@latest/setCenter'),\n//   'observers/google@latest/center': () => import('../lib/observers/google@latest/center'),\n//   'observers/google@latest/click': () => import('../lib/observers/google@latest/click'),\n//   'commands/google@latest/addData': () => import('../lib/commands/google@latest/addData'),\n//   'observers/google@latest/gps': () => import('../lib/observers/google@latest/gps'),\n//   'commands/leaflet@latest/addData': () => import('../lib/commands/leaflet@latest/addData'),\n//   'observers/leaflet@latest/gps': () => import('../lib/observers/leaflet@latest/gps'),\n//   'commands/leaflet@latest/create': () => import('../lib/commands/leaflet@latest/create'),\n//   'commands/leaflet@latest/marker': () => import('../lib/commands/leaflet@latest/marker'),\n//   'commands/leaflet@latest/popup': () => import('../lib/commands/leaflet@latest/popup'),\n//   'commands/leaflet@latest/setCenter': () => import('../lib/commands/leaflet@latest/setCenter'),\n//   'commands/leaflet@latest/point': () => import('../lib/commands/leaflet@latest/point'),\n//   'observers/leaflet@latest/center': () => import('../lib/observers/leaflet@latest/center'),\n//   'observers/leaflet@latest/click': () => import('../lib/observers/leaflet@latest/click'),\n// });\n\n// addImportFunction('rxmap', (arg) => {\n//   // HACK for dynamic import. The build system except latest version of webpack need all path for create bundles.\n//   const f = _fixedImports()[arg];\n//   if (f) {\n//     return f();\n//   }\n//   return import(/* webpackMode: \"lazy\" */ `../lib/${arg}`);\n// });\n\naddImportFunction('rxmap', arg => import(/* webpackMode: \"lazy\" */ `../lib/${arg}`));\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/importFunctions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "RxMap/src/index.js",
    "content": "import * as _register from './core/registerCommand';\nimport * as _registerObserver from './core/registerObserver';\nimport * as _registerMiddleware from './core/middlewares';\nimport * as _RxMap from './RxMap';\nimport _RxMapFromConfig from './config';\nimport * as lazy from './core/importLazyLoad';\n\n/**\n * @type {registerCommand}\n */\nexport const { registerCommand } = _register;\n/**\n * @type {registerObserver}\n */\nexport const { registerObserver } = _registerObserver;\n/**\n * @type {registerMiddleware}\n */\nexport const { registerMiddleware } = _registerMiddleware;\n/**\n * @type {RxMap} Instancia\n * objeto instanciado\n */\nexport const RxMap = _RxMap.default;\n/**\n * @type {RxMap} Clase\n */\nexport const { RxMapClass } = _RxMap.RxMap;\n/**\n * @type {RxMapFromConfig}\n */\nexport const RxMapFromConfig = _RxMapFromConfig;\n/**\n * @type {addImportFunction}\n */\nexport const { addImportFunction } = lazy;\n\nexport default {\n  registerCommand: _register.registerCommand,\n  registerObserver: _registerObserver.registerObserver,\n  registerMiddleware: _registerMiddleware.registerMiddleware,\n  RxMap: _RxMap.default,\n  RxMapClass: _RxMap.RxMap,\n  RxMapFromConfig: _RxMapFromConfig,\n  addImportFunction: lazy.addImportFunction,\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "registerCommand",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerCommand",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerCommand}",
    "description": "",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "registerCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "registerObserver",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerObserver",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerObserver}",
    "description": "",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "registerObserver"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "registerMiddleware",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerMiddleware}",
    "description": "",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "registerMiddleware"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "RxMap",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMap}",
    "description": "",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "RxMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "RxMapClass",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMapClass",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMapClass}",
    "description": "",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "RxMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "RxMapFromConfig",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMapFromConfig",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMapFromConfig}",
    "description": "",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "RxMapFromConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "addImportFunction",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~addImportFunction",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{addImportFunction}",
    "description": "",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "addImportFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "RxMap/src/index.umd.js",
    "content": "import 'url-polyfill';\nimport './importFunctions';\nimport exp from './index';\n\n/**\n * Recupera el path de una url\n * @param {String} src\n * @private\n */\nconst getOrigin = (src) => {\n  const url = new URL(src);\n  return `${url.origin}/`;\n};\n\n/**\n * Recupera el Path del script actual\n * @private\n */\nconst getPath = () => {\n  if (document.currentScript) {\n    return getOrigin(document.currentScript.src);\n  }\n  const scripts = document.getElementsByTagName('script');\n  return getOrigin(scripts[scripts.length - 1]);\n};\n\n// eslint-disable-next-line\n__webpack_public_path__ = getPath();\n\n/** @private */\nexport default exp;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/index.umd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "getOrigin",
    "memberof": "RxMap/src/index.umd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/index.umd.js~getOrigin",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/index.umd.js",
    "importStyle": null,
    "description": "Recupera el path de una url",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "getPath",
    "memberof": "RxMap/src/index.umd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/index.umd.js~getPath",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/index.umd.js",
    "importStyle": null,
    "description": "Recupera el Path del script actual",
    "lineNumber": 19,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "file",
    "name": "RxMap/src/utils/google.js",
    "content": "import GoogleMapsLoader from 'google-maps';\n\nlet _google;\n\nexport const loadGoogle = key => new Promise((resolve) => {\n  GoogleMapsLoader.KEY = key;\n  GoogleMapsLoader.VERSION = '3.34';\n  GoogleMapsLoader.load((google) => {\n    _google = google;\n    resolve(google);\n  });\n});\nconst getGoogleMap = () => _google.maps;\n\nexport default getGoogleMap;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/utils/google.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 184,
    "kind": "function",
    "name": "loadGoogle",
    "memberof": "RxMap/src/utils/google.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/google.js~loadGoogle",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/google.js",
    "importStyle": "{loadGoogle}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "getGoogleMap",
    "memberof": "RxMap/src/utils/google.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/google.js~getGoogleMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/google.js",
    "importStyle": "getGoogleMap",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "RxMap/src/utils/isPromise.js",
    "content": "const isPromise = function (value) {\n  return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n};\n\nexport default isPromise;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/utils/isPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "function",
    "name": "isPromise",
    "memberof": "RxMap/src/utils/isPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/isPromise.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/isPromise.js",
    "importStyle": "isPromise",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "\n[![Build Status](https://travis-ci.org/xlab-tech/RxMap.svg?branch=master)](https://travis-ci.org/xlab-tech/RxMap)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe06b87e1b6b4e279c8507c82d8ba73f)](https://www.codacy.com/project/xlab/RxMap/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=xlab-tech/RxMap&amp;utm_campaign=Badge_Grade_Dashboard)\n[![Coverage Status](https://coveralls.io/repos/github/xlab-tech/RxMap/badge.svg?branch=master)](https://coveralls.io/github/xlab-tech/RxMap?branch=master)\n[![dependencies Status](https://david-dm.org/xlab-tech/RxMap/status.svg)](https://david-dm.org/xlab-tech/RxMap)\n[![devDependencies Status](https://david-dm.org/xlab-tech/RxMap/dev-status.svg)](https://david-dm.org/xlab-tech/RxMap?type=dev)\n[![Code style: airbnb](https://img.shields.io/badge/code%20style-airbnb-blue.svg?style=flat-square)](https://github.com/airbnb/javascript)\n[![AUR](https://img.shields.io/aur/license/yaourt.svg)](https://github.com/xlab-tech/RxMap/blob/master/LICENSE)\n\n# ![](https://avatars0.githubusercontent.com/u/37194013?s=400&u=692377e91a2dab11006abb01d0db33cdb211c9b8&v=4|width=64) RxMap\n\n[![Slack Status](https://xlab-tech.slack.com/badge.svg)](https://join.slack.com/t/xlab-tech/shared_invite/enQtNDIwMzg1MTA2NjA5LTljZWNkZjliNjhhNTc4MTQ0OWVkNTAwMTE0NmU2YTllYTE5YzllZjM2NTQ1ZmNkMDRmMGI0NWE0NGRiZGIxNmE)",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# RxMap",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/index.md",
    "name": "./manual/index.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# ** API **\n\n** @rxmap/rxmap **\n\n[Documentacion objeto que devuelve](../variable/index.html)\n\n|  Propiedad    \t| tipo      \t|  Reference Doc |  Utilización |\n|------------------\t|-------------\t|-----  |---------|\n| registerCommad \t| asfdasdf  \t|       ||\n|  [registerObserver](overview.html#registerobserver)| Function \t|[registerObserver](../function/index.html#static-function-registerObserver)        | import { registerObserver } from '@rxmap/rxmap'; |\n|        \t        |           \t|       | |\n\n## registerObserver\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/overview2.md",
    "name": "./manual/overview2.md",
    "content": "# LIB\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 188,
    "kind": "testFile",
    "name": "test/unit/core/Observable.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { of } from 'rxjs/internal/observable/of';\nimport { registerObserver } from '../../../src/core/registerObserver';\nimport rxMap from '../../../src/RxMap';\n\ndescribe('Observable', () => {\n  it('observer', () => {\n    registerObserver('test', () => of(2));\n    return new Promise((resolve, reject) => {\n      const $strem = rxMap.fromObserver(of(5));\n      $strem.observer('test').subscribe((res) => {\n        expect(res).to.eq(2);\n      }, reject, resolve);\n    });\n  });\n\n  it('observer params', () => {\n    registerObserver('test', (context, param) => of(param));\n    return new Promise((resolve, reject) => {\n      const $strem = rxMap.fromObserver(of(5));\n      $strem.observer('test', 3).subscribe((res) => {\n        expect(res).to.eq(3);\n      }, reject, resolve);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/Observable.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/core/Observable.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0",
    "access": null,
    "description": "Observable",
    "lineNumber": 7
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/unit/core/Observable.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0.it1",
    "access": null,
    "description": "observer",
    "lineNumber": 8
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/core/Observable.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0.it2",
    "access": null,
    "description": "observer params",
    "lineNumber": 18
  },
  {
    "__docId__": 192,
    "kind": "testFile",
    "name": "test/unit/core/asyncCommandBus.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\n\ndescribe('AsyncCommandBus', () => {\n  it('subscribe', () => {\n    const async = new AsyncCommandBus();\n    let pepe;\n    async.subscribe(() => {\n      pepe = 'aa';\n    });\n    async._complete();\n    expect(pepe).to.eq('aa');\n  });\n  it('observer data ', () => {\n    const async = new AsyncCommandBus();\n    async._executingCommand = false;\n    const $stream = async.observer([5]);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer data args', () => {\n    const async = new AsyncCommandBus();\n    const $stream = async.observer([5], 4);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer executing', (done) => {\n    const async = new AsyncCommandBus();\n    async._executingCommand = 'test';\n    const $stream = async.observer([5]);\n    async._complete();\n    expect($stream).is.a.instanceOf(Observable);\n    $stream.subscribe((res) => {\n      expect(res).to.eq(5);\n      async._executingCommand = false;\n      done();\n    });\n  });\n  it('save data', () => {\n    const async = new AsyncCommandBus();\n    async._saveExecution('test', 5);\n    expect(async.value().value).to.eq(5);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/asyncCommandBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/unit/core/asyncCommandBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "access": null,
    "description": "AsyncCommandBus",
    "lineNumber": 6
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it4",
    "access": null,
    "description": "subscribe",
    "lineNumber": 7
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it5",
    "access": null,
    "description": "observer data ",
    "lineNumber": 16
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it6",
    "access": null,
    "description": "observer data args",
    "lineNumber": 22
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it7",
    "access": null,
    "description": "observer executing",
    "lineNumber": 27
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it8",
    "access": null,
    "description": "save data",
    "lineNumber": 39
  },
  {
    "__docId__": 199,
    "kind": "testFile",
    "name": "test/unit/core/commandBus.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport CommandBus from '../../../src/core/CommandBus';\nimport rxMap from '../../../src/RxMap';\nimport { registerCommand } from '../../../src/core/registerCommand';\n\ndescribe('CommandBus', () => {\n  it('create new Command Bus', () => {\n    const commandBus = new CommandBus();\n    expect(commandBus).to.be.an.instanceof(CommandBus);\n    const ret = commandBus.value();\n    expect(ret).to.deep.equal({\n      value: null,\n      name: null,\n    });\n  });\n  it('executing', (done) => {\n    registerCommand('test', () => new Promise(resolve => setTimeout(resolve, 500)));\n    const bus = rxMap.test();\n\n    setTimeout(() => {\n      // eslint-disable-next-line no-unused-expressions\n      expect(bus.isExecuting()).to.be.true;\n      expect(bus.getCommandName()).to.eq('test');\n      done();\n    }, 10);\n  });\n  it('observer data ', () => {\n    const $stream = rxMap.observer([5]);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer error ', () => {\n    try {\n      rxMap.observer('kk');\n    } catch (err) {\n      expect(err).is.a.instanceOf(Error);\n    }\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/commandBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/unit/core/commandBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe9",
    "access": null,
    "description": "CommandBus",
    "lineNumber": 8
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/unit/core/commandBus.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe9.it10",
    "access": null,
    "description": "create new Command Bus",
    "lineNumber": 9
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/unit/core/commandBus.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe9.it11",
    "access": null,
    "description": "executing",
    "lineNumber": 18
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/unit/core/commandBus.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe9.it12",
    "access": null,
    "description": "observer data ",
    "lineNumber": 29
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/unit/core/commandBus.spec.js~describe9",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe9.it13",
    "access": null,
    "description": "observer error ",
    "lineNumber": 33
  },
  {
    "__docId__": 205,
    "kind": "testFile",
    "name": "test/unit/core/importLazyLoad.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport {\n  loadAllRootLib,\n  loadLib,\n  addImportFunction,\n  loadCSS,\n} from '../../../src/core/importLazyLoad';\nimport { registerCommand } from '../../../src/core/registerCommand';\n\ndescribe('Import Lazy Load', function () {\n  this.timeout(2000);\n  it('addImportFunction', () => {\n    let test;\n    addImportFunction('test', () => {\n      test = 'aaa';\n    });\n    loadAllRootLib('leaflet@latest');\n    expect(test).to.eq('aaa');\n  });\n  it('load lib command define', async () => {\n    addImportFunction('test', () => Promise.resolve({ default: 'ttt' }));\n    registerCommand('test', () => 'aa');\n    const res = await loadLib('test', 'commands', { key: 'test', lib: 'test' });\n    expect(res).to.eq('ttt');\n  });\n  it('load lib command rxmap', async () => {\n    addImportFunction('rxmap', () => Promise.resolve({ default: () => 'aaa' }));\n    const res = await loadLib('leaflet', 'commands', 'create', 'latest');\n    expect(res).to.be.a('function');\n  });\n  it('load lib command http', () => {\n    const res = loadLib('test', 'commands', { key: 'test', path: 'test' });\n    expect(res).to.be.a('promise');\n  });\n  it('load Css', async () => {\n    document.styleSheets[-1] = { href: 'https://unpkg.com/leaflet@1.3.3/dist/leaflet.css' };\n    const res = await loadCSS('https://unpkg.com/leaflet@1.3.3/dist/leaflet.css');\n    expect(res).to.be.a('HTMLLinkElement');\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/importLazyLoad.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "describe14",
    "testId": 14,
    "memberof": "test/unit/core/importLazyLoad.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14",
    "access": null,
    "description": "Import Lazy Load",
    "lineNumber": 11
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14.it15",
    "access": null,
    "description": "addImportFunction",
    "lineNumber": 13
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14.it16",
    "access": null,
    "description": "load lib command define",
    "lineNumber": 21
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14.it17",
    "access": null,
    "description": "load lib command rxmap",
    "lineNumber": 27
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14.it18",
    "access": null,
    "description": "load lib command http",
    "lineNumber": 32
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe14",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe14.it19",
    "access": null,
    "description": "load Css",
    "lineNumber": 36
  },
  {
    "__docId__": 212,
    "kind": "testFile",
    "name": "test/unit/core/importMapLibrary.spec.js",
    "content": "/* global describe,it,before,after */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport * as GoogleMapsLoader from 'google-maps';\nimport importMapLibrary from '../../../src/core/importMapLibrary';\nimport * as loader from '../../../src/core/importLazyLoad';\n\ndescribe('Import Map Library', function () {\n  before(() => {\n    sinon.stub(GoogleMapsLoader, 'load').callsFake(func => func({ maps: 5 }));\n    sinon.stub(loader, 'loadCSS').callsFake(() => Promise.resolve());\n    sinon.stub(loader, 'loadAllRootLib').returns(Promise.resolve([{ default: () => 'aa' }]));\n  });\n  after(() => {\n    GoogleMapsLoader.load.restore();\n    loader.loadCSS.restore();\n    loader.loadAllRootLib.restore();\n    // stub.loadGoogle.restore();\n    // stub.default.restore();\n  });\n  this.timeout(2000);\n  it('Import Google', async () => {\n    const lib = importMapLibrary('google', { key: 'ddd' });\n    expect(lib).to.be.a('promise');\n  });\n  it('Import Leaflet', async () => {\n    const lib = await importMapLibrary('leaflet');\n    expect(lib).to.be.a('object');\n  });\n  it('Import Error', (done) => {\n    importMapLibrary('aa').catch(() => done());\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/importMapLibrary.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "describe20",
    "testId": 20,
    "memberof": "test/unit/core/importMapLibrary.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe20",
    "access": null,
    "description": "Import Map Library",
    "lineNumber": 8
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe20.it21",
    "access": null,
    "description": "Import Google",
    "lineNumber": 22
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe20.it22",
    "access": null,
    "description": "Import Leaflet",
    "lineNumber": 26
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe20",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe20.it23",
    "access": null,
    "description": "Import Error",
    "lineNumber": 30
  },
  {
    "__docId__": 217,
    "kind": "testFile",
    "name": "test/unit/core/middleware.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport CommandBus from '../../../src/core/CommandBus';\nimport { applyMiddlewares, registerMiddleware, subscribe } from '../../../src/core/middlewares';\n\ndescribe('Middlewares', () => {\n  it('apply middleware No paramas', () => {\n    registerMiddleware();\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const commandBus = new CommandBus();\n    commandBus.setSource({ getMapLibrary: () => 'tt' });\n    expect(newFunc(commandBus, [])).to.eq(func(commandBus, []));\n  });\n  it('apply middleware one', () => {\n    const f = next => (Map, args) => {\n      next(Map, args);\n      return 'bb';\n    };\n    registerMiddleware('testRegister', f);\n    const commandBus = new CommandBus();\n    commandBus.setSource({ getMapLibrary: () => 'tt' });\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const newFunc2 = applyMiddlewares('testRegister', func);\n    expect(newFunc(commandBus, [])).to.eq('asfas');\n    expect(newFunc2(commandBus, [])).to.eq('bb');\n  });\n  it('apply middleware all', () => {\n    const f = next => (Map, args) => {\n      next(Map, args);\n      return 'aa';\n    };\n    registerMiddleware(f);\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const commandBus = new CommandBus();\n    commandBus.setSource({ getMapLibrary: () => 'tt' });\n    expect(newFunc(commandBus, [])).to.eq('aa');\n  });\n  it('subscribe', () => new Promise((resolve) => {\n    const f = next => (Map, args) => next(Map, args);\n    subscribe(() => resolve());\n    registerMiddleware('f', f);\n  }));\n  it('subscribe all', () => new Promise((resolve) => {\n    const f = next => (Map, args) => next(Map, args);\n    subscribe(() => resolve());\n    registerMiddleware(f);\n  }));\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/middleware.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/unit/core/middleware.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24",
    "access": null,
    "description": "Middlewares",
    "lineNumber": 6
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/unit/core/middleware.spec.js~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24.it25",
    "access": null,
    "description": "apply middleware No paramas",
    "lineNumber": 7
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/unit/core/middleware.spec.js~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24.it26",
    "access": null,
    "description": "apply middleware one",
    "lineNumber": 15
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/unit/core/middleware.spec.js~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24.it27",
    "access": null,
    "description": "apply middleware all",
    "lineNumber": 29
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/unit/core/middleware.spec.js~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24.it28",
    "access": null,
    "description": "subscribe",
    "lineNumber": 41
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/unit/core/middleware.spec.js~describe24",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe24.it29",
    "access": null,
    "description": "subscribe all",
    "lineNumber": 46
  },
  {
    "__docId__": 224,
    "kind": "testFile",
    "name": "test/unit/core/registerCommand.spec.js",
    "content": "/* global describe,it,afterEach */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport CommandBus from '../../../src/core/CommandBus';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\nimport { registerMiddleware } from '../../../src/core/middlewares';\nimport {\n  registerCommand, getCommand, getCommandInfo, getAllCommandsName,\n} from '../../../src/core/registerCommand';\nimport rxMap from '../../../src/RxMap';\nimport { applyOperators } from '../../../src/core/registerOperator';\n\ndescribe('Register Command', () => {\n  it('register command', () => {\n    expect(Observable).to.not.respondTo('testRegister');\n    expect(CommandBus).to.not.respondTo('testRegister');\n\n    registerCommand('testRegister', () => 'testRegister');\n    applyOperators(Observable);\n    const f = getCommand('testRegister');\n    expect(f).to.be.a('function');\n    expect(Observable).to.respondTo('testRegister');\n    expect(CommandBus).to.respondTo('testRegister');\n  });\n  it('test getAllCommnadsName', () => {\n    registerCommand('one', () => 'testRegister');\n    const names = getAllCommandsName();\n    expect(names).to.be.a('array').that.includes('one');\n  });\n  it('function return asyncCommandBus', () => {\n    registerCommand('testRegister', () => 'testRegister');\n    const res = rxMap.testRegister();\n    expect(res).to.instanceOf(AsyncCommandBus);\n  });\n  it('function create return CommandBus', () => {\n    registerCommand('create', () => 'testRegister');\n    const res = rxMap.create('aa', 'bb');\n    expect(res).to.instanceOf(CommandBus);\n  });\n  it('getCommand', () => {\n    const f = () => 'test';\n    registerCommand('test', f);\n    const ff = getCommand('test');\n    expect(ff).to.eq(f);\n  });\n  it('getCommandInfo', () => {\n    const f = () => 'test';\n    const options = { test: 'test' };\n    registerCommand('test', f, options);\n    const opt = getCommandInfo('test');\n    expect(opt).to.eq(options);\n  });\n  it('update all commands ', () => {\n    const f = () => 'test';\n    const func = next => (Map, args) => {\n      next(Map, args);\n      return 'bb';\n    };\n    registerCommand('aaa', f);\n    const fBefore = rxMap.aaa;\n    registerMiddleware(func);\n    const fAfter = rxMap.aaa;\n    expect(fBefore).not.eq(fAfter);\n  });\n  afterEach(() => {\n    delete Observable.prototype.testRegister;\n    delete CommandBus.prototype.testRegister;\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/registerCommand.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/unit/core/registerCommand.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30",
    "access": null,
    "description": "Register Command",
    "lineNumber": 13
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it31",
    "access": null,
    "description": "register command",
    "lineNumber": 14
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it32",
    "access": null,
    "description": "test getAllCommnadsName",
    "lineNumber": 25
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it33",
    "access": null,
    "description": "function return asyncCommandBus",
    "lineNumber": 30
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it34",
    "access": null,
    "description": "function create return CommandBus",
    "lineNumber": 35
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it35",
    "access": null,
    "description": "getCommand",
    "lineNumber": 40
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it36",
    "access": null,
    "description": "getCommandInfo",
    "lineNumber": 46
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/core/registerCommand.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerCommand.spec.js~describe30.it37",
    "access": null,
    "description": "update all commands ",
    "lineNumber": 53
  },
  {
    "__docId__": 233,
    "kind": "testFile",
    "name": "test/unit/core/registerObserver.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { of } from 'rxjs/internal/observable/of';\nimport rxMap from '../../../src/RxMap';\nimport CommandBus from '../../../src/core/CommandBus';\nimport { registerObserver } from '../../../src/core/registerObserver';\n\ndescribe('Register Observer', () => {\n  it('register Observable', () => {\n    expect(CommandBus).to.respondTo('observer');\n    registerObserver('test', () => of(1));\n\n    const res = rxMap.observer('test');\n    const res2 = rxMap.fromObserver(of(1)).observer('test');\n    expect(res).to.instanceOf(Observable);\n    expect(res2).to.instanceOf(Observable);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/registerObserver.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "describe38",
    "testId": 38,
    "memberof": "test/unit/core/registerObserver.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/registerObserver.spec.js~describe38",
    "access": null,
    "description": "Register Observer",
    "lineNumber": 9
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/unit/core/registerObserver.spec.js~describe38",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerObserver.spec.js~describe38.it39",
    "access": null,
    "description": "register Observable",
    "lineNumber": 10
  },
  {
    "__docId__": 236,
    "kind": "testFile",
    "name": "test/unit/core/registerOperator.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { from } from 'rxjs/internal/observable/from';\nimport registerOperator, { applyOperators } from '../../../src/core/registerOperator';\nimport CommandBus from '../../../src/core/CommandBus';\nimport rxMap from '../../../src/RxMap';\n\ndescribe('Register Operator', () => {\n  it('add Observable function', () => {\n    registerOperator('testbb', () => 'asdf');\n    const $stream = from('1');\n    applyOperators($stream);\n    expect($stream).to.respondTo('testbb');\n  });\n  it('getCommandBus', () => {\n    registerOperator('testb', () => 'asdf');\n    applyOperators(Observable);\n    return new Promise((resolve) => {\n      const $st = rxMap.fromObserver(from('1'));\n      $st.testb(res => res)\n        .subscribe((a) => {\n          expect(a).to.eq('asdf');\n          resolve();\n        });\n    });\n  });\n  it('getCommandBus 2', () => {\n    registerOperator('test', () => Promise.resolve('asdf'));\n    applyOperators(Observable);\n    const commandB = new CommandBus();\n    commandB._source = { getMapLibrary: () => 'ss' };\n    return new Promise((resolve) => {\n      const $stream = from('1');\n      $stream.source = { getCommandBus: () => commandB };\n      $stream\n        .test('aaa')\n        .subscribe((a) => {\n          expect(a).to.eq('asdf');\n          resolve();\n        });\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/registerOperator.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/unit/core/registerOperator.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/registerOperator.spec.js~describe40",
    "access": null,
    "description": "Register Operator",
    "lineNumber": 9
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/unit/core/registerOperator.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerOperator.spec.js~describe40.it41",
    "access": null,
    "description": "add Observable function",
    "lineNumber": 10
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/core/registerOperator.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerOperator.spec.js~describe40.it42",
    "access": null,
    "description": "getCommandBus",
    "lineNumber": 16
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/unit/core/registerOperator.spec.js~describe40",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerOperator.spec.js~describe40.it43",
    "access": null,
    "description": "getCommandBus 2",
    "lineNumber": 28
  },
  {
    "__docId__": 241,
    "kind": "testFile",
    "name": "test/unit/map/RxMap.spec.js",
    "content": "/* global describe,it,afterEach,beforeEach */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport rxMap, { RxMap } from '../../../src/RxMap';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\nimport { registerCommand } from '../../../src/core/registerCommand';\nimport * as load from '../../../src/core/importLazyLoad';\nimport * as loadMap from '../../../src/core/importMapLibrary';\n\ndescribe('RxMap', () => {\n  it('create new Map Instances', () => {\n    const m = rxMap.init();\n    expect(Map).to.be.not.equal(m);\n  });\n  it('commands return AsyncCommand', () => {\n    registerCommand('test', () => 'test');\n    expect(RxMap).to.respondTo('test');\n    const ret = rxMap.test();\n    expect(ret).to.be.an.instanceof(AsyncCommandBus);\n  });\n  it('setMap, getMap', () => {\n    rxMap.setMap(5);\n    const res = rxMap.getMap();\n    expect(res).to.eq(5);\n  });\n  it('dataType', () => {\n    rxMap.setDataType('test', 'line', { a: 'aa' });\n    expect(rxMap.getDataType('test').style).to.have.property('a');\n  });\n  it('getMapLibrary', () => {\n    rxMap._nativeLibrary = 5;\n    expect(rxMap.getMapLibrary()).to.eq(5);\n    rxMap._nativeLibrary = null;\n    window.L = 5;\n    expect(rxMap.getMapLibrary()).to.eq(5);\n    window.L = null;\n    window.google = { maps: 5 };\n    expect(rxMap.getMapLibrary().maps).to.eq(5);\n  });\n  describe('loads', () => {\n    let load_;\n    let loadMap_;\n    afterEach(() => {\n      loadMap_.restore();\n      load_.restore();\n    });\n    beforeEach(() => {\n      loadMap_ = sinon.stub(loadMap, 'default');\n      loadMap_.callsFake(() => Promise.resolve(5));\n      load_ = sinon.stub(load, 'loadLib');\n      load_.callsFake(() => Promise.resolve(() => 'aaaa'));\n    });\n    it('load', async () => {\n      const ret = await rxMap.load('leaflet');\n      expect(ret._nativeLibrary).to.eq(5);\n      // console.log(ret);\n    });\n    it('load commands', async () => {\n      const ret = await rxMap.load('leaflet', { commands: [{ key: 'create' }], observers: ['click'] });\n      expect(ret._nativeLibrary).to.eq(5);\n      // console.log(ret);\n    });\n    it('load commands defer', async () => {\n      const ret = await rxMap.load('leaflet', { commands: [{ key: 'create' }], observers: [{ key: 'click' }], defer: true });\n      expect(ret._nativeLibrary).to.eq(5);\n      rxMap.create();\n      // console.log(ret);\n    });\n    it('load commands defer 2', async () => {\n      const ret = await rxMap.load('leaflet', { commands: ['create'], observers: ['click'], defer: true });\n      expect(ret._nativeLibrary).to.eq(5);\n      rxMap.observer('click').subscribe();\n      // console.log(ret);\n    });\n    it('get getMapLibrary null', () => {\n      rxMap._nativeLibrary = false;\n      window.L = false;\n      window.google = false;\n      const m = rxMap.getMapLibrary();\n      // eslint-disable-next-line no-unused-expressions\n      expect(m).to.have.null;\n    });\n    it('new', () => {\n      const m = new RxMap();\n      expect(m).to.be.an.instanceof(RxMap);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/map/RxMap.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/unit/map/RxMap.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44",
    "access": null,
    "description": "RxMap",
    "lineNumber": 10
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.it45",
    "access": null,
    "description": "create new Map Instances",
    "lineNumber": 11
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.it46",
    "access": null,
    "description": "commands return AsyncCommand",
    "lineNumber": 15
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.it47",
    "access": null,
    "description": "setMap, getMap",
    "lineNumber": 21
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.it48",
    "access": null,
    "description": "dataType",
    "lineNumber": 26
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.it49",
    "access": null,
    "description": "getMapLibrary",
    "lineNumber": 30
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/unit/map/RxMap.spec.js~describe44",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "access": null,
    "description": "loads",
    "lineNumber": 40
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it51",
    "access": null,
    "description": "load",
    "lineNumber": 53
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it52",
    "access": null,
    "description": "load commands",
    "lineNumber": 58
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it53",
    "access": null,
    "description": "load commands defer",
    "lineNumber": 63
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it54",
    "access": null,
    "description": "load commands defer 2",
    "lineNumber": 69
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it55",
    "access": null,
    "description": "get getMapLibrary null",
    "lineNumber": 75
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/map/RxMap.spec.js~describe44.describe50",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe44.describe50.it56",
    "access": null,
    "description": "new",
    "lineNumber": 83
  },
  {
    "__docId__": 255,
    "kind": "testFile",
    "name": "test/unit/map/importFunction.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\n// import '../../../src/importFunctions';\nimport { loadLib, loadAllRootLib } from '../../../src/core/importLazyLoad';\n\ndescribe('addImport', () => {\n  it('import google', () => {\n    let res;\n    res = loadAllRootLib('google@latest');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'commands', 'create');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'commands', 'marker');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'commands', 'popup');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'commands', 'point');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'commands', 'setCenter');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'observers', 'gps');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'observers', 'click');\n    expect(res).to.be.a('promise');\n    res = loadLib('google', 'observers', 'center');\n    expect(res).to.be.a('promise');\n  });\n  it('import leaflet', () => {\n    let res;\n    res = loadAllRootLib('leaflet@latest');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'commands', 'create');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'commands', 'marker');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'commands', 'popup');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'commands', 'point');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'commands', 'setCenter');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'observers', 'gps');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'observers', 'click');\n    expect(res).to.be.a('promise');\n    res = loadLib('leaflet', 'observers', 'center');\n    expect(res).to.be.a('promise');\n  });\n  it('import other', () => {\n    const res = loadLib('leaflet', 'commands', 'test');\n    expect(res).to.be.a('promise');\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/map/importFunction.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "describe57",
    "testId": 57,
    "memberof": "test/unit/map/importFunction.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/map/importFunction.spec.js~describe57",
    "access": null,
    "description": "addImport",
    "lineNumber": 6
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/unit/map/importFunction.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/importFunction.spec.js~describe57.it58",
    "access": null,
    "description": "import google",
    "lineNumber": 7
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/map/importFunction.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/importFunction.spec.js~describe57.it59",
    "access": null,
    "description": "import leaflet",
    "lineNumber": 28
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/map/importFunction.spec.js~describe57",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/importFunction.spec.js~describe57.it60",
    "access": null,
    "description": "import other",
    "lineNumber": 49
  },
  {
    "__docId__": 260,
    "kind": "testFile",
    "name": "test/unit/utils/extractProperties.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport extractProperties from '../../../lib/utils/extractProperties';\n\ndescribe('extractProperties', () => {\n  it('properties', () => {\n    const prop = { a: 5 };\n    const p = {\n      properties: prop,\n    };\n    const _p = extractProperties(p);\n    expect(_p).to.eq(prop);\n  });\n  it('attributes', () => {\n    const prop = { a: 5 };\n    const p = {\n      attributes: prop,\n    };\n    const _p = extractProperties(p);\n    expect(_p).to.eq(prop);\n  });\n  it('fields', () => {\n    const prop = { a: 5 };\n    const p = {\n      fields: prop,\n    };\n    const _p = extractProperties(p);\n    expect(_p).to.eq(prop);\n  });\n  it('no data', () => {\n    const _p = extractProperties();\n    // eslint-disable-next-line no-unused-expressions\n    expect(_p).to.be.empty;\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/utils/extractProperties.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe61",
    "testId": 61,
    "memberof": "test/unit/utils/extractProperties.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/extractProperties.spec.js~describe61",
    "access": null,
    "description": "extractProperties",
    "lineNumber": 5
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/unit/utils/extractProperties.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/extractProperties.spec.js~describe61.it62",
    "access": null,
    "description": "properties",
    "lineNumber": 6
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/unit/utils/extractProperties.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/extractProperties.spec.js~describe61.it63",
    "access": null,
    "description": "attributes",
    "lineNumber": 14
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/unit/utils/extractProperties.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/extractProperties.spec.js~describe61.it64",
    "access": null,
    "description": "fields",
    "lineNumber": 22
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/unit/utils/extractProperties.spec.js~describe61",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/extractProperties.spec.js~describe61.it65",
    "access": null,
    "description": "no data",
    "lineNumber": 30
  },
  {
    "__docId__": 266,
    "kind": "testFile",
    "name": "test/unit/utils/google.spec.js",
    "content": "/* global describe,it,after,before */\nimport { expect } from 'chai';\nimport * as GoogleMapsLoader from 'google-maps';\nimport * as google from '../../../src/utils/google';\n\ndescribe('google', () => {\n  before(async () => {\n    GoogleMapsLoader.isLoaded = false;\n    GoogleMapsLoader.default.load = f => f({ maps: 5 });\n  });\n\n  after(() => {\n    // stub.restore();\n    // google.default.restore();\n    // GoogleMapsLoader.load.restore();\n  });\n\n  it('load Google', () => {\n    const g = google.loadGoogle('444');\n    return g.then((res) => {\n      expect(res.maps).to.eq(5);\n    });\n  });\n\n  it('get google', () => {\n    const g = google.default();\n    expect(g).to.eq(5);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/utils/google.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/unit/utils/google.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe66",
    "access": null,
    "description": "google",
    "lineNumber": 6
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/unit/utils/google.spec.js~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe66.it67",
    "access": null,
    "description": "load Google",
    "lineNumber": 18
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/utils/google.spec.js~describe66",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe66.it68",
    "access": null,
    "description": "get google",
    "lineNumber": 25
  },
  {
    "__docId__": 270,
    "kind": "testFile",
    "name": "test/unit/utils/transformPoint.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport leafletPoint from '../../../lib/utils/transformPointLeaflet';\nimport googlePoint from '../../../lib/utils/transformPointGoogle';\n\ndescribe('transformPoint', () => {\n  describe('transformPoint Google', () => {\n    it('err', () => {\n      expect(googlePoint).to.throw();\n    });\n    it('err mandatory', () => {\n      try {\n        googlePoint({});\n      } catch (err) {\n        expect(err).to.instanceOf(Error);\n      }\n    });\n    it('no mandatory', () => {\n      const t = googlePoint({}, true);\n      // eslint-disable-next-line no-unused-expressions\n      expect(t).to.be.null;\n    });\n    it('array', () => {\n      const p = googlePoint([1, 2]);\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('latlng', () => {\n      const p = googlePoint({ lat: 1, lng: 2 });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('latlon', () => {\n      const p = googlePoint({ lat: 1, lon: 2 });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('latitudlongitud', () => {\n      const p = googlePoint({ latitud: 1, longitud: 2 });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('latitudelongitude', () => {\n      const p = googlePoint({ latitude: 1, longitude: 2 });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('position', () => {\n      const p = googlePoint({ position: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('location', () => {\n      const p = googlePoint({ location: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n    it('center', () => {\n      const p = googlePoint({ center: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq({ lat: 1, lng: 2 });\n    });\n  });\n  describe('transformPoint Leaflet', () => {\n    it('err', () => {\n      expect(leafletPoint).to.throw();\n    });\n    it('err mandatory', () => {\n      try {\n        leafletPoint({});\n      } catch (err) {\n        expect(err).to.instanceOf(Error);\n      }\n    });\n    it('array', () => {\n      const p = leafletPoint([1, 2]);\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('latlng', () => {\n      const p = leafletPoint({ lat: 1, lng: 2 });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('latlon', () => {\n      const p = leafletPoint({ lat: 1, lon: 2 });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('latitudlongitud', () => {\n      const p = leafletPoint({ latitud: 1, longitud: 2 });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('latitudelongitude', () => {\n      const p = leafletPoint({ latitude: 1, longitude: 2 });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('position', () => {\n      const p = leafletPoint({ position: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('location', () => {\n      const p = leafletPoint({ location: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('center', () => {\n      const p = leafletPoint({ center: { latitude: 1, longitude: 2 } });\n      expect(p).to.deep.eq([1, 2]);\n    });\n    it('no mandatory', () => {\n      const t = leafletPoint({}, true);\n      // eslint-disable-next-line no-unused-expressions\n      expect(t).to.be.null;\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/utils/transformPoint.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/unit/utils/transformPoint.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69",
    "access": null,
    "description": "transformPoint",
    "lineNumber": 6
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "access": null,
    "description": "transformPoint Google",
    "lineNumber": 7
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it71",
    "access": null,
    "description": "err",
    "lineNumber": 8
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it72",
    "access": null,
    "description": "err mandatory",
    "lineNumber": 11
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it73",
    "access": null,
    "description": "no mandatory",
    "lineNumber": 18
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it74",
    "access": null,
    "description": "array",
    "lineNumber": 23
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it75",
    "access": null,
    "description": "latlng",
    "lineNumber": 27
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it76",
    "access": null,
    "description": "latlon",
    "lineNumber": 31
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it77",
    "access": null,
    "description": "latitudlongitud",
    "lineNumber": 35
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it78",
    "access": null,
    "description": "latitudelongitude",
    "lineNumber": 39
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it79",
    "access": null,
    "description": "position",
    "lineNumber": 43
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it80",
    "access": null,
    "description": "location",
    "lineNumber": 47
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe70.it81",
    "access": null,
    "description": "center",
    "lineNumber": 51
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe82",
    "testId": 82,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "access": null,
    "description": "transformPoint Leaflet",
    "lineNumber": 56
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it83",
    "testId": 83,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it83",
    "access": null,
    "description": "err",
    "lineNumber": 57
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it84",
    "access": null,
    "description": "err mandatory",
    "lineNumber": 60
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it85",
    "access": null,
    "description": "array",
    "lineNumber": 67
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it86",
    "access": null,
    "description": "latlng",
    "lineNumber": 71
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it87",
    "access": null,
    "description": "latlon",
    "lineNumber": 75
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it88",
    "access": null,
    "description": "latitudlongitud",
    "lineNumber": 79
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it89",
    "access": null,
    "description": "latitudelongitude",
    "lineNumber": 83
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it90",
    "access": null,
    "description": "position",
    "lineNumber": 87
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it91",
    "access": null,
    "description": "location",
    "lineNumber": 91
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it92",
    "access": null,
    "description": "center",
    "lineNumber": 95
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/unit/utils/transformPoint.spec.js~describe69.describe82",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/utils/transformPoint.spec.js~describe69.describe82.it93",
    "access": null,
    "description": "no mandatory",
    "lineNumber": 99
  }
]