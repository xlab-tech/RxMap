[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "RxMap/lib.js",
    "content": "\nexport const name = 'rxmap';\nexport const actions = ['addData', 'create', 'marker', 'point', 'popup', 'setCenter'];\nexport const observers = ['gps', 'center', 'click'];\nexport const func = (type, mapLib, version, key) => import(/* webpackMode: \"lazy\" */ `./dist/lib/${type}/${mapLib}@${version}/${key}`);\n\nexport default [\n  name,\n  {\n    observers,\n    actions,\n  },\n  func,\n];\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/lib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "name",
    "memberof": "RxMap/lib.js",
    "static": true,
    "longname": "RxMap/lib.js~name",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib.js",
    "importStyle": "{name}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "actions",
    "memberof": "RxMap/lib.js",
    "static": true,
    "longname": "RxMap/lib.js~actions",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib.js",
    "importStyle": "{actions}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "observers",
    "memberof": "RxMap/lib.js",
    "static": true,
    "longname": "RxMap/lib.js~observers",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib.js",
    "importStyle": "{observers}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "func",
    "memberof": "RxMap/lib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/lib.js~func",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/lib.js",
    "importStyle": "{func}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapLib",
        "types": [
          "*"
        ]
      },
      {
        "name": "version",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "RxMap/src/core/AsyncCommandBus.js",
    "content": "import { from } from 'rxjs/internal/observable/from';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport CommandBus from './CommandBus';\n\nclass AsyncCommandBus extends CommandBus {\n  constructor() {\n    super();\n    this.queue = [];\n    this.subscribers = [];\n    this.allResults = [];\n  }\n\n  execute(actionName, action, args) {\n    this.queue.push({\n      actionName,\n      action,\n      args,\n    });\n    if (this.queue.length === 1) {\n      this._executingAction = actionName;\n      setTimeout(() => this._next(), 1);\n    }\n  }\n\n  _saveExecution(actionName, result) {\n    const res = super._saveExecution(actionName, result);\n    this.allResults.push(res.value);\n    return res;\n  }\n\n  _next() {\n    if (this.queue.length === 0) {\n      this._complete();\n      return;\n    }\n    const params = this.queue.shift();\n    this._execute(params.actionName, params.action, params.args).subscribe((value) => {\n      this._next(value);\n    });\n  }\n\n  _complete() {\n    this.subscribers.map(f => f(this._lastAction, this.allResults));\n  }\n\n  subscribe(func) {\n    this.subscribers.push(func);\n  }\n\n  getValue() {\n    if (this.isExecuting()) {\n      return from(new Promise(resolve => this.subscribe((res) => {\n        resolve(res);\n      })));\n    }\n    return super.getValue();\n  }\n\n  observer(observerName, ...args) {\n    if (this.isExecuting()) {\n      return from(new Promise(resolve => this.subscribe(resolve)))\n        .pipe(switchMap(() => this._source.observer(observerName, ...args)));\n    }\n    return this._source.observer(observerName, ...args);\n  }\n}\n\nAsyncCommandBus.lift = function (source, actionsSubject) {\n  const bus = new AsyncCommandBus();\n  bus.setSource(source);\n  bus.setActionsSubject(actionsSubject);\n  return bus;\n};\n\nexport default AsyncCommandBus;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/AsyncCommandBus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "lift",
    "memberof": "RxMap/src/core/AsyncCommandBus.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/AsyncCommandBus.js~lift",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/AsyncCommandBus.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      },
      {
        "name": "actionsSubject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 7,
    "kind": "class",
    "name": "AsyncCommandBus",
    "memberof": "RxMap/src/core/AsyncCommandBus.js",
    "static": true,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/AsyncCommandBus.js",
    "importStyle": "AsyncCommandBus",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "RxMap/src/core/CommandBus.js~CommandBus"
    ]
  },
  {
    "__docId__": 8,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "queue",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#queue",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 10,
    "kind": "member",
    "name": "subscribers",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#subscribers",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "member",
    "name": "allResults",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#allResults",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "execute",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#execute",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "actionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "_executingAction",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_executingAction",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "_saveExecution",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_saveExecution",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "actionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "_next",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_next",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "_complete",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#_complete",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "subscribe",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#subscribe",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "getValue",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#getValue",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "observer",
    "memberof": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/AsyncCommandBus.js~AsyncCommandBus#observer",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "observerName",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "file",
    "name": "RxMap/src/core/CommandBus.js",
    "content": "\n\nimport { of } from 'rxjs/internal/observable/of';\nimport { from } from 'rxjs/internal/observable/from';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/internal/operators/map';\nimport { tap } from 'rxjs/internal/operators/tap';\nimport isPromise from '../utils/isPromise';\n\nclass CommandBus {\n  constructor() {\n    this._actionsSubject = null;\n    this._executingAction = false;\n    this._source = null;\n    this._lastAction = {\n      value: null,\n      name: null,\n    };\n  }\n\n  setSource(source) {\n    this._source = source;\n  }\n\n  setActionsSubject(actionsSubject) {\n    this._actionsSubject = actionsSubject;\n  }\n\n  /**\n  * @private\n  */\n  getSource() {\n    return this._source;\n  }\n\n\n  /**\n   * @private\n   */\n  getValue() {\n    return of(this._lastAction);\n  }\n\n  /**\n   * Funcion que ejecuta la  funcion sobre\n   * @param {*} actionName\n   * @param {*} action\n   * @param {*} args\n   * @private\n   */\n  execute(actionName, action, args) {\n    return this._execute(actionName, action, args).subscribe();\n  }\n\n  _saveExecution(actionName, result) {\n    this._lastAction = {\n      value: result,\n      name: actionName,\n    };\n    this._executingAction = false;\n    return this._lastAction;\n  }\n\n  _execute(actionName, action, args) {\n    this._executingAction = actionName;\n    const ret = action(this, args);\n    const $let = this._source.observer((isPromise(ret) || ret instanceof Observable) ? from(ret) : of(ret));\n    return $let.pipe(\n      map(data => this._saveExecution(actionName, data)),\n      tap(data => this._actionsSubject.next(data)),\n    );\n  }\n\n  /**\n   *\n   * @private\n   */\n  isExecuting() {\n    return !!this._executingAction;\n  }\n\n  /**\n   * @private\n   */\n  getActionName() {\n    return this._executingAction;\n  }\n\n  /**\n   *\n   * @private\n   */\n  getContext() {\n    return {\n      lastExecution: this._lastAction,\n      source: this._source,\n      ...this._source.getContext(),\n    };\n  }\n}\n\nexport default CommandBus;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/CommandBus.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 21,
    "kind": "class",
    "name": "CommandBus",
    "memberof": "RxMap/src/core/CommandBus.js",
    "static": true,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/CommandBus.js",
    "importStyle": "CommandBus",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 22,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "_actionsSubject",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_actionsSubject",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "member",
    "name": "_executingAction",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_executingAction",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 25,
    "kind": "member",
    "name": "_source",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_source",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "_lastAction",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_lastAction",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"value\": *, \"name\": *}"
      ]
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "setSource",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#setSource",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "source",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "setActionsSubject",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#setActionsSubject",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "actionsSubject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "getSource",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getSource",
    "access": "private",
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "getValue",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getValue",
    "access": "private",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "execute",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#execute",
    "access": "private",
    "description": "Funcion que ejecuta la  funcion sobre",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "_saveExecution",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_saveExecution",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "actionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "_execute",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#_execute",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "actionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "method",
    "name": "isExecuting",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#isExecuting",
    "access": "private",
    "description": "",
    "lineNumber": 78,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 40,
    "kind": "method",
    "name": "getActionName",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getActionName",
    "access": "private",
    "description": "",
    "lineNumber": 85,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "getContext",
    "memberof": "RxMap/src/core/CommandBus.js~CommandBus",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/core/CommandBus.js~CommandBus#getContext",
    "access": "private",
    "description": "",
    "lineNumber": 93,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "{\"lastExecution\": *, \"source\": *, ...undefined: Object}"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "file",
    "name": "RxMap/src/core/importLazyLoad.js",
    "content": "\n\nconst _importFunctions = {};\n\n// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\nconst ready = (cb) => {\n  if (document.body) {\n    return cb();\n  }\n  setTimeout(() => ready(cb));\n  return null;\n};\n\nconst getRef = () => {\n  const refs = (document.body || document.getElementsByTagName('head')[0]).childNodes;\n  return refs[refs.length - 1];\n};\n\nconst addElement = (tag) => {\n  ready(() => {\n    const ref = getRef();\n    // Inject link\n    // Note: the ternary preserves the existing behavior of 'before' argument, but we could choose to change the argument to 'after'\n    // in a later release and standardize on ref.nextSibling for all refs\n    // Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n    if (ref && ref.parentNode) {\n      ref.parentNode.insertBefore(tag, ref.nextSibling);\n    } else {\n      document.head.appendChild(tag);\n    }\n  });\n};\n\n/*\nconst loadJS = url => new Promise((resolve) => {\n  const implementationCode = args => resolve(args);\n  const scriptTag = document.createElement('script');\n  scriptTag.src = url;\n  scriptTag.onload = implementationCode;\n  scriptTag.onreadystatechange = implementationCode;\n  addElement(scriptTag);\n});\n*/\n\nexport const loadCSS = href => new Promise((resolve) => {\n  const ss = document.createElement('link');\n  ss.rel = 'stylesheet';\n  ss.href = href;\n  // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n  ss.media = 'only x';\n  addElement(ss);\n  // A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n  const onloadcssdefined = (cb) => {\n    const resolvedHref = ss.href;\n    const sheets = document.styleSheets;\n    let i = sheets.length;\n    i -= 1;\n    while (i) {\n      if (sheets[i].href === resolvedHref) {\n        return cb();\n      }\n      i -= 1;\n    }\n    setTimeout(() => onloadcssdefined(cb));\n    return null;\n  };\n\n  const loadCB = () => {\n    if (ss.addEventListener) {\n      ss.removeEventListener('load', loadCB);\n    }\n    ss.media = 'all';\n    resolve(ss);\n  };\n\n  // once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n  if (ss.addEventListener) {\n    ss.addEventListener('load', loadCB);\n  }\n  ss.onloadcssdefined = onloadcssdefined;\n  onloadcssdefined(loadCB);\n});\n\n/**\n   *\n   *  Funcion que permite añadir librerias externas para cargar dinamicamente nuevos\n   *  comandos y observadores\n   *  la funcion recibe como parametro la ruta del fichero a cargar siguiendo el siguiente\n   *  patron ${type}/${mapLib}@${version}/${action.key} y la funcion tiene que hacer el import\n   *  dinamico import()\n   * @example\n   *\n   * RxMap.addImportLib('test',arg => import(`../lib/${arg}`));\n   *\n   * @param {string} lib Nombre de la libreria\n   * @param {function} func Funcion a invocar\n   */\nexport const addImportFunction = (lib, func) => {\n  _importFunctions[lib] = func;\n};\n\nexport const loadLib = async (lib, mapLib, type, key, version = 'latest') => {\n  const importFunc = _importFunctions[lib];\n  if (importFunc) {\n    const module = await importFunc(type, mapLib, version, key);\n    return module.default || module[key];\n  }\n  throw new Error(`not Found Import function for ${lib}`);\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/importLazyLoad.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "name": "_importFunctions",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~_importFunctions",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "function",
    "name": "ready",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~ready",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 45,
    "kind": "function",
    "name": "getRef",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~getRef",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "addElement",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~addElement",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "tag",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "loadCSS",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadCSS",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{loadCSS}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "href",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 48,
    "kind": "function",
    "name": "addImportFunction",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~addImportFunction",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{addImportFunction}",
    "description": "\n Funcion que permite añadir librerias externas para cargar dinamicamente nuevos\n comandos y observadores\n la funcion recibe como parametro la ruta del fichero a cargar siguiendo el siguiente\n patron ${type}/${mapLib}@${version}/${action.key} y la funcion tiene que hacer el import\n dinamico import()",
    "examples": [
      "\nRxMap.addImportLib('test',arg => import(`../lib/${arg}`));"
    ],
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lib",
        "description": "Nombre de la libreria"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "Funcion a invocar"
      }
    ],
    "return": null
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "loadLib",
    "memberof": "RxMap/src/core/importLazyLoad.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/core/importLazyLoad.js~loadLib",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/importLazyLoad.js",
    "importStyle": "{loadLib}",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "lib",
        "types": [
          "*"
        ]
      },
      {
        "name": "mapLib",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "version",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "latest",
        "defaultValue": "latest"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "file",
    "name": "RxMap/src/core/middlewares.js",
    "content": "/**\n * @private\n */\nconst _middlewares = {\n  _global: [],\n};\n\n/**\n * @private\n */\nconst _subscribers = [];\n\n/**\n * @private\n */\nconst compose = (action, ...funcs) => {\n  if (funcs.length === 0) {\n    return action;\n  }\n  if (funcs.length === 1) {\n    return funcs[0](action);\n  }\n  return funcs.reduce((a, b) => a(b(action)));\n};\n\n/**\n *\n * @param {*} action\n * @private\n */\nconst executeAction = action => (commandBus, args) => action(commandBus.getContext())(...args);\n\n/**\n *\n * @param {*} actionName\n * @param {*} action\n * @private\n */\nexport const applyMiddlewares = (actionName, action) => {\n  let middlewares = _middlewares._global;\n  if (_middlewares[actionName]) {\n    middlewares = _middlewares._global.concat(_middlewares[actionName]);\n  }\n  return compose(executeAction(action), ...middlewares);\n};\n\n/**\n*\n* funcion que permite registar los middlewares, para realizar acciones antes y depués de\n* ejecutar una acción, se puden pasar mas de un middlleware .\n* El primer parametro es opcional y es el nombre de la acción sobre la que se va a aplicar\n* el middleware, si no se pasa ningun nombre se aplicará sobre todas las acciones.\n*\n* @example\n* registerMiddleware('test',middleware1,middleware2);\n* @example\n* registerMiddleware(middleware1,middleware2);\n*\n* Las funciones del midleware son funciones que revien la accion a ejecutar y devuelve una\n* función async que recibe como parametro el CommandBus y un array con los argumentos\n* La función tiene que hacer lo que quiera, ejecutar la acción, volver a ejecutar el código\n* que desee y devolver el resultado de la acción ejecutada.\n*\n* @example\n* const LoggerMiddleware = next => async (Map, args) => {\n*  const actionName = Map.getActionName();\n*  const now = new Date().getTime();\n*  const name = `Command ${actionName} [${now}]: `;\n*  console.log(`Pre ${name}`, args);\n*  const res = await next(Map, args);\n*  console.log(`Post ${name}`, res);\n*  return res;\n* };\n* registerMiddleware(LoggerMiddleware);\n*\n*/\nexport const registerMiddleware = (actionName, ...middlewares) => {\n  if (!actionName) {\n    return;\n  }\n  if (typeof actionName === 'string') {\n    _middlewares[actionName] = middlewares;\n    _subscribers.forEach(func => func(actionName));\n    return;\n  }\n  _middlewares._global = [actionName, ...middlewares];\n  _subscribers.forEach(func => func());\n};\n\nexport const subscribe = func => _subscribers.push(func);\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/middlewares.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "_middlewares",
    "memberof": "RxMap/src/core/middlewares.js",
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~_middlewares",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"_global\": *}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "_subscribers",
    "memberof": "RxMap/src/core/middlewares.js",
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~_subscribers",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "compose",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~compose",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "params": [
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "funcs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "executeAction",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~executeAction",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "applyMiddlewares",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~applyMiddlewares",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{applyMiddlewares}",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "registerMiddleware",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~registerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{registerMiddleware}",
    "description": "\nfuncion que permite registar los middlewares, para realizar acciones antes y depués de\nejecutar una acción, se puden pasar mas de un middlleware .\nEl primer parametro es opcional y es el nombre de la acción sobre la que se va a aplicar\nel middleware, si no se pasa ningun nombre se aplicará sobre todas las acciones.",
    "examples": [
      "registerMiddleware('test',middleware1,middleware2);",
      "registerMiddleware(middleware1,middleware2);\n\nLas funciones del midleware son funciones que revien la accion a ejecutar y devuelve una\nfunción async que recibe como parametro el CommandBus y un array con los argumentos\nLa función tiene que hacer lo que quiera, ejecutar la acción, volver a ejecutar el código\nque desee y devolver el resultado de la acción ejecutada.",
      "const LoggerMiddleware = next => async (Map, args) => {\n const actionName = Map.getActionName();\n const now = new Date().getTime();\n const name = `Command ${actionName} [${now}]: `;\n console.log(`Pre ${name}`, args);\n const res = await next(Map, args);\n console.log(`Post ${name}`, res);\n return res;\n};\nregisterMiddleware(LoggerMiddleware);"
    ],
    "lineNumber": 77,
    "params": [
      {
        "name": "actionName",
        "types": [
          "*"
        ]
      },
      {
        "name": "middlewares",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "subscribe",
    "memberof": "RxMap/src/core/middlewares.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/middlewares.js~subscribe",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/middlewares.js",
    "importStyle": "{subscribe}",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "func",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "RxMap/src/core/observableStore.js",
    "content": "\nimport { Subject } from 'rxjs/internal/Subject';\nimport { filter } from 'rxjs/internal/operators/filter';\n\n\nexport default () => {\n  const _actionsSubject = new Subject();\n\n  const proxy = new Proxy({}, {\n    set(obj, prop, value) {\n      if (prop === 'observer') {\n        throw new Error('observer is a function');\n      }\n      const res = Reflect.set(obj, prop, value);\n      _actionsSubject.next({ property: prop, value });\n      return res;\n    },\n    get(target, name, receiver) {\n      if (name === 'observer') {\n        return property => _actionsSubject.pipe(filter(res => res.property.match(property)));\n      }\n      return Reflect.get(target, name, receiver);\n    },\n  });\n  return proxy;\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/observableStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "observableStore",
    "memberof": "RxMap/src/core/observableStore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/observableStore.js~observableStore",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/observableStore.js",
    "importStyle": "observableStore",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "RxMap/src/core/proxyAction.js",
    "content": "\nimport { Subject } from 'rxjs/internal/Subject';\nimport { filter } from 'rxjs/internal/operators/filter';\nimport { getAction } from './registerAction';\nimport { applyMiddlewares } from './middlewares';\nimport AsyncCommandBus from './AsyncCommandBus';\nimport CommandBus from './CommandBus';\nimport { observerFrom } from './proxyObservable';\n/**\n * Funcion que permite observar la execucion de cualquir\n * comando y obtener su respuesta,\n * Se puede pasar un nombre o una expresion regular para poder\n * observar mas de un comando o todos.\n *\n * @param {String} actionName Nombre o Regex a evaluar\n * @return Observer\n */\nconst observerAction = target => actionName => target._actionsSubject.pipe(filter(lastAction => lastAction.name.match(actionName)));\n\n/**\n* @private\n*/\nconst _actionsSubject = (target) => {\n  if (!target._actionsSubject) {\n    // eslint-disable-next-line\n    target._actionsSubject = new Subject();\n  }\n  return target._actionsSubject;\n};\n\n/**\n *\n * @param {*} action\n * @param {*} target\n * @param {*} name\n * @param {*} receiver\n * @private\n */\nconst _executeAction = (action, target, name, receiver) => (...args) => {\n  let _target = target;\n  let _receiver = receiver;\n  if (!(target instanceof AsyncCommandBus)) {\n    if (name !== 'create') { // TODO: hacer esto de otra manera\n      // eslint-disable-next-line\n      _target = target._source || setProxy(target);\n      _target = AsyncCommandBus.lift(_target, _target._actionsSubject);\n    } else {\n      _target = target._commandBus || new CommandBus();\n      // eslint-disable-next-line\n      target._commandBus = _target;\n      _target._source = receiver;\n      _target._actionsSubject = receiver._actionsSubject;\n    }\n    // eslint-disable-next-line\n    _receiver = setProxy(_target);\n  }\n\n  const _action = applyMiddlewares(name, action);\n  _target.execute(name, _action, args);\n\n  return _receiver;\n};\n\nconst setProxy = obj => new Proxy(obj, {\n  get: (target, name, receiver) => {\n    if (!(name in target)) {\n      let action;\n      switch (name) {\n        case '_actionsSubject':\n          return _actionsSubject(target);\n        case 'observer':\n          return observerFrom(target._commandBus);\n        case 'observerAction':\n          return observerAction(target);\n        default:\n          action = getAction(name);\n          if (!action) {\n            return Reflect.get(target, name, receiver);\n          }\n          return _executeAction(action, target, name, receiver);\n      }\n    }\n    return Reflect.get(target, name, receiver);\n  },\n});\n\nexport default setProxy;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/proxyAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "observerAction",
    "memberof": "RxMap/src/core/proxyAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyAction.js~observerAction",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyAction.js",
    "importStyle": null,
    "description": "Funcion que permite observar la execucion de cualquir\ncomando y obtener su respuesta,\nSe puede pasar un nombre o una expresion regular para poder\nobservar mas de un comando o todos.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": "Nombre o Regex a evaluar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Observer"
    },
    "ignore": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "_actionsSubject",
    "memberof": "RxMap/src/core/proxyAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyAction.js~_actionsSubject",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyAction.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "ignore": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "_executeAction",
    "memberof": "RxMap/src/core/proxyAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyAction.js~_executeAction",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyAction.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "receiver",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "setProxy",
    "memberof": "RxMap/src/core/proxyAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyAction.js~setProxy",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyAction.js",
    "importStyle": "setProxy",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "RxMap/src/core/proxyObservable.js",
    "content": "import { concatMap } from 'rxjs/internal/operators/concatMap';\nimport { mergeMap } from 'rxjs/internal/operators/mergeMap';\nimport { from } from 'rxjs/internal/observable/from';\nimport { getAction } from './registerAction';\nimport { applyMiddlewares } from './middlewares';\nimport AsyncCommandBus from './AsyncCommandBus';\nimport { getObserver } from './registerObserver';\n\n/**\n *\n * @param {*} param Parametros que se envian al observador\n * @param {*} value Valor de la ultima ejecución\n * @private\n */\nconst getArgs = (param, value) => {\n  let args = param;\n  if (!args) {\n    return [];\n  }\n  if (typeof param === 'function') {\n    args = param(value);\n  }\n  if (args && !Array.isArray(args)) {\n    args = [args];\n  }\n  return args;\n};\n\n/**\n * @private\n */\nconst getCommandBus = (observable) => {\n  const commandBus = observable._commandBus;\n  if (commandBus) {\n    return commandBus;\n  }\n  if (observable.source) {\n    return getCommandBus(observable.source);\n  }\n  return null;\n};\n\n/**\n * Función que aplicar las funcionalidades necesarios en el observador a través de un Proxy\n * @param {object} obj Elemento a aplicar\n * @private\n */\nconst setProxy = obj => new Proxy(obj, {\n  get: (target, name, receiver) => {\n    if (!(name in target)) {\n      let action;\n      let _target;\n      switch (name) {\n        case 'setCommandBus': // TODO: Pensar si esto se pude hacer diferente para sacar de aqui la dependencia con AsyncCommandBus\n          return (commandBus) => {\n            if (commandBus instanceof AsyncCommandBus) {\n              // eslint-disable-next-line\n              target._commandBus = commandBus;\n            } else {\n              _target = commandBus._source || commandBus;\n              // eslint-disable-next-line\n              target._commandBus = AsyncCommandBus.lift(_target, _target._actionsSubject);\n            }\n            return receiver;\n          };\n        case 'getCommandBus':\n          return () => target._commandBus;\n        case 'observer':\n          return (observerName, ...args) => {\n            const commandBus = getCommandBus(target);\n            // eslint-disable-next-line\n            return receiver.pipe(mergeMap(() => observerFrom(commandBus)(observerName, ...args)));\n          };\n        default:\n          action = getAction(name);\n          if (!action) {\n            return Reflect.get(target, name, receiver);\n          }\n          return (someCallback) => {\n            const commandBus = getCommandBus(target);\n            return receiver.pipe(concatMap((value) => {\n              const args = getArgs(someCallback, value);\n              const _action = applyMiddlewares(name, action);\n              commandBus.execute(name, _action, args);\n              return commandBus.getValue();\n            }));\n          };\n      }\n    }\n    if (name === 'pipe') {\n      return new Proxy(Reflect.get(target, name, receiver), {\n        apply: (targetPipe, receiverPipe, args) => {\n          const _observer = Reflect.apply(targetPipe, receiverPipe, args);\n          const { _commandBus } = target;\n          if (!_commandBus) {\n            return _observer;\n          }\n          _observer._commandBus = _commandBus;\n          return setProxy(_observer);\n        },\n      });\n    }\n    return Reflect.get(target, name, receiver);\n  },\n});\n\n/**\n *\n * @param {Observer} observer\n * @param {CommandBus} CommandBus\n * @private\n */\nconst _applyCommandBus = (observer, CommandBus) => {\n  const _observer = setProxy(observer);\n  return _observer.setCommandBus(CommandBus.getSource());\n};\n\n/**\n *\n * Funcion que puede recibir un string con el nombre del\n * obsevador que se quiere recuperar de los registrados\n * o que puede recibir un Array, una promesa o un Iterable\n * o otro Observebable\n * sobre el que devuelve un observable con el CommandBus\n * aplicado para poder invocar los comandos.\n *\n * Al observador se le pueden pasar los argumentos que necesite.\n *\n * @example\n *  // String\n *\n * RxMap.observer('test')\n *  .example('test')\n *  .subscribe(console.log);\n * @example\n *  // Array\n * RxMap.observer([1,2,3,4,5])\n *  .example('test')\n *  .subscribe(console.log);\n * @example\n *\n * const $stream = from(['a','b','c']);\n * RxMap.observer($stream)\n *  .example('test')\n *  .subscribe(console.log);\n *\n * @param {string|Array|Promise|Iterable|Observer} observerName\n * @param  {...any} args\n * @return {Observer}\n */\nexport const observerFrom = commandBus => (observerName, ...args) => {\n  if (typeof observerName !== 'string') {\n    const obser = from(observerName);\n    return _applyCommandBus(obser, commandBus);\n  }\n  const observer = getObserver(observerName);\n  if (!observer) {\n    throw new Error(`Observer ${observerName} not register`);\n  }\n  const obser = observer(commandBus.getContext())(...args);\n  return _applyCommandBus(obser, commandBus);\n};\n\nexport default setProxy;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/proxyObservable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "getArgs",
    "memberof": "RxMap/src/core/proxyObservable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyObservable.js~getArgs",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyObservable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "Parametros que se envian al observador"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Valor de la ultima ejecución"
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "getCommandBus",
    "memberof": "RxMap/src/core/proxyObservable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyObservable.js~getCommandBus",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyObservable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 32,
    "ignore": true,
    "params": [
      {
        "name": "observable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "_applyCommandBus",
    "memberof": "RxMap/src/core/proxyObservable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyObservable.js~_applyCommandBus",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyObservable.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "Observer"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "CommandBus"
        ],
        "spread": false,
        "optional": false,
        "name": "CommandBus",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "observerFrom",
    "memberof": "RxMap/src/core/proxyObservable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyObservable.js~observerFrom",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyObservable.js",
    "importStyle": "{observerFrom}",
    "description": "\nFuncion que puede recibir un string con el nombre del\nobsevador que se quiere recuperar de los registrados\no que puede recibir un Array, una promesa o un Iterable\no otro Observebable\nsobre el que devuelve un observable con el CommandBus\naplicado para poder invocar los comandos.\n\nAl observador se le pueden pasar los argumentos que necesite.",
    "examples": [
      " // String\n\nRxMap.observer('test')\n .example('test')\n .subscribe(console.log);",
      " // Array\nRxMap.observer([1,2,3,4,5])\n .example('test')\n .subscribe(console.log);",
      "\nconst $stream = from(['a','b','c']);\nRxMap.observer($stream)\n .example('test')\n .subscribe(console.log);"
    ],
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Array",
          "Promise",
          "Iterable",
          "Observer"
        ],
        "spread": false,
        "optional": false,
        "name": "observerName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "...any"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Observer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "setProxy",
    "memberof": "RxMap/src/core/proxyObservable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/proxyObservable.js~setProxy",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/proxyObservable.js",
    "importStyle": "setProxy",
    "description": "Función que aplicar las funcionalidades necesarios en el observador a través de un Proxy",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Elemento a aplicar"
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "RxMap/src/core/registerAction.js",
    "content": "\nconst registerActions = {};\n\n/**\n * Permite registrar las acciones que luego se podra utilizar en @link {RxMap}\n * o desde los Observadores\n *  * @example\n *  // Registrar accion\n *  registerAction'test',arg=>console.log(arg));\n *\n *  // Utilizar el comando\n *  RxMap.test('asasfasdf');\n *  RxMap.fromObserver(from(5)).test('asfadf').subscribe(console.log)\n *\n * @param {string} actionName Nombre de la accion a regitrar\n * @param {function} action Action a ejecutar\n * @param {object} [options] Opciones para la accion\n */\nexport const registerAction = (actionName, action, options = {}) => {\n  registerActions[actionName] = { action, options };\n};\n\n/**\n * Recupera la informacion adicional de la acción a partir de su nombre\n * @param {string} actionName\n * @return {object}\n * @private\n */\nexport const getActionInfo = actionName => (registerActions[actionName] ? registerActions[actionName].options : false);\n\n/**\n * Recupera la acción a partir de su nombre\n * @param {string} actionName\n * @return {Function}\n * @private\n */\nexport const getAction = actionName => (registerActions[actionName] ? registerActions[actionName].action : false);\n\n/**\n * Recupera la lista de acciones registradas\n * @return {Array<String|action>}\n */\nexport const getAllActionsName = () => Object.keys(registerActions);\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerAction.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "registerActions",
    "memberof": "RxMap/src/core/registerAction.js",
    "static": true,
    "longname": "RxMap/src/core/registerAction.js~registerActions",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerAction.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "registerAction",
    "memberof": "RxMap/src/core/registerAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerAction.js~registerAction",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerAction.js",
    "importStyle": "{registerAction}",
    "description": "Permite registrar las acciones que luego se podra utilizar en @link {RxMap}\no desde los Observadores\n * @example\n // Registrar accion\n registerAction'test',arg=>console.log(arg));\n\n // Utilizar el comando\n RxMap.test('asasfasdf');\n RxMap.fromObserver(from(5)).test('asfadf').subscribe(console.log)",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": "Nombre de la accion a regitrar"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "Action a ejecutar"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Opciones para la accion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "getActionInfo",
    "memberof": "RxMap/src/core/registerAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerAction.js~getActionInfo",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerAction.js",
    "importStyle": "{getActionInfo}",
    "description": "Recupera la informacion adicional de la acción a partir de su nombre",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "getAction",
    "memberof": "RxMap/src/core/registerAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerAction.js~getAction",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerAction.js",
    "importStyle": "{getAction}",
    "description": "Recupera la acción a partir de su nombre",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "actionName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "getAllActionsName",
    "memberof": "RxMap/src/core/registerAction.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerAction.js~getAllActionsName",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerAction.js",
    "importStyle": "{getAllActionsName}",
    "description": "Recupera la lista de acciones registradas",
    "lineNumber": 43,
    "return": {
      "nullable": null,
      "types": [
        "Array<String|action>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "RxMap/src/core/registerLib.js",
    "content": "import { from } from 'rxjs/internal/observable/from';\nimport { switchMap } from 'rxjs/internal/operators/switchMap';\nimport { addImportFunction, loadLib } from './importLazyLoad';\nimport { registerObserver } from './registerObserver';\nimport { registerAction } from './registerAction';\n\n/**\n * Funcion que permite registrar librerias de Comandos y Observadores\n *\n * Solo se registran los comamdos y los observadores que se pasen en los parametros, si ya existiera\n * un comando o observador con el mismo nombre lo sobreescribiria.\n *\n * La funcion recibira los parametros ( type, mapLib, version, key ) para indicar lo que se quiere\n * recuperar. Y tiene que devolver de manera asyncrona( async, promise ) un objeto con la funcion del comando o\n * el observador el valor \"default\" o en el valor del nombre del comando o observador.\n * Esta funcion tiene que cargar el codigo en la aplicación la manera más aconsejado es con un\n * import dynamico\n *\n * @example\n * Ejemplo de Funcion import dinamico\n * (type, mapLib, version, key) => import( `../lib/${type}/${mapLib}@${version}/${key}`));\n *\n * @param {string} name Nombre de la libreria a registrar\n * @param {object{actions:Array,observers:Array}} options Lista de comandos y Observadores de la lirberia\n * @param {Function(name:string)} func Funcion que se utilizara para cargar dynamicamente los comados y los Observadores\n */\nconst registerLib = (name, options, func) => {\n  addImportFunction(name, func);\n  const actions = options.actions || [];\n  const observers = options.observers || [];\n  actions.forEach((key) => {\n    registerAction(key, (...args) => {\n      // TODO: buscar una manera de pasar estos datos para desacoplar el mapa\n      const lib = args[0].source.libName;\n      const version = args[0].source.libVersion;\n      const res = loadLib(name, lib, 'actions', key, version);\n      return res.then(action => action(...args));\n    });\n  });\n  observers.forEach((key) => {\n    registerObserver(key, (...args) => {\n      // TODO: buscar una manera de pasar estos datos para desacoplar el mapa\n      const lib = args[0].source.libName;\n      const version = args[0].source.libVersion;\n      return from(loadLib(name, lib, 'observers', key, version))\n        .pipe(switchMap(observer => observer(...args)));\n    });\n  });\n};\n\nexport default registerLib;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerLib.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "registerLib",
    "memberof": "RxMap/src/core/registerLib.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerLib.js~registerLib",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerLib.js",
    "importStyle": "registerLib",
    "description": "Funcion que permite registrar librerias de Comandos y Observadores\n\nSolo se registran los comamdos y los observadores que se pasen en los parametros, si ya existiera\nun comando o observador con el mismo nombre lo sobreescribiria.\n\nLa funcion recibira los parametros ( type, mapLib, version, key ) para indicar lo que se quiere\nrecuperar. Y tiene que devolver de manera asyncrona( async, promise ) un objeto con la funcion del comando o\nel observador el valor \"default\" o en el valor del nombre del comando o observador.\nEsta funcion tiene que cargar el codigo en la aplicación la manera más aconsejado es con un\nimport dynamico",
    "examples": [
      "Ejemplo de Funcion import dinamico\n(type, mapLib, version, key) => import( `../lib/${type}/${mapLib}@${version}/${key}`));"
    ],
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Nombre de la libreria a registrar"
      },
      {
        "nullable": null,
        "types": [
          "object{actions:Array,observers:Array}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Lista de comandos y Observadores de la lirberia"
      },
      {
        "nullable": null,
        "types": [
          "Function(name:string)"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "Funcion que se utilizara para cargar dynamicamente los comados y los Observadores"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "RxMap/src/core/registerObserver.js",
    "content": "\nconst registerObservers = {};\n\n/**\n * Funcion que permite registrar los observadores que luego se podran utilzar\n * desde el metodo RxMap.observer({name}).\n * La funcion tiene que devolver un objeto observable de RxJs\n *\n * @example\n *  // Registrar observador\n *  registerObserver('gps',()=>from('5'));\n *\n *  // Utilizar observador\n *  RxMap.observer('gps').subscribe(cosole.log);\n *\n * @param {string} name nombre del observador a registrar\n * @param {function} observer observador a implementar\n */\nexport const registerObserver = (name, observer) => {\n  registerObservers[name] = observer;\n};\n\n/**\n * Recupera el obsservador que recibe por parametro\n * @param {string} name\n * @private\n*/\nexport const getObserver = name => registerObservers[name];\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/core/registerObserver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "registerObservers",
    "memberof": "RxMap/src/core/registerObserver.js",
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~registerObservers",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "registerObserver",
    "memberof": "RxMap/src/core/registerObserver.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~registerObserver",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": "{registerObserver}",
    "description": "Funcion que permite registrar los observadores que luego se podran utilzar\ndesde el metodo RxMap.observer({name}).\nLa funcion tiene que devolver un objeto observable de RxJs",
    "examples": [
      " // Registrar observador\n registerObserver('gps',()=>from('5'));\n\n // Utilizar observador\n RxMap.observer('gps').subscribe(cosole.log);"
    ],
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "nombre del observador a registrar"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "observer",
        "description": "observador a implementar"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "getObserver",
    "memberof": "RxMap/src/core/registerObserver.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/core/registerObserver.js~getObserver",
    "access": "private",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/core/registerObserver.js",
    "importStyle": "{getObserver}",
    "description": "Recupera el obsservador que recibe por parametro",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "RxMap/src/index.js",
    "content": "import './utils/polyfill';\nimport * as _register from './core/registerAction';\nimport * as _registerObserver from './core/registerObserver';\nimport * as _registerMiddleware from './core/middlewares';\nimport * as _RxMap from './map/RxMap';\nimport _RxMapFromConfig from './map/config';\nimport _registerLib from './core/registerLib';\nimport * as _middlewares from './map/middlewares/logger';\n/**\n * @type {registerAction}\n */\nexport const { registerAction } = _register;\n/**\n * @type {registerObserver}\n */\nexport const { registerObserver } = _registerObserver;\n/**\n * @type {registerMiddleware}\n */\nexport const { registerMiddleware } = _registerMiddleware;\n/**\n * @type {RxMap} Instancia\n * objeto instanciado\n */\nexport const RxMap = _RxMap.default;\n/**\n * @type {RxMap} Clase\n */\nexport const RxMapClass = _RxMap.RxMap;\n/**\n * @type {RxMapFromConfig}\n */\nexport const RxMapFromConfig = _RxMapFromConfig;\n/**\n * @type {registerLib}\n */\nexport const registerLib = _registerLib;\n\nexport const middlewares = _middlewares;\n\nexport default {\n  registerAction,\n  registerObserver,\n  registerMiddleware,\n  registerLib,\n  RxMap,\n  RxMapClass,\n  RxMapFromConfig,\n  middlewares,\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "registerAction",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerAction",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerAction}",
    "description": "",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "registerAction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "registerObserver",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerObserver",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerObserver}",
    "description": "",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "registerObserver"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "registerMiddleware",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerMiddleware}",
    "description": "",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "registerMiddleware"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "RxMap",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMap}",
    "description": "",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "RxMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "RxMapClass",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMapClass",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMapClass}",
    "description": "",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "RxMap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "variable",
    "name": "RxMapFromConfig",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~RxMapFromConfig",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{RxMapFromConfig}",
    "description": "",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "RxMapFromConfig"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "registerLib",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~registerLib",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{registerLib}",
    "description": "",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "registerLib"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "variable",
    "name": "middlewares",
    "memberof": "RxMap/src/index.js",
    "static": true,
    "longname": "RxMap/src/index.js~middlewares",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/index.js",
    "importStyle": "{middlewares}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "RxMap/src/index.umd.js",
    "content": "import exp from './index';\n\n/**\n * Recupera el path de una url\n * @param {String} src\n * @private\n */\nconst getOrigin = (src) => {\n  const url = new URL(src);\n  return `${url.origin}/`;\n};\n\n/**\n * Recupera el Path del script actual\n * @private\n */\nconst getPath = () => {\n  if (document.currentScript) {\n    return getOrigin(document.currentScript.src);\n  }\n  const scripts = document.getElementsByTagName('script');\n  return getOrigin(scripts[scripts.length - 1]);\n};\n\n// eslint-disable-next-line\n__webpack_public_path__ = getPath();\n\n/** @private */\nexport default exp;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/index.umd.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "getOrigin",
    "memberof": "RxMap/src/index.umd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/index.umd.js~getOrigin",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/index.umd.js",
    "importStyle": null,
    "description": "Recupera el path de una url",
    "lineNumber": 8,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "function",
    "name": "getPath",
    "memberof": "RxMap/src/index.umd.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/index.umd.js~getPath",
    "access": "private",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/index.umd.js",
    "importStyle": null,
    "description": "Recupera el Path del script actual",
    "lineNumber": 17,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "RxMap/src/map/RxMap.js",
    "content": "\nimport { take } from 'rxjs/internal/operators/take';\nimport proxyAction from '../core/proxyAction';\nimport importMapLibrary from './importMapLibrary';\nimport observableStore from '../core/observableStore';\n\nlet _Map;\n\n/**\n * Clase que permite interactiar con los mapas a partir de comandos y observadores\n *\n * @extends {CommandBus}\n */\nexport class RxMap {\n  constructor() {\n    /**\n     * {String} nombre de la libreria de Mapas que se utiliza\n     */\n    this.libName = null;\n    /**\n     * {String} version de la libreria que se utiliza\n     */\n    this.libVersion = null;\n    /**\n     * {observableStore} Store observable\n     */\n    this.store = observableStore();\n  }\n\n  /**\n   * Debuelve la instancia del mapa nativo que se esta utilizando\n   *\n   * @returns {object}\n   * @memberof RxMap\n   */\n  getMap() {\n    return this._sourceMap;\n  }\n\n  /**\n   * Recupera el contexto para las ejecuciones de los comandos y observadores\n   * @param { object} [value] puede recibir la ultima ejecucion si se solicita desde AsyncCommand\n   * @returns {object}\n   * @private\n   */\n  getContext() {\n    return {\n      library: this.getMapLibrary(),\n      store: this.store,\n    };\n  }\n  /**\n    * @typedef {Object} action\n    * @property {String} key nombre del comando.\n    * @property {string} [lib] libreria del comando.\n    * @property {string} [path] Ruta de la libreria.\n    * @private\n  */\n\n  /**\n   * @typedef {Object} loadOptions\n   * @property {String} [version=latest] Version de la libreria, actualmente solo soporta latest\n   * @property {String} [key] Clave de la libreria de mapas que se utiliza, para las librerias que necesiten key\n   * @private\n   *\n  */\n\n  /**\n   * Metodo asyncrono que permite cargar la libreria de mapas que se le pasa por\n   * parametros\n   *\n   * @param {String} lib Nombre de la libreria de mapas\n   * @param {loadOptions} [options={}]\n   *\n   * @returns {Promise}\n   * @memberof RxMap\n   */\n  async load(lib, options = {}) {\n    this.libName = lib;\n    this.libVersion = options.version || 'latest';\n\n    this._actionsSubject.pipe(take(1)).subscribe((res) => {\n      this._sourceMap = res.value;\n    });\n    // First Load Map Lib\n    this._nativeLibrary = await importMapLibrary(lib, options);\n\n    return this;\n  }\n\n  /**\n   *  Devuelve la libreria nativa que se esta utilizando\n   *\n   * @returns {Object}\n   * @memberof RxMap\n   */\n  getMapLibrary() {\n    if (this._nativeLibrary) {\n      return this._nativeLibrary;\n    }\n    if (window.L) {\n      return window.L;\n    }\n    if (window.google && window.google.maps) {\n      return window.google;\n    }\n    return null;\n  }\n\n  /**\n   *  Crear un nuevo objeto RxMap\n   *\n   * @returns RxMap\n   * @memberof RxMap\n   */\n  init() {\n    return proxyAction(new RxMap());\n  }\n\n  /**\n  * @typedef {Object} Style\n  * @property {String} [icon] url del icono.\n  * @property {object} [size] tamaño del icono con {width:0,height:0}\n  * @property {string} [color] Color del contorno\n  * @property {string} [fillColor] Color del relleno\n  * @property {number} [opacity] opacidad del contorno\n  * @property {number} [fillOpacity] opacidad del contorno\n  * @property {number} [weight] ancho de la linea\n  * @property {number} [radius] Radio del elemento\n  * @private\n*/\n\n  /**\n   * Funcion que añade un estilo para dibujar posteriormenrte los diferentes\n   * objetos que se inserten\n   *\n   * @param {string} id Id unico del tipo de dato\n   * @param {string} geomType tipos de geometría valores posibles (marker / point)\n   * @param {Style} style estilo del tipo de dato a pintar.\n   * @memberof RxMap\n   */\n  setDataType(id, geomType, style) {\n    this.store[`type@${id}`] = { geomType, style };\n  }\n\n  /**\n   * Recupera un tipo de dato\n   *\n   * @param {String} id Nombre del tipo de dato a recuperar\n   * @returns {Object{geomType:string,style:Style}}\n   * @memberof RxMap\n   */\n  getDataType(id) {\n    return this.store[`type@${id}`];\n  }\n\n  /**\n * Funcion que permite observar los datos del store,\n * Se puede pasar una propiedad o una expresion regular para poder\n * observar mas de un comando o todos.\n *\n * @param {String} name Nombre o Regex a evaluar\n * @return Observer\n*/\n  observerData(property) {\n    return this.store.observer(property);\n  }\n}\n\nconst createMap = () => {\n  if (!_Map) {\n    _Map = proxyAction(new RxMap());\n  }\n  return _Map;\n};\n\n/**\n * Instancia de RxMap\n */\nexport default createMap();\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/map/RxMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "RxMap",
    "memberof": "RxMap/src/map/RxMap.js",
    "static": true,
    "longname": "RxMap/src/map/RxMap.js~RxMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/map/RxMap.js",
    "importStyle": "{RxMap}",
    "description": "Clase que permite interactiar con los mapas a partir de comandos y observadores",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "CommandBus"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "libName",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#libName",
    "access": "public",
    "description": "{String} nombre de la libreria de Mapas que se utiliza",
    "lineNumber": 19,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "libVersion",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#libVersion",
    "access": "public",
    "description": "{String} version de la libreria que se utiliza",
    "lineNumber": 23,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "store",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#store",
    "access": "public",
    "description": "{observableStore} Store observable",
    "lineNumber": 27,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getMap",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#getMap",
    "access": "public",
    "description": "Debuelve la instancia del mapa nativo que se esta utilizando",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getContext",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#getContext",
    "access": "private",
    "description": "Recupera el contexto para las ejecuciones de los comandos y observadores",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          " object"
        ],
        "spread": false,
        "optional": true,
        "name": "value",
        "description": "puede recibir la ultima ejecucion si se solicita desde AsyncCommand"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "typedef",
    "name": "action",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/map/RxMap.js~RxMap.action",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "nombre del comando."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "lib",
        "description": "libreria del comando."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "path",
        "description": "Ruta de la libreria."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "action"
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "typedef",
    "name": "loadOptions",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/map/RxMap.js~RxMap.loadOptions",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "latest",
        "defaultRaw": "latest",
        "name": "version",
        "description": "Version de la libreria, actualmente solo soporta latest"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "key",
        "description": "Clave de la libreria de mapas que se utiliza, para las librerias que necesiten key"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "loadOptions"
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "load",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#load",
    "access": "public",
    "description": "Metodo asyncrono que permite cargar la libreria de mapas que se le pasa por\nparametros",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "lib",
        "description": "Nombre de la libreria de mapas"
      },
      {
        "nullable": null,
        "types": [
          "loadOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "_sourceMap",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#_sourceMap",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "_nativeLibrary",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#_nativeLibrary",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getMapLibrary",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#getMapLibrary",
    "access": "public",
    "description": " Devuelve la libreria nativa que se esta utilizando",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "init",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#init",
    "access": "public",
    "description": " Crear un nuevo objeto RxMap",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "RxMap"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "RxMap"
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "typedef",
    "name": "Style",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "static": true,
    "longname": "RxMap/src/map/RxMap.js~RxMap.Style",
    "access": "private",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "icon",
        "description": "url del icono."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": "tamaño del icono con {width:0,height:0}"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "color",
        "description": "Color del contorno"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "fillColor",
        "description": "Color del relleno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "opacity",
        "description": "opacidad del contorno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "fillOpacity",
        "description": "opacidad del contorno"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "weight",
        "description": "ancho de la linea"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "radius",
        "description": "Radio del elemento"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Style"
    },
    "ignore": true
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "setDataType",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#setDataType",
    "access": "public",
    "description": "Funcion que añade un estilo para dibujar posteriormenrte los diferentes\nobjetos que se inserten",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id unico del tipo de dato"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "geomType",
        "description": "tipos de geometría valores posibles (marker / point)"
      },
      {
        "nullable": null,
        "types": [
          "Style"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": "estilo del tipo de dato a pintar."
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "getDataType",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#getDataType",
    "access": "public",
    "description": "Recupera un tipo de dato",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object{geomType:string,style:Style}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Nombre del tipo de dato a recuperar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object{geomType:string,style:Style}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "observerData",
    "memberof": "RxMap/src/map/RxMap.js~RxMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "RxMap/src/map/RxMap.js~RxMap#observerData",
    "access": "public",
    "description": "Funcion que permite observar los datos del store,\nSe puede pasar una propiedad o una expresion regular para poder\nobservar mas de un comando o todos.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Nombre o Regex a evaluar"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Observer"
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "createMap",
    "memberof": "RxMap/src/map/RxMap.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/map/RxMap.js~createMap",
    "access": "public",
    "export": false,
    "importPath": "@rxmap/rxmap/RxMap/src/map/RxMap.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "RxMap/src/map/config.js",
    "content": "\nimport rxMap from './RxMap';\nimport isPromise from '../utils/isPromise';\n\nconst rxMapFromConfig = async (id, config) => {\n  const {\n    type, map, options, dataTypes, actions,\n  } = config;\n  const { center, zoom } = map;\n  const mapCenter = center || { lat: 0, lng: 0 };\n\n  await rxMap.load(type, options);\n\n  const create = rxMap.create(id, mapCenter.lat, mapCenter.lng, zoom);\n\n  if (isPromise(create)) {\n    await new Promise(resolve => create.subscribe(data => resolve(data)));\n  }\n\n  if (actions) {\n    actions.forEach((action) => {\n      if (Array.isArray(action)) {\n        action.reduce((item, data) => item[data.name](...data.params), rxMap);\n      } else {\n        rxMap[action.name](...action.params);\n      }\n    });\n  }\n\n  if (dataTypes) {\n    dataTypes.forEach(element => rxMap.setDataType(element.id, element.geomType, element.style));\n  }\n\n  return rxMap;\n};\n\nexport default rxMapFromConfig;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/map/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "function",
    "name": "rxMapFromConfig",
    "memberof": "RxMap/src/map/config.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/map/config.js~rxMapFromConfig",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/map/config.js",
    "importStyle": "rxMapFromConfig",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "RxMap/src/map/importMapLibrary.js",
    "content": "import { loadCSS } from '../core/importLazyLoad';\n\nexport default async (lib, options = {}) => {\n  // const version = options.version || 'latest';\n  if (lib === 'leaflet') {\n    await loadCSS('https://unpkg.com/leaflet@1.3.4/dist/leaflet.css');\n    return import(/* webpackChunkName: \"leaflet\" */'leaflet');\n  }\n\n  if (lib === 'google') {\n    const { loadGoogle } = await import(/* webpackChunkName: \"google\" */'../utils/google');\n    return loadGoogle(options.key);\n  }\n\n  if (lib === 'mapbox') {\n    const mapbox = await import(/* webpackChunkName: \"mapbox\" */'mapbox-gl');\n    mapbox.default.accessToken = options.key;\n    return mapbox;\n  }\n\n  if (lib === 'ol') {\n    return import(/* webpackChunkName: \"ol\" */'ol');\n  }\n\n  if (lib === 'esri') {\n    const esriLoader = await import(/* webpackChunkName: \"esri\" */'esri-loader');\n    const loadScriptPromise = esriLoader.loadScript();\n    return loadScriptPromise.then(() => esriLoader);\n  }\n  if (lib === 'carto') {\n    await loadCSS('https://unpkg.com/leaflet@1.3.4/dist/leaflet.css');\n    const leaflet = await import(/* webpackChunkName: \"leaflet\" */'leaflet');\n    const carto = await import(/* webpackChunkName: \"carto\" */'@carto/carto.js');\n    const client = new carto.Client({\n      apiKey: options.key,\n      username: options.user,\n    });\n    return {\n      leaflet, carto, client,\n    };\n  }\n  throw new Error(`Library ${lib} not supported`);\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/map/importMapLibrary.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "importMapLibrary",
    "memberof": "RxMap/src/map/importMapLibrary.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "RxMap/src/map/importMapLibrary.js~importMapLibrary",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/map/importMapLibrary.js",
    "importStyle": "importMapLibrary",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "lib",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "{\"leaflet\": *, \"carto\": *, \"client\": *}"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "RxMap/src/map/middlewares/logger.js",
    "content": "\nexport const LoggerMiddleware = next => async (Map, args) => {\n  const actionName = Map.getActionName();\n  const now = new Date().getTime();\n  const name = `Command ${actionName} [${now}]: `;\n  console.log(`Pre ${name}`, args);\n  const res = await next(Map, args);\n  console.log(`Post ${name}`, res);\n  return res;\n};\n\nexport const TimerMiddleware = next => async (Map, args) => {\n  const actionName = Map.getActionName();\n  const now = new Date().getTime();\n  const name = `${actionName}_${now}`;\n  console.time(name);\n  const res = await next(Map, args);\n  console.timeEnd(name);\n  return res;\n};\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/map/middlewares/logger.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "LoggerMiddleware",
    "memberof": "RxMap/src/map/middlewares/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/map/middlewares/logger.js~LoggerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/map/middlewares/logger.js",
    "importStyle": "{LoggerMiddleware}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "function",
    "name": "TimerMiddleware",
    "memberof": "RxMap/src/map/middlewares/logger.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/map/middlewares/logger.js~TimerMiddleware",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/map/middlewares/logger.js",
    "importStyle": "{TimerMiddleware}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "file",
    "name": "RxMap/src/utils/google.js",
    "content": "import GoogleMapsLoader from 'google-maps';\n\nlet _google;\n\nexport const loadGoogle = key => new Promise((resolve) => {\n  GoogleMapsLoader.KEY = key;\n  GoogleMapsLoader.VERSION = '3.34';\n  GoogleMapsLoader.load((google) => {\n    _google = google;\n    resolve(google);\n  });\n});\nconst getGoogleMap = () => _google.maps;\n\nexport default getGoogleMap;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/utils/google.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 125,
    "kind": "function",
    "name": "loadGoogle",
    "memberof": "RxMap/src/utils/google.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/google.js~loadGoogle",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/google.js",
    "importStyle": "{loadGoogle}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "getGoogleMap",
    "memberof": "RxMap/src/utils/google.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/google.js~getGoogleMap",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/google.js",
    "importStyle": "getGoogleMap",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "RxMap/src/utils/isPromise.js",
    "content": "const isPromise = function (value) {\n  return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n};\n\nexport default isPromise;\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/utils/isPromise.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "isPromise",
    "memberof": "RxMap/src/utils/isPromise.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "RxMap/src/utils/isPromise.js~isPromise",
    "access": "public",
    "export": true,
    "importPath": "@rxmap/rxmap/RxMap/src/utils/isPromise.js",
    "importStyle": "isPromise",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "RxMap/src/utils/polyfill.js",
    "content": "import 'proxy-polyfill';\nimport 'url-polyfill';\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/src/utils/polyfill.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "# [<img src=\"https://avatars0.githubusercontent.com/u/37194013?s=400&u=692377e91a2dab11006abb01d0db33cdb211c9b8&v=4\" alt=\"xlab\"  height=\"24\">](https://xlab.tech) RxMap\n\n[![Build Status](https://travis-ci.org/xlab-tech/RxMap.svg?branch=master)](https://travis-ci.org/xlab-tech/RxMap)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe06b87e1b6b4e279c8507c82d8ba73f)](https://www.codacy.com/project/xlab/RxMap/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=xlab-tech/RxMap&amp;utm_campaign=Badge_Grade_Dashboard)\n[![Coverage Status](https://coveralls.io/repos/github/xlab-tech/RxMap/badge.svg?branch=master)](https://coveralls.io/github/xlab-tech/RxMap?branch=master)\n[![dependencies Status](https://david-dm.org/xlab-tech/RxMap/status.svg)](https://david-dm.org/xlab-tech/RxMap)\n[![devDependencies Status](https://david-dm.org/xlab-tech/RxMap/dev-status.svg)](https://david-dm.org/xlab-tech/RxMap?type=dev)\n[![Code style: airbnb](https://img.shields.io/badge/code%20style-airbnb-blue.svg?style=flat-square)](https://github.com/airbnb/javascript)\n[![AUR](https://img.shields.io/aur/license/yaourt.svg)](https://github.com/xlab-tech/RxMap/blob/master/LICENSE)\n\n[<img src=\"https://avatars0.githubusercontent.com/u/37194013?s=400&u=692377e91a2dab11006abb01d0db33cdb211c9b8&v=4\" alt=\"xlab\"  height=\"64\">](https://xlab.tech)\n&nbsp;&nbsp;\n[<img src=\"https://cdn.icon-icons.com/icons2/923/PNG/512/slack_alt_icon-icons.com_72013.png\" alt=\"Join Slack\"  height=\"64\">](https://join.slack.com/t/xlab-tech/shared_invite/enQtNDIwMzg1MTA2NjA5LTljZWNkZjliNjhhNTc4MTQ0OWVkNTAwMTE0NmU2YTllYTE5YzllZjM2NTQ1ZmNkMDRmMGI0NWE0NGRiZGIxNmE)\n\n\nRxMap es una librería de mapas para programación funcional y reactiva usando observables([RxJs](https://github.com/ReactiveX/rxjs)) Y que permite fácilmente anidar llamadas asyncronas.\n\nRxMap no sustituye al visor sino que añade a los visores actuales una capa adicional para poder mejorar el mantenimiento de tus proyectos. Y añade funcionalidades adicionales para mejorar la performance y la escalabilidad de tu código. \n\nRxMap se basa en dos conceptos acciones y observadores para organizar tu código en pequeños bloques. Y también te permite escribir middlewares para desacoplar mejor tu código.\n\nDe facto incluye observables sobre las acciones y un store obsevable, para poder observar  los cambios sobre datos que guardes.\n\nRxMap añade una capa de abstracción sobre las librerías de mapas, esta diseñada para desacoplarte i evitarte tener que actualizar tu código con cada cambio de librerías o utilizar una mapa diferente según el entorno. Podrás \ncentrarte en desarrollar tus funcionalidades.\n\nRxMap te permite cargar el código en diferido cuando la utilizas para mejorar los tiempos de carga, es recomendable desplegarlo en http2.\n\n## Ventajas\n* Cargar en diferido de las acciones y los observadores (Lazy Loader).\n* Trabajar con observadores. (RxJs).\n* Trabajar de manara asyncrona.\n* Programación funcional.\n* Store Observable.\n* Trabaja con multiples mapas, sin cambiar tu código.\n* Reutilización de código entre diferentes proyectos.\n\n## Instalación\n\n### NPM\n```\nNpm install @rxmap\\rxmap —save\n```\n\n### CDN\n```\n<head>\n<script type=‘application/javascript’ src=‘https://unpkg.com/@rxmap/rxmap@0.1.0’ defer/>\n</head>\n\n```\n\n## Como utilizarla\nLo ideal es tener las acciones y los observadores en librerías externas, lo primero seria registrar estas librerías para poder utilizarlas\n\n```\nimport rxLib from '@rxmap/basiclib';\nregisterLib(...rxLib);\n\n```\n\n Una vez registradas las librerías o las acciones a utilizar. Lo primero es cargar el mapa que se quiera utilizar \nY después ya se pueden invocar las acciones o observadores a utilizar.\n\n```\nimport { RxMap } from ‘@rxmap/rxmap’;\nawait RxMap.load(‘leaflet’);\nRxMap.create(‘mapId’,2.45,41.56,10);\nRxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nO  para versión de CDN.\n\n```\nR.RxMap.load(‘leaflet’);\nR.RxMap.create(‘mapId’,2.45,41.56,10);\nR.RxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nLa primera acción que se tiene que invocar debe devolver el mapa inicial inicializado, normalmente esta acción se llama ‘create’ y debe ser sincrona, es decir no devolver una promesa. Es recomendable no anidar las llamadas a create, sino volver a hacer llamadas sobre RxMap, como se observa en los ejemplos anteriores.\n\n## Documentación\n\nPuedes encontrar más Documentación aquí:\n* [Overview](https://xlab-tech.github.io/RxMap/manual/overview.html)\n* [Instalar](https://xlab-tech.github.io/RxMap/manual/install.html)\n* [Como Utilizar](https://xlab-tech.github.io/RxMap/manual/howItWorks.html)\n\t* [Acciones](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#acciones)\n\t* [Observadores](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#observadores)\n\t* [Librerías](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#librerías)\n\t* [Middlewares](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#middlewares)\n\t* [Observar acciones](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#observar-acciones)\n\t* [Store](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#store-observable)\n* [Como crear](https://xlab-tech.github.io/RxMap/manual/make.html)\n\t* [Acciones](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-acciones)\n\t* [Observadores](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-observadores)\n\t* [Middlewares](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-un-middleware)\n\t* [Librería](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-una-libreria)\n* [Build](https://xlab-tech.github.io/RxMap/manual/build.html)\n\n\n# Examples\n\n# Librerias\nLibrerías para añadir acciones y observadores:\n  * [RxMapBasicLib](https://github.com/xlab-tech/RxMapBasicLib)\n  * ..\n\nPara añadir una nueva librería enviar un mail a rxmap@xlab.tech  o realiza un pullRequest de la documentación con la libreria añadida.\nPara hacer un PullRequest:\n  * Haz un fork del repositorio.\n  * Haz commit y push de los cambios en tu reposition.\n  * Crear un PullRequest .\n\n# Mapas Soportados\n * [google](https://cloud.google.com/maps-platform/)\n * [leaflet](https://leafletjs.com/)\n * [mapbox](https://www.mapbox.com/)\n * [ol](https://openlayers.org/)\n * [esri](https://developers.arcgis.com/javascript/)\n * [carto](https://carto.com/)\n",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": true,
    "content": "# [<img src=\"https://avatars0.githubusercontent.com/u/37194013?s=400&u=692377e91a2dab11006abb01d0db33cdb211c9b8&v=4\" alt=\"xlab\"  height=\"24\">](https://xlab.tech) RxMap\n\n[![Build Status](https://travis-ci.org/xlab-tech/RxMap.svg?branch=master)](https://travis-ci.org/xlab-tech/RxMap)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/fe06b87e1b6b4e279c8507c82d8ba73f)](https://www.codacy.com/project/xlab/RxMap/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=xlab-tech/RxMap&amp;utm_campaign=Badge_Grade_Dashboard)\n[![Coverage Status](https://coveralls.io/repos/github/xlab-tech/RxMap/badge.svg?branch=master)](https://coveralls.io/github/xlab-tech/RxMap?branch=master)\n[![dependencies Status](https://david-dm.org/xlab-tech/RxMap/status.svg)](https://david-dm.org/xlab-tech/RxMap)\n[![devDependencies Status](https://david-dm.org/xlab-tech/RxMap/dev-status.svg)](https://david-dm.org/xlab-tech/RxMap?type=dev)\n[![Code style: airbnb](https://img.shields.io/badge/code%20style-airbnb-blue.svg?style=flat-square)](https://github.com/airbnb/javascript)\n[![AUR](https://img.shields.io/aur/license/yaourt.svg)](https://github.com/xlab-tech/RxMap/blob/master/LICENSE)\n\n[<img src=\"https://avatars0.githubusercontent.com/u/37194013?s=400&u=692377e91a2dab11006abb01d0db33cdb211c9b8&v=4\" alt=\"xlab\"  height=\"64\">](https://xlab.tech)\n&nbsp;&nbsp;\n[<img src=\"https://cdn.icon-icons.com/icons2/923/PNG/512/slack_alt_icon-icons.com_72013.png\" alt=\"Join Slack\"  height=\"64\">](https://join.slack.com/t/xlab-tech/shared_invite/enQtNDIwMzg1MTA2NjA5LTljZWNkZjliNjhhNTc4MTQ0OWVkNTAwMTE0NmU2YTllYTE5YzllZjM2NTQ1ZmNkMDRmMGI0NWE0NGRiZGIxNmE)\n\n\nRxMap es una librería de mapas para programación funcional y reactiva usando observables([RxJs](https://github.com/ReactiveX/rxjs)) Y que permite fácilmente anidar llamadas asyncronas.\n\nRxMap no sustituye al visor sino que añade a los visores actuales una capa adicional para poder mejorar el mantenimiento de tus proyectos. Y añade funcionalidades adicionales para mejorar la performance y la escalabilidad de tu código. \n\nRxMap se basa en dos conceptos acciones y observadores para organizar tu código en pequeños bloques. Y también te permite escribir middlewares para desacoplar mejor tu código.\n\nDe facto incluye observables sobre las acciones y un store obsevable, para poder observar  los cambios sobre datos que guardes.\n\nRxMap añade una capa de abstracción sobre las librerías de mapas, esta diseñada para desacoplarte i evitarte tener que actualizar tu código con cada cambio de librerías o utilizar una mapa diferente según el entorno. Podrás \ncentrarte en desarrollar tus funcionalidades.\n\nRxMap te permite cargar el código en diferido cuando la utilizas para mejorar los tiempos de carga, es recomendable desplegarlo en http2.\n\n## Ventajas\n* Cargar en diferido de las acciones y los observadores (Lazy Loader).\n* Trabajar con observadores. (RxJs).\n* Trabajar de manara asyncrona.\n* Programación funcional.\n* Store Observable.\n* Trabaja con multiples mapas, sin cambiar tu código.\n* Reutilización de código entre diferentes proyectos.\n\n## Instalación\n\n### NPM\n```\nNpm install @rxmap\\rxmap —save\n```\n\n### CDN\n```\n<head>\n<script type=‘application/javascript’ src=‘https://unpkg.com/@rxmap/rxmap@0.1.0’ defer/>\n</head>\n\n```\n\n## Como utilizarla\nLo ideal es tener las acciones y los observadores en librerías externas, lo primero seria registrar estas librerías para poder utilizarlas\n\n```\nimport rxLib from '@rxmap/basiclib';\nregisterLib(...rxLib);\n\n```\n\n Una vez registradas las librerías o las acciones a utilizar. Lo primero es cargar el mapa que se quiera utilizar \nY después ya se pueden invocar las acciones o observadores a utilizar.\n\n```\nimport { RxMap } from ‘@rxmap/rxmap’;\nawait RxMap.load(‘leaflet’);\nRxMap.create(‘mapId’,2.45,41.56,10);\nRxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nO  para versión de CDN.\n\n```\nR.RxMap.load(‘leaflet’);\nR.RxMap.create(‘mapId’,2.45,41.56,10);\nR.RxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nLa primera acción que se tiene que invocar debe devolver el mapa inicial inicializado, normalmente esta acción se llama ‘create’ y debe ser sincrona, es decir no devolver una promesa. Es recomendable no anidar las llamadas a create, sino volver a hacer llamadas sobre RxMap, como se observa en los ejemplos anteriores.\n\n## Documentación\n\nPuedes encontrar más Documentación aquí:\n* [Overview](https://xlab-tech.github.io/RxMap/manual/overview.html)\n* [Instalar](https://xlab-tech.github.io/RxMap/manual/install.html)\n* [Como Utilizar](https://xlab-tech.github.io/RxMap/manual/howItWorks.html)\n\t* [Acciones](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#acciones)\n\t* [Observadores](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#observadores)\n\t* [Librerías](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#librerías)\n\t* [Middlewares](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#middlewares)\n\t* [Observar acciones](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#observar-acciones)\n\t* [Store](https://xlab-tech.github.io/RxMap/manual/howItWorks.html#store-observable)\n* [Como crear](https://xlab-tech.github.io/RxMap/manual/make.html)\n\t* [Acciones](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-acciones)\n\t* [Observadores](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-observadores)\n\t* [Middlewares](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-un-middleware)\n\t* [Librería](https://xlab-tech.github.io/RxMap/manual/make.html#como-crear-una-libreria)\n* [Build](https://xlab-tech.github.io/RxMap/manual/build.html)\n\n\n# Examples\n\n# Librerias\nLibrerías para añadir acciones y observadores:\n  * [RxMapBasicLib](https://github.com/xlab-tech/RxMapBasicLib)\n  * ..\n\nPara añadir una nueva librería enviar un mail a rxmap@xlab.tech  o realiza un pullRequest de la documentación con la libreria añadida.\nPara hacer un PullRequest:\n  * Haz un fork del repositorio.\n  * Haz commit y push de los cambios en tu reposition.\n  * Crear un PullRequest .\n\n# Mapas Soportados\n * [google](https://cloud.google.com/maps-platform/)\n * [leaflet](https://leafletjs.com/)\n * [mapbox](https://www.mapbox.com/)\n * [ol](https://openlayers.org/)\n * [esri](https://developers.arcgis.com/javascript/)\n * [carto](https://carto.com/)\n",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/asset",
    "name": "./manual/asset",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/overview.md",
    "name": "./manual/overview.md",
    "content": "# Overview\nRxMap es una librería de mapas para programación funcional y reactiva usando observables([RxJs](https://github.com/ReactiveX/rxjs)) Y que permite fácilmente anidar llamadas asyncronas.\n\nRxMap se basa en dos conceptos acciones y observadores para organizar tu código en pequeños bloques. Y también te permite escribir middlewares para desacoplar mejor tu código.\n\nDe facto incluye observables sobre las acciones y un store obsevable, para poder observar  los cambios sobre datos que guardes.\n\nRxMap añade una capa de abstracción sobre las librerías de mapas, esta diseñada para desacoplarte i evitarte tener que actualizar tu código con cada cambio de librerías o utilizar una mapa diferente según el entorno. Podrás \ncentrarte en desarrollar tus funcionalidades.\n\nRxMap te permite cargar el código en diferido cuando la utilizas para mejorar los tiempos de carga, es recomendable desplegarlo en http2.\n\n## Ventajas\n* Cargar en diferido de las acciones y los observadores (Lazy Loader).\n* Trabajar con observadores. (RxJs).\n* Trabajar de manara asyncrona.\n* Programación funcional.\n* Store Observable.\n* Trabaja con multiples mapas, sin cambiar tu código.\n* Reutilización de código entre diferentes proyectos.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/install.md",
    "name": "./manual/install.md",
    "content": "# Instalación\n\n## NPM\n```\nNpm install @rxmap\\rxmap —save\n```\n\n## CDN\n```\n<head>\n<script type=‘application/javascript’ src=‘https://unpkg.com/@rxmap/rxmap@0.0.2’ defer/>\n</head>\n\n```\n\n\n# Como utilizarla\n \n```\nimport { RxMap } from ‘@rxmap/rxmap’;\nawait RxMap.load(‘leaflet’);\nRxMap.create(‘mapId’,2.45,41.56,10);\nRxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nO  para versión de CDN.\n\n```\nR.RxMap.load(‘leaflet’);\nR.RxMap.create(‘mapId’,2.45,41.56,10);\nR.RxMap.marker(2.45,41.56).popup(‘hello’);\n\n```\n\nLa primera acción que se tiene que invocar debe devolver el mapa inicial inicializado, normalmente esta acción se llama ‘create’ y debe ser sincrona, es decir no devolver una promesa. Es recomendable no anidar las llamadas a create, sino volver a hacer llamadas sobre RxMap, como se observa en los ejemplos anteriores.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/howItWorks.md",
    "name": "./manual/howItWorks.md",
    "content": "\n# Como funciona\n## Cargar\nPara empezar a utilizar la librería lo primero es cargar el mapa que se quiere utilizar para ello se puede hacer de dos maneras. Directamente con el método load o con loadConfig los dos son métodos asíncronos que puedes usar con await o con formato promesa.\n\n\n```\nimport { RxMap } from '@rxmap/rxmap';\nconst config = {};\nawait RxMap.load(‘leaflet’,config);\n```\n\n```\nimport { RxMap } from '@rxmap/rxmap';\nconst config = {};\nRxMap.load(‘leaflet’,config).then((map)=>{\n   // execute actions\n});\n\n```\n\nO \n\n```\nimport { RxMapFromConfig } from '@rxmap/rxmap';\n\nconst config = {\n  type: 'leaflet',\n  options: {\n    key: '',\n  },\n  map: {\n    autoCenter: false,\n    center: {\n      lat: 51.505,\n      lng: -0.09,\n    },\n    zoom: 13,\n  },\n};\n\n\nconst map = await RxMapFromConfig(config);\n\n\n```\n\n## Librerías\nPara utilizar las acciones y los observadores tienes que cargar las librerías que quieras de acciones y observadores,  propias o de terceros. Al cargar las librerías ya tienes disponibles todas las acciones que incorporen estas librerías en RxMap o en los observadores, (‘una vez los recuperas desde RxMap’ < `rxMap.observer(from(5))`>). Pero al tener carga dinámica no bajas el código de todas las acciones, reduciendo el tiempo de carga, sino que se cargara el código de cada acción o observador cuando la utilices. ( lazy Loader) \n\nLa función registerLib, espera como parámetros el nombre de la librería, un objeto con los nombre de acciones y con los nombre de los observadores a cargar de esa libreria, y la función para la carga dynamica de las acciones y observadores\n\n```\nimport { registerLib } from '@rxmap/rxmap';\n\nregisterLib(‘test’,{\n\tobservers:[‘test’],\n\tactions:[‘example’]\n},\n(type, mapLib, version, key) => import(/* webpackMode: \"lazy\" */ `./${type}/${mapLib}@${version}/${key}`);\n);\n\n```\n\nIdealmente las librerías incluyen en default un array con los parámetros ya preparados.\n\n```\nimport { registerLib } from '@rxmap/rxmap';\nimport rxLib from '@rxmap/rxmap/lib';\n\nregisterLib(...rxLib);\n```\n\nOtra forma de tener acciones o observadores es registrándolos para poder utilizarlos,pero de esta forma no tendrás la carga dynamica I tendrás que gestionar ,qual cargas según la librería de mapas que estes utilizando. Al contrario las librerías gestionan esto de manera automática. \nConsulta la librería que utilizas para saber que mapas soporta. \n\n## Acciones\nLas acciones son funciones “puras” que realizan acciones sobre el mapa, la idea es que solo realicen una única acción para que sean mucho más fáciles de reaprovechar , probar y debugar. Ponemos \"puras\" entrecomilladas porque realmente la mayoria no pueden ser puras al realizar manipulaciones del Dom inderectamente al crear objetos del mapa.\nLas acciones se pueden invocar sobre RxMap o sobre un observador. Las acciones se pueden anidar entre ellas. Cada invocación de acciones es  asíncrona pero dentro de cada secuencia en síncrona. Cada acción recibe el valor de la acción anterior para poder concatenar acciones.\n\n```\nRxMap.test();\n\nRxMap.test2().test();\n\nRxMap.observer(from(1)).test();\n\n```\n\n## Observadores\nLos observadores son funciones que devuelven un observador ( RxJs )  para por ejemplo , gestionar los eventos del mapa como puede ser el click, o para gestionar datos que se pueden recibir continuamente como la posición GPS, el centro del mapa, etc...\nCon los observadores se pueden utilizar todos los operadores de RxJs para modificar, transformar , etc.. los valores del observador.\n\nTambién se pueden utilizar observadores creados con RxJs para utilizar las acciones de RxMap. \nCuando  se utiliza un observador, se puede pasar como parámetro a la acción una función que transforme los argumentos en un array con los argumentos que espera la acción.\n \n\n```\nRxMap.observer(‘<observer name>’).subscribe((data) => console.log);\n\nRxMap.observer(‘gps’).pipe(take(2)).subscribe(data=>console.log(data));\n\nRxMap.observer(from([{lat:1,lng:2},{lat:2,lng:3}]).marker(data=>([data.lat,data.lng])).subscribe()\n\n\n```\n\n## Middlewares\nRxMap también te permite usar middlewares, para realizar acciones como:\n\t* Logger de las funciones\n\t* Realizar acciones antes o después de la ejecución de las acciones.\n\t* Aplicar transformaciones\n\t* Etc...\n\nUn middleware lo puedes aplicar sobre todas las acciones o sobre una acción en concreto.\nSi al registrar el middleware el primer parámetro es un string, sólo se aplicará a la acción con ese nombre. Si el primer parámetro es el middleware se aplicará a todas las acciones.\n\nSe pueden aplicar todos los middleware que se deseen.\n\n```\n\nregisterMiddleware(LoggerMiddleware);\n\nO\n\nregisterMiddleware('marker', TimerMiddleware);\n\n```\n\n## Observar acciones\nCon RxMap  puedes observar las acciones para poder saber cuando se llama una acción concreta  o un grupo de acciones con una expresión RegEx y realizar otra operación.\n\n```\n\nRxMap.observerAction('marker').subscribe((data) => {\n    console.log(\"Action Subscriber 1 got data >>>>> \", data);\n  });\n\n\nRxMap.observerAction('.').subscribe((data) => {\n    console.log(\"Action Subscriber 2 got data >>>>> \", data);\n  });\n\n```\n\n## Store Observable\nRxMap dispone de un store que  te permite guardar información y observarla para realizar acciones cuando esta información se modifique.\n\n```\nRxMap.observerStore(‘test’).subscribe((data) => {\n    console.log(\"Store Subscriber 1 got data >>>>> \", data);\n  });\n\nRxMap.observerStore(‘.’).subscribe((data) => {\n    console.log(\"Store Subscriber 2 got data >>>>> \", data);\n  });\n\nRxMap.store.test = ‘example’;\n\nRxMap.store.example = 5;\n\nconst t = RxMap.store.test;\n\n\n```\n\n\nCon estas opciones te permite generar un código mucho más desacoplado de la librería de mapas que quieras utilizar y de esas forma tu código tendrá una vida mucho más larga, pudiendo actualizar cada versión de la librería o cambiando de ella con un esfuerzo mucho menor.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/make.md",
    "name": "./manual/make.md",
    "content": "\n# Creación\n\n## Como crear acciones\nUna acción es una función que recibe el contexto y devuelve una funcion con 0 o n parámetros que es la que ejecutara los cambios sobre el mapa y devuelve el resultado o una promesa, puede ser una función async. Los objetivos de las acciones son interaccionar con el mapa.\nEs recomendable que sólo utilicen un método o propiedad  sobre el mapa para que sea más fácil el desacoplarse.\nSe pueden crear acciones que llamen a otras acciones.\n\nLas acciones deben tener el mínimo posible de dependencias.\nEs recomendable que cada acción se ubicaque en un fichero.\nLas acciones se tienen que exportar como default  y se tiene que exportar la propiedad “name” con el nombre de la acción. Este nombre será el nombre con en el que se registre y se utilizará para invocarla desde RxMap o desde los observadores.\n\nA todas las acciones se les inyecta como primer parámetro el contexto que es un objeto que incluye:\n\t*  RxMap\n\t* La librería Nativa del Mapa\n\t* El valor de la anterior acción\n\t* El store\n\nUn ejemplo de acción sería.\n```\n const setCenter = context => (paramA, paramB) => {\n       const map = context.source.getMap();\n\t     const oldCenter = map.getCenter();\n\t\t map.setCenter(paramA,paramB);\n\t\t return map;\n};\n\nexport default setCenter;\n\n```\n\nPara poder utilizar esta acción hay dos formas. La puedes registrar manualmente o tenerla en una libreria y registrar la libreria.\n\nPara registrar manualmente una acción se tendría que hacer lo siguiente.\n\n```\nimport { registerAction, RxMap } from ‘@rxmap/rxmap’;\nimport { name }, action from ‘./actionExample’;\n\nregisterAction(name,action);\n\nRxMap.load(‘leaflet’);\nRxMap.create(‘mapId’,0,0,8);\n// aquí ya podríamos utilizar la acción \nRxMap.setCenter(2.35,42.112);\n\n```\n\nSi registramos las acciones no estaremos utilizando la capacidad de cargar el código de manera dynamica. Sino que se incluirán en el bundle principal de la aplicación.\n\n## Como crear observadores\nUn observador es una función que recibe el contexto y devuelve una funciona que puede o no recibir parámetros y que devuelve siempre un observador [RxJS]( \thttps://rxjs-dev.firebaseapp.com)\n\nLa idea de los observadores es reemplazar los eventos para poder tener más control sobre las cosas que pasan sobre el mapa. Y poder encadenar de manera mucho más simple acciones a partir de cosas que pasen.\nCon los observadores se pueden utilizar todos los transformadores y operadores de RxJS.\n\nLos observadores deben tener el mínimo posible de dependencias.\nEs recomendable que cada observador se ubicaque en un fichero.\nLos observadores se tienen que exportar como default  y se tiene que exportar la propiedad “name” con el nombre del observador. Este nombre será el nombre con en el que se registre y será el nombre con el que se recuperar el observador.\n\nA todos los observadores se les llama primero con el contexto que incluye:\n\n\t*  RxMap\n\t* La librería Nativa del Mapa\n\t* El valor de la anterior acción\n\t* El store\n\nUn ejemplo de observador podría ser:\n\n```\nimport { fromEventPattern } from 'rxjs/internal/observable/fromEventPattern';\nimport { map } from 'rxjs/internal/operators/map';\n\nconst event = context => () => {\n  const googleMaps = context.library.maps;\n  const map_ = context.source.getMap();\n\n  const addClickHandler = handler => map_.addListener('center_changed', handler);\n  const removeClickHandler = (handler, listener) => googleMaps.event.removeListener(listener);\n\n\n  return fromEventPattern(\n    addClickHandler,\n    removeClickHandler,\n  ).pipe(map(() => {\n    const center = map_.getCenter();\n    return { lat: center.lat(), lng: center.lng() };\n  }));\n};\n\nexport default event;\n/**\n * @private\n*/\nexport const name = 'center';\n\n```\n\nPara poder utilizar este observador  hay dos formas. La puedes registrar manualmente o tenerlo en una libreria y registrar la libreria.\n\nPara registrar manualmente el observador se tendría que hacer lo siguiente.\n\n```\nimport { registerObserver, RxMap } from ‘@rxmap/rxmap’;\nimport { name }, observer from ‘./observerExample’;\n\nregisterObserver(name,observer);\n\nRxMap.load(‘leaflet’);\nRxMap.create(‘mapId’,0,0,8);\n// aquí ya podríamos utilizar la acción \nRxMap.observer(‘center’).subscribe((data)=>{\n   console.log(data);\n});\n\n```\n\nSi registramos los observadores manualmente  no estaremos utilizando la capacidad de cargar el código de manera dynamica. Sino que se incluirán en el bundle principal de la aplicación.\n\n## Como crear un middleware\nLos middleware son funciones que devuelve una función, El middleware recibe como parámetro la siguiente acción a ejecutar y la función que devuelve debe ser asíncrona y recibe como parámetros el CommandBus que esta realizando la ejecución y los argumentos de la función en un array. La función debe devolver el resultado de la ejecución de la acción.\n\nDesde el CommandBus se puede recuperar el contexto con getContext() y el nombre de la función que esta ejecutando con getActionName().\n\nEn el middleware puedes hacer aciones antes de llamar a la acción a ejecutar. Y puedes modificar o hacer acciones después de ejecutar la acción.\n\nUn ejemplo de middleware podría ser el logger de las acciones:\n\n```\n\nexport const LoggerMiddleware = next => async (CommandBus, args) => {\n  const actionName = commandBus.getActionName();\n  const now = new Date().getTime();\n  const name = `Command ${actionName} [${now}]: `;\n  console.log(`Pre ${name}`, args);\n  const res = await next(Map, args);\n  console.log(`Post ${name}`, res);\n  return res;\n};\n```\n\nLos middleware se tienen no se cargan dinámicamente se tienen que importar específicamente.\n\n## Como crear una libreria\n\nLas librerías se pueden crear dentro de tu proyecto o como un proyecto independiente para poder reaprovecharlas en otros proyectos.\n\nLas librerías son un conjunto de acciones y observadores que ofrecen la misma funcionalidad sobre uno o diferentes mapas.\n\nIdealmente tienen la siguiente estructura\n\n<libName>_<type>_<mapType>:<version>/<actionName>\n\nExample: lib_actions_google@latest_setCenter.js o lib_observer_google@latest_center.js\n\nEn las librerías cada acción o observador debe estar en un único fichero y cada fichero debe exponer en default la acción y debe exponer la propiedad name con el nombre de la acción\n\nLas librerías tienen que tener un fichero index.js que incluya  lo siguiente:\n\n\t* la función de carga dynamica de sus acciones y observadores. Esta función recibirá como parámetros el tipo [observer|action] , el nombre de la libreria de mapas, la versión ( latest por defecto) y la clave o nombre de la acción o el observador. Se recomienda que se llame  ‘func’.\n\t\n```\nconst func = (type, mapLib, version, key) => import(/* webpackMode: \"lazy\" */ `./${type}/${mapLib}@${version}/${key}`);\n\n```\n\n\t* Array con el nombre de los observadores. Se recomienda que se llame  ‘observers’\n\t* Array con el nombre de las acciones. Se recomienda que se llame  ‘actions’\n\t* El nombre de la librería. Se recomienda que se llame  ‘name’.\n\n\nY es recomendable devolver en el parámetro por defecto un array con los datos en el orden que pide la función de registrar libreria.\n\nAdjunto un ejemplo del fichero index.js\n\n```\n\nexport const name = 'rxmap';\nexport const actions = ['addData', 'create', 'marker', 'point', 'popup', 'setCenter'];\nexport const observers = ['gps', 'center', 'click'];\nexport const func = (type, mapLib, version, key) => import(/* webpackMode: \"lazy\" */ `./${type}/${mapLib}@${version}/${key}`);\n\nexport default [\n  name,\n  {\n    observers,\n    actions,\n  },\n  func,\n];\n\n```\n\n\nCuando se compila las librerías tienen que inlcuir la version con Módulos ( Es2015 ) y la version UMD, en la versión UMD que suele ser la que se pública en servicios como unpkg la ruta de la carga de librerías dinámicas deber ser con la url completa no relativa.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/build.md",
    "name": "./manual/build.md",
    "content": "# Build\nPara poder realizar la construcción del bundle de manera correcta, se necesita utilizar webPack por desgracia actualmente ni Rollup ni Parcel funciona correctamente con los imports dinámicos, esperamos que esto cambien en breve.\n\nPara realizar el build con Angular, si queremos disponer de la carga dinamica, hay que modificar los siguientes parámetros.\n\n\t* En el fichero tsconfig.app.json hay que poner el valor ‘module’ a ‘esnext’\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/examples.md",
    "name": "./manual/examples.md",
    "content": "\n# Ejemplos\nLista de ejemplos disponibles en github.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/manual/libs.md",
    "name": "./manual/libs.md",
    "content": "\n\n# Librerias\nLibrerías para añadir acciones y observadores:\n  * [RxMapBasicLib](https://github.com/xlab-tech/RxMapBasicLib)\n\t* .. \n\nPara añadir una nueva librería enviar un mail a rxmap@xlab.tech  o realiza un pullRequest de la documentación con la libreria añadida.\nPara hacer un PullRequest:\n  * Haz un fork del repositorio.\n\t* Haz commit y push de los cambios en tu reposition.\n\t* Crear un PullRequest . ",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 130,
    "kind": "testFile",
    "name": "test/unit/core/Observable.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { of } from 'rxjs/internal/observable/of';\nimport { registerObserver } from '../../../src/core/registerObserver';\nimport rxMap from '../../../src/map/RxMap';\nimport CommandBus from '../../../src/core/CommandBus';\n\ndescribe('Observable', () => {\n  const actionBus = new CommandBus();\n  actionBus._source = { getContext: () => ({ test: '3' }) };\n  rxMap._commandBus = actionBus;\n  it('observer', () => {\n    registerObserver('test', () => of(2));\n    return new Promise((resolve, reject) => {\n      const $strem = rxMap.observer(of(5));\n      $strem.observer('test').subscribe((res) => {\n        expect(res).to.eq(2);\n      }, reject, resolve);\n    });\n  });\n\n  it('observer params', () => {\n    registerObserver('test', (context, param) => of(param));\n    return new Promise((resolve, reject) => {\n      const $strem = rxMap.observer(of(5));\n      $strem.observer('test', 3).subscribe((res) => {\n        expect(res).to.eq(3);\n      }, reject, resolve);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/Observable.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/core/Observable.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0",
    "access": null,
    "description": "Observable",
    "lineNumber": 8
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/unit/core/Observable.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0.it1",
    "access": null,
    "description": "observer",
    "lineNumber": 12
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/core/Observable.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/Observable.spec.js~describe0.it2",
    "access": null,
    "description": "observer params",
    "lineNumber": 22
  },
  {
    "__docId__": 134,
    "kind": "testFile",
    "name": "test/unit/core/asyncCommandBus.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { from } from 'rxjs/internal/observable/from';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\n\ndescribe('AsyncCommandBus', () => {\n  it('subscribe', () => {\n    const async = new AsyncCommandBus();\n    let pepe;\n    async.subscribe(() => {\n      pepe = 'aa';\n    });\n    async._complete();\n    expect(pepe).to.eq('aa');\n  });\n  it('action Bus getValue', (done) => {\n    const actionBus = new AsyncCommandBus();\n    actionBus._executingAction = true;\n    actionBus._lastAction = { value: 'rrr' };\n    actionBus.getValue().subscribe((res) => {\n      expect(res.value).to.have.eq('rrr');\n      done();\n    });\n    actionBus._complete();\n  });\n  it('observer data ', () => {\n    const async = new AsyncCommandBus();\n    async._executingAction = true;\n    async._source = { observer: () => from([1]) };\n    const $stream = async.observer([5], 4);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer data args', () => {\n    const async = new AsyncCommandBus();\n    async._source = { observer: () => from([1]) };\n    const $stream = async.observer([5], 4);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer executing', (done) => {\n    const async = new AsyncCommandBus();\n    async._source = { observer: () => from([1]) };\n    async._executingAction = 'test';\n    const $stream = async.observer([5]);\n    async._complete();\n    expect($stream).is.a.instanceOf(Observable);\n    $stream.subscribe((res) => {\n      expect(res).to.eq(1);\n      async._executingAction = false;\n      done();\n    });\n  });\n  it('save data', () => {\n    const async = new AsyncCommandBus();\n    async._saveExecution('test', 5);\n    expect(async._lastAction.value).to.eq(5);\n  });\n  it('save data', () => {\n    const async = new AsyncCommandBus();\n    async.setSource(5);\n    const temp = async.getSource();\n    expect(temp).to.eq(5);\n  });\n  it('action Bus getValue', (done) => {\n    const async = new AsyncCommandBus();\n    async._executingAction = false;\n    async._lastAction = { value: 'rrr' };\n    async.getValue().subscribe((res) => {\n      expect(res.value).to.have.eq('rrr');\n      done();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/asyncCommandBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "describe3",
    "testId": 3,
    "memberof": "test/unit/core/asyncCommandBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "access": null,
    "description": "AsyncCommandBus",
    "lineNumber": 7
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it4",
    "access": null,
    "description": "subscribe",
    "lineNumber": 8
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it5",
    "access": null,
    "description": "action Bus getValue",
    "lineNumber": 17
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it6",
    "access": null,
    "description": "observer data ",
    "lineNumber": 27
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it7",
    "access": null,
    "description": "observer data args",
    "lineNumber": 34
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it8",
    "access": null,
    "description": "observer executing",
    "lineNumber": 40
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it9",
    "access": null,
    "description": "save data",
    "lineNumber": 53
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it10",
    "access": null,
    "description": "save data",
    "lineNumber": 58
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/unit/core/asyncCommandBus.spec.js~describe3",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/asyncCommandBus.spec.js~describe3.it11",
    "access": null,
    "description": "action Bus getValue",
    "lineNumber": 64
  },
  {
    "__docId__": 144,
    "kind": "testFile",
    "name": "test/unit/core/commandBus.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { from } from 'rxjs/internal/observable/from';\nimport { Subject } from 'rxjs/internal/Subject';\nimport CommandBus from '../../../src/core/CommandBus';\nimport rxMap from '../../../src/map/RxMap';\nimport { registerAction } from '../../../src/core/registerAction';\nimport setProxy from '../../../src/core/proxyAction';\n\ndescribe('CommandBus', () => {\n  it('create new ActionBus', () => {\n    const actionBus = new CommandBus();\n    expect(actionBus).to.be.an.instanceof(CommandBus);\n    const ret = actionBus._lastAction;\n    expect(ret).to.deep.equal({\n      value: null,\n      name: null,\n    });\n  });\n\n  it('action Bus getSource', () => {\n    const actionBus = new CommandBus();\n    actionBus._source = 't';\n    const temp = actionBus.getSource();\n    expect(temp).to.be.eq('t');\n  });\n\n  it('action Bus getActionName', () => {\n    const actionBus = new CommandBus();\n    actionBus._executingAction = 'ppp';\n    const temp = actionBus.getActionName();\n    expect(temp).to.be.eq('ppp');\n  });\n\n  it('action Bus getValue', (done) => {\n    const actionBus = new CommandBus();\n    actionBus._lastAction = { value: 'rrr' };\n    actionBus.getValue().subscribe((res) => {\n      expect(res.value).to.have.eq('rrr');\n      done();\n    });\n  });\n\n  it('action Bus getContext', () => {\n    const actionBus = new CommandBus();\n    actionBus._source = { getContext: () => ({ test: '3' }) };\n    const temp = actionBus.getContext();\n    // eslint-disable-next-line no-unused-expressions\n    expect(temp).to.have.property('lastExecution');\n    expect(temp).to.have.property('source');\n    expect(temp).to.have.property('test');\n  });\n  it('executing', (done) => {\n    const actionBus = new CommandBus();\n    actionBus._source = { getContext: () => ({ test: '3' }), observer: () => from([3]) };\n    actionBus._actionsSubject = { next: () => '' };\n    const $res = actionBus._execute('test', () => 1, []);\n    $res.subscribe((res) => {\n      expect(res.value).to.have.eq(3);\n      done();\n    });\n  });\n  it('observer data ', () => {\n    const $stream = rxMap.observer([5]);\n    expect($stream).is.a.instanceOf(Observable);\n  });\n  it('observer error ', () => {\n    try {\n      rxMap.observer('kk');\n    } catch (err) {\n      expect(err).is.a.instanceOf(Error);\n    }\n  });\n  it(' action Subject', () => {\n    const _subject = rxMap._actionsSubject;\n    expect(_subject).to.have.instanceof(Subject);\n  });\n  it('observer action ', () => {\n    registerAction('test22', (context, a) => `r${a}`);\n    // rxMap._actionsSubject = new Subject();\n    rxMap.observerAction('test22').subscribe((res) => {\n      expect(res.value).to.have.eq('ra');\n    });\n    rxMap.test22('a');\n  });\n\n  it('observer action ', () => {\n    registerAction('test32', (context, a) => `r${a}`);\n    registerAction('test33', (context, a) => `r${a}`);\n    rxMap.test32('a').test33();\n  });\n  it('action Subject', () => {\n    const obj = setProxy({});\n    const _subject = obj._actionsSubject;\n    expect(_subject).to.have.instanceof(Subject);\n    const _subject2 = obj._actionsSubject;\n    expect(_subject2).to.have.instanceof(Subject);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/commandBus.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/unit/core/commandBus.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12",
    "access": null,
    "description": "CommandBus",
    "lineNumber": 11
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it13",
    "access": null,
    "description": "create new ActionBus",
    "lineNumber": 12
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it14",
    "access": null,
    "description": "action Bus getSource",
    "lineNumber": 22
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it15",
    "access": null,
    "description": "action Bus getActionName",
    "lineNumber": 29
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it16",
    "access": null,
    "description": "action Bus getValue",
    "lineNumber": 36
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it17",
    "access": null,
    "description": "action Bus getContext",
    "lineNumber": 45
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it18",
    "access": null,
    "description": "executing",
    "lineNumber": 54
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it19",
    "access": null,
    "description": "observer data ",
    "lineNumber": 64
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it20",
    "access": null,
    "description": "observer error ",
    "lineNumber": 68
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it21",
    "access": null,
    "description": " action Subject",
    "lineNumber": 75
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it22",
    "access": null,
    "description": "observer action ",
    "lineNumber": 79
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it23",
    "access": null,
    "description": "observer action ",
    "lineNumber": 88
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/unit/core/commandBus.spec.js~describe12",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/commandBus.spec.js~describe12.it24",
    "access": null,
    "description": "action Subject",
    "lineNumber": 93
  },
  {
    "__docId__": 158,
    "kind": "testFile",
    "name": "test/unit/core/importLazyLoad.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport {\n  loadLib,\n  addImportFunction,\n  loadCSS,\n} from '../../../src/core/importLazyLoad';\nimport { registerAction } from '../../../src/core/registerAction';\n\ndescribe('Import Lazy Load', function () {\n  this.timeout(2000);\n  it('load lib action define', async () => {\n    addImportFunction('test', () => Promise.resolve({ default: 'ttt' }));\n    registerAction('test', () => 'aa');\n    const res = await loadLib('test', 'leaflet', 'actions', { key: 'test', lib: 'test' });\n    expect(res).to.eq('ttt');\n  });\n  it('load lib action rxmap', async () => {\n    addImportFunction('rxmap', () => Promise.resolve({ default: () => 'aaa' }));\n    const res = await loadLib('rxmap', 'leaflet', 'actions', 'create', 'latest');\n    expect(res).to.be.a('function');\n  });\n  it('load lib action http', () => {\n    const res = loadLib('rxmap', 'leaflet', 'actions', { key: 'test', path: 'test' });\n    expect(res).to.be.a('promise');\n  });\n  it('load Css', async () => {\n    document.styleSheets[-1] = { href: 'https://unpkg.com/leaflet@1.3.3/dist/leaflet.css' };\n    const res = await loadCSS('https://unpkg.com/leaflet@1.3.3/dist/leaflet.css');\n    expect(res).to.be.a('HTMLLinkElement');\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/importLazyLoad.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/unit/core/importLazyLoad.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe25",
    "access": null,
    "description": "Import Lazy Load",
    "lineNumber": 10
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe25.it26",
    "access": null,
    "description": "load lib action define",
    "lineNumber": 12
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe25.it27",
    "access": null,
    "description": "load lib action rxmap",
    "lineNumber": 18
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe25.it28",
    "access": null,
    "description": "load lib action http",
    "lineNumber": 23
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/unit/core/importLazyLoad.spec.js~describe25",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importLazyLoad.spec.js~describe25.it29",
    "access": null,
    "description": "load Css",
    "lineNumber": 27
  },
  {
    "__docId__": 164,
    "kind": "testFile",
    "name": "test/unit/core/importMapLibrary.spec.js",
    "content": "/* global describe,it,before,after */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport * as GoogleMapsLoader from 'google-maps';\nimport importMapLibrary from '../../../src/map/importMapLibrary';\nimport * as loader from '../../../src/core/importLazyLoad';\n\ndescribe('Import Map Library', function () {\n  before(() => {\n    sinon.stub(GoogleMapsLoader, 'load').callsFake(func => func({ maps: 5 }));\n    sinon.stub(loader, 'loadCSS').callsFake(() => Promise.resolve());\n  });\n  after(() => {\n    GoogleMapsLoader.load.restore();\n    loader.loadCSS.restore();\n    // stub.loadGoogle.restore();\n    // stub.default.restore();\n  });\n  this.timeout(2000);\n  it('Import Google', async () => {\n    const lib = importMapLibrary('google', { key: 'ddd' });\n    expect(lib).to.be.a('promise');\n  });\n  it('Import Leaflet', async () => {\n    const lib = await importMapLibrary('leaflet');\n    expect(lib).to.be.a('object');\n  });\n  it('Import Mapbox', async () => {\n    window.URL.createObjectURL = () => { };\n    const lib = await importMapLibrary('mapbox');\n    expect(lib).to.be.a('object');\n  });\n  it('Import Error', (done) => {\n    importMapLibrary('aa').catch(() => done());\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/importMapLibrary.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/unit/core/importMapLibrary.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe30",
    "access": null,
    "description": "Import Map Library",
    "lineNumber": 8
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe30.it31",
    "access": null,
    "description": "Import Google",
    "lineNumber": 20
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe30.it32",
    "access": null,
    "description": "Import Leaflet",
    "lineNumber": 24
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe30.it33",
    "access": null,
    "description": "Import Mapbox",
    "lineNumber": 28
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/unit/core/importMapLibrary.spec.js~describe30",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/importMapLibrary.spec.js~describe30.it34",
    "access": null,
    "description": "Import Error",
    "lineNumber": 33
  },
  {
    "__docId__": 170,
    "kind": "testFile",
    "name": "test/unit/core/middleware.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport CommandBus from '../../../src/core/CommandBus';\nimport { applyMiddlewares, registerMiddleware, subscribe } from '../../../src/core/middlewares';\n\ndescribe('Middlewares', () => {\n  it('apply middleware No paramas', () => {\n    registerMiddleware();\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const actionBus = new CommandBus();\n    actionBus._source = { getContext: () => ({ test: '3' }) };\n    expect(newFunc(actionBus, [])).to.eq(func(actionBus, []));\n  });\n  it('apply middleware one', () => {\n    const f = next => (Map, args) => {\n      next(Map, args);\n      return 'bb';\n    };\n    registerMiddleware('testRegister', f);\n    const actionBus = new CommandBus();\n    actionBus._source = { getContext: () => ({ test: '3' }) };\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const newFunc2 = applyMiddlewares('testRegister', func);\n    expect(newFunc(actionBus, [])).to.eq('asfas');\n    expect(newFunc2(actionBus, [])).to.eq('bb');\n  });\n  it('apply middleware all', () => {\n    const f = next => (Map, args) => {\n      next(Map, args);\n      return 'aa';\n    };\n    registerMiddleware(f);\n    const func = () => 'asfas';\n    const newFunc = applyMiddlewares('test', func);\n    const actionBus = new CommandBus();\n    actionBus._source = { getContext: () => ({ test: '3' }) };\n    expect(newFunc(actionBus, [])).to.eq('aa');\n  });\n  it('subscribe', () => new Promise((resolve) => {\n    const f = next => (Map, args) => next(Map, args);\n    subscribe(() => resolve());\n    registerMiddleware('f', f);\n  }));\n  it('subscribe all', () => new Promise((resolve) => {\n    const f = next => (Map, args) => next(Map, args);\n    subscribe(() => resolve());\n    registerMiddleware(f);\n  }));\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/middleware.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/unit/core/middleware.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35",
    "access": null,
    "description": "Middlewares",
    "lineNumber": 6
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/core/middleware.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35.it36",
    "access": null,
    "description": "apply middleware No paramas",
    "lineNumber": 7
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/core/middleware.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35.it37",
    "access": null,
    "description": "apply middleware one",
    "lineNumber": 15
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/unit/core/middleware.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35.it38",
    "access": null,
    "description": "apply middleware all",
    "lineNumber": 29
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/unit/core/middleware.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35.it39",
    "access": null,
    "description": "subscribe",
    "lineNumber": 41
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/unit/core/middleware.spec.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/middleware.spec.js~describe35.it40",
    "access": null,
    "description": "subscribe all",
    "lineNumber": 46
  },
  {
    "__docId__": 177,
    "kind": "testFile",
    "name": "test/unit/core/observableStore.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport observableStore from '../../../src/core/observableStore';\n\ndescribe('Register ObservableStore', () => {\n  it('add Observable function', (done) => {\n    const store = observableStore();\n    try {\n      store.observer = 5;\n    } catch (err) {\n      expect(err).to.have.instanceof(Error);\n      done();\n    }\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/observableStore.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "describe41",
    "testId": 41,
    "memberof": "test/unit/core/observableStore.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/observableStore.spec.js~describe41",
    "access": null,
    "description": "Register ObservableStore",
    "lineNumber": 5
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/core/observableStore.spec.js~describe41",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/observableStore.spec.js~describe41.it42",
    "access": null,
    "description": "add Observable function",
    "lineNumber": 6
  },
  {
    "__docId__": 180,
    "kind": "testFile",
    "name": "test/unit/core/proxyObservable.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { from } from 'rxjs/internal/observable/from';\nimport { Subject } from 'rxjs/internal/Subject';\nimport CommandBus from '../../../src/core/CommandBus';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\nimport { observerFrom } from '../../../src/core/proxyObservable';\nimport { registerAction } from '../../../src/core/registerAction';\nimport { registerObserver } from '../../../src/core/registerObserver';\nimport rxMap from '../../../src/map/RxMap';\n\ndescribe('proxy Observable', () => {\n  const commandBus = new CommandBus();\n  commandBus._actionsSubject = new Subject();\n  commandBus._source = rxMap;\n\n  it('add Observable function', () => {\n    const $stream = from([1]);\n    const $$stream = observerFrom(commandBus)($stream);\n    const aux = $$stream.getCommandBus();\n    expect(aux).to.have.instanceof(AsyncCommandBus);\n  });\n  it('observer execute action', () => {\n    registerAction('test', () => 'r');\n    registerObserver('test', () => from([2]));\n    const $$stream = observerFrom(commandBus)('test');\n    $$stream.test().subscribe((res) => {\n      expect(res.value).to.have.eq('r');\n    });\n  });\n  it('observer execute action args', () => {\n    registerAction('test', (context, a) => `r${a}`);\n    registerObserver('test', () => from([2]));\n    const $$stream = observerFrom(commandBus)('test');\n    $$stream.test('bb').subscribe((res) => {\n      expect(res.value).to.have.eq('rbb');\n    });\n  });\n  it('observer execute action args function', () => {\n    registerAction('test', (context, a) => `r${a}`);\n    registerObserver('test', () => from([2]));\n    const $$stream = observerFrom(commandBus)('test');\n    $$stream.test(data => data).subscribe((res) => {\n      expect(res.value).to.have.eq('r2');\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/proxyObservable.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "describe43",
    "testId": 43,
    "memberof": "test/unit/core/proxyObservable.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/proxyObservable.spec.js~describe43",
    "access": null,
    "description": "proxy Observable",
    "lineNumber": 12
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/unit/core/proxyObservable.spec.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/proxyObservable.spec.js~describe43.it44",
    "access": null,
    "description": "add Observable function",
    "lineNumber": 17
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/unit/core/proxyObservable.spec.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/proxyObservable.spec.js~describe43.it45",
    "access": null,
    "description": "observer execute action",
    "lineNumber": 23
  },
  {
    "__docId__": 184,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/core/proxyObservable.spec.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/proxyObservable.spec.js~describe43.it46",
    "access": null,
    "description": "observer execute action args",
    "lineNumber": 31
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/core/proxyObservable.spec.js~describe43",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/proxyObservable.spec.js~describe43.it47",
    "access": null,
    "description": "observer execute action args function",
    "lineNumber": 39
  },
  {
    "__docId__": 186,
    "kind": "testFile",
    "name": "test/unit/core/registerAction.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport CommandBus from '../../../src/core/CommandBus';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\nimport { registerMiddleware } from '../../../src/core/middlewares';\nimport {\n  registerAction, getAction, getActionInfo, getAllActionsName,\n} from '../../../src/core/registerAction';\nimport rxMap from '../../../src/map/RxMap';\n\ndescribe('Register Action', () => {\n  it('register action', () => {\n    registerAction('testRegister', () => 'testRegister');\n    const f = getAction('testRegister');\n    expect(f).to.be.a('function');\n  });\n  it('test getAllActionsName', () => {\n    registerAction('one', () => 'testRegister');\n    const names = getAllActionsName();\n    expect(names).to.be.a('array').that.includes('one');\n  });\n  it('function return asyncCommandBus', () => {\n    registerAction('testRegister', () => 'testRegister');\n    const res = rxMap.testRegister();\n    expect(res).to.instanceOf(AsyncCommandBus);\n  });\n  it('function create return CommandBus', () => {\n    registerAction('create', () => 'testRegister');\n    const res = rxMap.create('aa', 'bb');\n    expect(res).to.instanceOf(CommandBus);\n  });\n  it('getAction', () => {\n    const f = () => 'test';\n    registerAction('test', f);\n    const ff = getAction('test');\n    expect(ff).to.eq(f);\n  });\n  it('getActionInfo', () => {\n    const f = () => 'test';\n    const options = { test: 'test' };\n    registerAction('test', f, options);\n    const opt = getActionInfo('test');\n    expect(opt).to.eq(options);\n  });\n  it.skip('update all actions ', () => {\n    const f = () => 'test';\n    const func = next => (Map, args) => {\n      next(Map, args);\n      return 'bb';\n    };\n    registerAction('aaa', f);\n    const fBefore = rxMap.aaa;\n    registerMiddleware(func);\n    const fAfter = rxMap.aaa;\n    expect(fBefore).not.eq(fAfter);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/registerAction.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/unit/core/registerAction.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48",
    "access": null,
    "description": "Register Action",
    "lineNumber": 11
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it49",
    "access": null,
    "description": "register action",
    "lineNumber": 12
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it50",
    "access": null,
    "description": "test getAllActionsName",
    "lineNumber": 17
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it51",
    "access": null,
    "description": "function return asyncCommandBus",
    "lineNumber": 22
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it52",
    "access": null,
    "description": "function create return CommandBus",
    "lineNumber": 27
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it53",
    "access": null,
    "description": "getAction",
    "lineNumber": 32
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/unit/core/registerAction.spec.js~describe48",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerAction.spec.js~describe48.it54",
    "access": null,
    "description": "getActionInfo",
    "lineNumber": 38
  },
  {
    "__docId__": 194,
    "kind": "testFile",
    "name": "test/unit/core/registerObserver.spec.js",
    "content": "/* global describe,it */\nimport { expect } from 'chai';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { of } from 'rxjs/internal/observable/of';\nimport rxMap from '../../../src/map/RxMap';\nimport { registerObserver } from '../../../src/core/registerObserver';\n\ndescribe('Register Observer', () => {\n  it('register Observable', () => {\n    expect(rxMap).to.respondTo('observer');\n    registerObserver('test', () => of(1));\n    const res = rxMap.observer('test');\n    const res2 = rxMap.observer(of(1)).observer('test');\n    expect(res).to.instanceOf(Observable);\n    expect(res2).to.instanceOf(Observable);\n  });\n  it('register and execute Observable', (done) => {\n    expect(rxMap).to.respondTo('observer');\n    registerObserver('test', () => of(1));\n    const $res = rxMap.observer('test');\n    $res.subscribe((res) => {\n      expect(res).to.have.eq(1);\n      done();\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/core/registerObserver.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/unit/core/registerObserver.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/core/registerObserver.spec.js~describe55",
    "access": null,
    "description": "Register Observer",
    "lineNumber": 8
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/core/registerObserver.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerObserver.spec.js~describe55.it56",
    "access": null,
    "description": "register Observable",
    "lineNumber": 9
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/unit/core/registerObserver.spec.js~describe55",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/core/registerObserver.spec.js~describe55.it57",
    "access": null,
    "description": "register and execute Observable",
    "lineNumber": 17
  },
  {
    "__docId__": 198,
    "kind": "testFile",
    "name": "test/unit/map/RxMap.spec.js",
    "content": "/* global describe,it,afterEach,beforeEach */\nimport { expect } from 'chai';\nimport sinon from 'sinon';\nimport rxMap, { RxMap } from '../../../src/map/RxMap';\nimport AsyncCommandBus from '../../../src/core/AsyncCommandBus';\nimport { registerAction } from '../../../src/core/registerAction';\nimport * as load from '../../../src/core/importLazyLoad';\nimport * as loadMap from '../../../src/map/importMapLibrary';\n\ndescribe('RxMap', () => {\n  it('create new Map Instances', () => {\n    const m = rxMap.init();\n    expect(Map).to.be.not.equal(m);\n  });\n  it('actions return AsyncCommand', () => {\n    registerAction('test', () => 'test');\n    const ret = rxMap.test();\n    expect(ret).to.be.an.instanceof(AsyncCommandBus);\n  });\n  it('getMap', () => {\n    rxMap._sourceMap = 5;\n    const res = rxMap.getMap();\n    expect(res).to.eq(5);\n  });\n  it('dataType', () => {\n    rxMap.setDataType('test', 'line', { a: 'aa' });\n    expect(rxMap.getDataType('test').style).to.have.property('a');\n  });\n  it('getMapLibrary', () => {\n    rxMap._nativeLibrary = 5;\n    expect(rxMap.getMapLibrary()).to.eq(5);\n    rxMap._nativeLibrary = null;\n    window.L = 5;\n    expect(rxMap.getMapLibrary()).to.eq(5);\n    window.L = null;\n    window.google = { maps: 5 };\n    expect(rxMap.getMapLibrary().maps).to.eq(5);\n  });\n  it('load', async () => {\n    try {\n      await rxMap.load('tt');\n    } catch (err) {\n      expect(err).is.a.instanceOf(Error);\n    }\n  });\n  describe('loads', () => {\n    let load_;\n    let loadMap_;\n    afterEach(() => {\n      loadMap_.restore();\n      load_.restore();\n    });\n    beforeEach(() => {\n      loadMap_ = sinon.stub(loadMap, 'default');\n      loadMap_.callsFake(() => Promise.resolve(5));\n      load_ = sinon.stub(load, 'loadLib');\n      load_.callsFake(() => Promise.resolve(() => 'aaaa'));\n    });\n    it('load', async () => {\n      const ret = await rxMap.load('leaflet');\n      expect(ret._nativeLibrary).to.eq(5);\n      // console.log(ret);\n    });\n    it('load map ', async () => {\n      registerAction('start', () => 6);\n      const ret = await rxMap.load('leaflet');\n      ret.start();\n      setTimeout(() => {\n        expect(ret._sourceMap).to.eq(6);\n      }, 20);\n      // console.log(ret);\n    });\n    it('load not', async () => {\n      const ret = await rxMap.load('test');\n      expect(ret._nativeLibrary).to.eq(5);\n      // console.log(ret);\n    });\n    it('get getMapLibrary null', () => {\n      rxMap._nativeLibrary = false;\n      window.L = false;\n      window.google = false;\n      const m = rxMap.getMapLibrary();\n      // eslint-disable-next-line no-unused-expressions\n      expect(m).to.have.null;\n    });\n    it('new', () => {\n      const m = new RxMap();\n      expect(m).to.be.an.instanceof(RxMap);\n    });\n    it('observer Data', (done) => {\n      const m = new RxMap();\n      m.observerData('.').subscribe((data) => {\n        expect(data.value).to.eq(5);\n        done();\n      });\n      m.store.test = 5;\n      // console.log(ret);\n    });\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/map/RxMap.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/unit/map/RxMap.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58",
    "access": null,
    "description": "RxMap",
    "lineNumber": 10
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it59",
    "access": null,
    "description": "create new Map Instances",
    "lineNumber": 11
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it60",
    "access": null,
    "description": "actions return AsyncCommand",
    "lineNumber": 15
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it61",
    "access": null,
    "description": "getMap",
    "lineNumber": 20
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it62",
    "access": null,
    "description": "dataType",
    "lineNumber": 25
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it63",
    "access": null,
    "description": "getMapLibrary",
    "lineNumber": 29
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.it64",
    "access": null,
    "description": "load",
    "lineNumber": 39
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/unit/map/RxMap.spec.js~describe58",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "access": null,
    "description": "loads",
    "lineNumber": 46
  },
  {
    "__docId__": 207,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it66",
    "access": null,
    "description": "load",
    "lineNumber": 59
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it67",
    "access": null,
    "description": "load map ",
    "lineNumber": 64
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it68",
    "access": null,
    "description": "load not",
    "lineNumber": 73
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it69",
    "access": null,
    "description": "get getMapLibrary null",
    "lineNumber": 78
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it70",
    "access": null,
    "description": "new",
    "lineNumber": 86
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/unit/map/RxMap.spec.js~describe58.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/map/RxMap.spec.js~describe58.describe65.it71",
    "access": null,
    "description": "observer Data",
    "lineNumber": 90
  },
  {
    "__docId__": 213,
    "kind": "testFile",
    "name": "test/unit/utils/google.spec.js",
    "content": "/* global describe,it,after,before */\nimport { expect } from 'chai';\nimport * as GoogleMapsLoader from 'google-maps';\nimport * as google from '../../../src/utils/google';\n\ndescribe('google', () => {\n  before(async () => {\n    GoogleMapsLoader.isLoaded = false;\n    GoogleMapsLoader.default.load = f => f({ maps: 5 });\n  });\n\n  after(() => {\n    // stub.restore();\n    // google.default.restore();\n    // GoogleMapsLoader.load.restore();\n  });\n\n  it('load Google', () => {\n    const g = google.loadGoogle('444');\n    return g.then((res) => {\n      expect(res.maps).to.eq(5);\n    });\n  });\n\n  it('get google', () => {\n    const g = google.default();\n    expect(g).to.eq(5);\n  });\n});\n",
    "static": true,
    "longname": "/Users/vrubinat/Documents/xlab.tech/RxMap/test/unit/utils/google.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "describe72",
    "testId": 72,
    "memberof": "test/unit/utils/google.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe72",
    "access": null,
    "description": "google",
    "lineNumber": 6
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/utils/google.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe72.it73",
    "access": null,
    "description": "load Google",
    "lineNumber": 18
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/utils/google.spec.js~describe72",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/utils/google.spec.js~describe72.it74",
    "access": null,
    "description": "get google",
    "lineNumber": 25
  }
]