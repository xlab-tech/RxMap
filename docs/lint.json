[
  {
    "name": "observerAction",
    "filePath": "RxMap/src/core/proxyAction.js",
    "lines": [
      {
        "lineNumber": 9,
        "line": "/**"
      },
      {
        "lineNumber": 10,
        "line": " * Funcion que permite observar la execucion de cualquir"
      },
      {
        "lineNumber": 11,
        "line": " * comando y obtener su respuesta,"
      },
      {
        "lineNumber": 12,
        "line": " * Se puede pasar un nombre o una expresion regular para poder"
      },
      {
        "lineNumber": 13,
        "line": " * observar mas de un comando o todos."
      },
      {
        "lineNumber": 14,
        "line": " *"
      },
      {
        "lineNumber": 15,
        "line": " * @param {String} actionName Nombre o Regex a evaluar"
      },
      {
        "lineNumber": 16,
        "line": " * @return Observer"
      },
      {
        "lineNumber": 17,
        "line": " */"
      },
      {
        "lineNumber": 18,
        "line": "const observerAction = target => actionName => target._actionsSubject.pipe(filter(lastAction => lastAction.name.match(actionName)));"
      }
    ],
    "codeParams": [
      "target"
    ],
    "docParams": [
      "actionName"
    ]
  },
  {
    "name": "observerFrom",
    "filePath": "RxMap/src/core/proxyObservable.js",
    "lines": [
      {
        "lineNumber": 117,
        "line": "/**"
      },
      {
        "lineNumber": 118,
        "line": " *"
      },
      {
        "lineNumber": 119,
        "line": " * Funcion que puede recibir un string con el nombre del"
      },
      {
        "lineNumber": 120,
        "line": " * obsevador que se quiere recuperar de los registrados"
      },
      {
        "lineNumber": 121,
        "line": " * o que puede recibir un Array, una promesa o un Iterable"
      },
      {
        "lineNumber": 122,
        "line": " * o otro Observebable"
      },
      {
        "lineNumber": 123,
        "line": " * sobre el que devuelve un observable con el CommandBus"
      },
      {
        "lineNumber": 124,
        "line": " * aplicado para poder invocar los comandos."
      },
      {
        "lineNumber": 125,
        "line": " *"
      },
      {
        "lineNumber": 126,
        "line": " * Al observador se le pueden pasar los argumentos que necesite."
      },
      {
        "lineNumber": 127,
        "line": " *"
      },
      {
        "lineNumber": 128,
        "line": " * @example"
      },
      {
        "lineNumber": 129,
        "line": " *  // String"
      },
      {
        "lineNumber": 130,
        "line": " *"
      },
      {
        "lineNumber": 131,
        "line": " * RxMap.observer('test')"
      },
      {
        "lineNumber": 132,
        "line": " *  .example('test')"
      },
      {
        "lineNumber": 133,
        "line": " *  .subscribe(console.log);"
      },
      {
        "lineNumber": 134,
        "line": " * @example"
      },
      {
        "lineNumber": 135,
        "line": " *  // Array"
      },
      {
        "lineNumber": 136,
        "line": " * RxMap.observer([1,2,3,4,5])"
      },
      {
        "lineNumber": 137,
        "line": " *  .example('test')"
      },
      {
        "lineNumber": 138,
        "line": " *  .subscribe(console.log);"
      },
      {
        "lineNumber": 139,
        "line": " * @example"
      },
      {
        "lineNumber": 140,
        "line": " *"
      },
      {
        "lineNumber": 141,
        "line": " * const $stream = from(['a','b','c']);"
      },
      {
        "lineNumber": 142,
        "line": " * RxMap.observer($stream)"
      },
      {
        "lineNumber": 143,
        "line": " *  .example('test')"
      },
      {
        "lineNumber": 144,
        "line": " *  .subscribe(console.log);"
      },
      {
        "lineNumber": 145,
        "line": " *"
      },
      {
        "lineNumber": 146,
        "line": " * @param {string|Array|Promise|Iterable|Observer} observerName"
      },
      {
        "lineNumber": 147,
        "line": " * @param  {...any} args"
      },
      {
        "lineNumber": 148,
        "line": " * @return {Observer}"
      },
      {
        "lineNumber": 149,
        "line": " */"
      },
      {
        "lineNumber": 150,
        "line": "export const observerFrom = commandBus => (observerName, ...args) => {"
      }
    ],
    "codeParams": [
      "commandBus"
    ],
    "docParams": [
      "observerName",
      "args"
    ]
  },
  {
    "name": "RxMap#getContext",
    "filePath": "RxMap/src/map/RxMap.js",
    "lines": [
      {
        "lineNumber": 39,
        "line": "  /**"
      },
      {
        "lineNumber": 40,
        "line": "   * Recupera el contexto para las ejecuciones de los comandos y observadores"
      },
      {
        "lineNumber": 41,
        "line": "   * @param { object} [value] puede recibir la ultima ejecucion si se solicita desde AsyncCommand"
      },
      {
        "lineNumber": 42,
        "line": "   * @returns {object}"
      },
      {
        "lineNumber": 43,
        "line": "   * @private"
      },
      {
        "lineNumber": 44,
        "line": "   */"
      },
      {
        "lineNumber": 45,
        "line": "  getContext() {"
      }
    ],
    "codeParams": [],
    "docParams": [
      "value"
    ]
  },
  {
    "name": "RxMap#observerData",
    "filePath": "RxMap/src/map/RxMap.js",
    "lines": [
      {
        "lineNumber": 156,
        "line": "  /**"
      },
      {
        "lineNumber": 157,
        "line": " * Funcion que permite observar los datos del store,"
      },
      {
        "lineNumber": 158,
        "line": " * Se puede pasar una propiedad o una expresion regular para poder"
      },
      {
        "lineNumber": 159,
        "line": " * observar mas de un comando o todos."
      },
      {
        "lineNumber": 160,
        "line": " *"
      },
      {
        "lineNumber": 161,
        "line": " * @param {String} name Nombre o Regex a evaluar"
      },
      {
        "lineNumber": 162,
        "line": " * @return Observer"
      },
      {
        "lineNumber": 163,
        "line": "*/"
      },
      {
        "lineNumber": 164,
        "line": "  observerData(property) {"
      }
    ],
    "codeParams": [
      "property"
    ],
    "docParams": [
      "name"
    ]
  }
]