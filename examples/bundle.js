!function(){"use strict";function t(t,e){return e={exports:{}},t(e,e.exports),e.exports}function e(){try{return S.apply(this,arguments)}catch(t){return M.errorObject.e=t,M.errorObject}}function r(t){return t.reduce(function(t,e){return t.concat(e instanceof C.UnsubscriptionError?e.errors:e)},[])}function n(t){var e=t.value,r=t.subscriber;r.closed||(r.next(e),r.complete())}function o(t){var e=t.err,r=t.subscriber;r.closed||r.error(e)}function i(t){var e=t[W.iterator];if(!e&&"string"==typeof t)return new X(t);if(!e&&void 0!==t.length)return new Z(t);if(!e)throw new TypeError("object is not iterable");return t[W.iterator]()}function s(t){var e=+t.length;return isNaN(e)?0:0!==e&&c(e)?(e=u(e)*Math.floor(Math.abs(e)))<=0?0:e>tt?tt:e:e}function c(t){return"number"==typeof t&&E.root.isFinite(t)}function u(t){var e=+t;return 0===e?e:isNaN(e)?e:e<0?-1:1}let a={_global:[]};const h=(t,...e)=>0===e.length?t:1===e.length?e[0](t):e.reduce((e,r)=>e(r(t))),l=(t,e)=>(t,r)=>{if(e.prototype.execute){const n=new e(...r);return n.setMap(t._map),n.execute()}return e.apply(t,r)},p=(t,e)=>{let r=a._global;return a[t]&&(r=a._global.concat(a[t])),h(l(0,e),...r)},f=(t,e)=>{"string"!=typeof t?a._global=[t,...e]:a[t]=e},b=function(t){return t&&"function"!=typeof t.subscribe&&"function"==typeof t.then},d=new window.Map,y=(t,e)=>{d.set(t,e)},v=t=>d.get(t);var m="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},_="undefined"!=typeof window&&window,w="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,x=void 0!==m&&m,O=_||x||w,g=O;!function(){if(!O)throw new Error("RxJS could not find any global context (window, self, global)")}();var S,E={root:g},P={isFunction:function(t){return"function"==typeof t}},j={isArray:Array.isArray||function(t){return t&&"number"==typeof t.length}},N={isObject:function(t){return null!=t&&"object"==typeof t}},M={errorObject:{e:{}}},k={tryCatch:function(t){return S=t,e}},A=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},C={UnsubscriptionError:function(t){function e(e){t.call(this),this.errors=e;var r=Error.call(this,e?e.length+" errors occurred during unsubscription:\n  "+e.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"");this.name=r.name="UnsubscriptionError",this.stack=r.stack,this.message=r.message}return A(e,t),e}(Error)},T={Subscription:function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var t,e=!1;if(!this.closed){var n=this,o=n._parent,i=n._parents,s=n._unsubscribe,c=n._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var u=-1,a=i?i.length:0;o;)o.remove(this),o=++u<a&&i[u]||null;if(P.isFunction(s)&&(l=k.tryCatch(s).call(this))===M.errorObject&&(e=!0,t=t||(M.errorObject.e instanceof C.UnsubscriptionError?r(M.errorObject.e.errors):[M.errorObject.e])),j.isArray(c))for(u=-1,a=c.length;++u<a;){var h=c[u];if(N.isObject(h)){var l=k.tryCatch(h.unsubscribe).call(h);if(l===M.errorObject){e=!0,t=t||[];var p=M.errorObject.e;p instanceof C.UnsubscriptionError?t=t.concat(r(p.errors)):t.push(p)}}}if(e)throw new C.UnsubscriptionError(t)}},t.prototype.add=function(e){if(!e||e===t.EMPTY)return t.EMPTY;if(e===this)return this;var r=e;switch(typeof e){case"function":r=new t(e);case"object":if(r.closed||"function"!=typeof r.unsubscribe)return r;if(this.closed)return r.unsubscribe(),r;if("function"!=typeof r._addParent){var n=r;(r=new t)._subscriptions=[n]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(r),r._addParent(this),r},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var r=e.indexOf(t);-1!==r&&e.splice(r,1)}},t.prototype._addParent=function(t){var e=this,r=e._parent,n=e._parents;r&&r!==t?n?-1===n.indexOf(t)&&n.push(t):this._parents=[t]:this._parent=t},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}()},I={empty:{closed:!0,next:function(t){},error:function(t){throw t},complete:function(){}}},R=t(function(t,e){var r=E.root.Symbol;e.rxSubscriber="function"==typeof r&&"function"==typeof r.for?r.for("rxSubscriber"):"@@rxSubscriber",e.$$rxSubscriber=e.rxSubscriber}),V=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},F=function(t){function e(r,n,o){switch(t.call(this),this.syncErrorValue=null,this.syncErrorThrown=!1,this.syncErrorThrowable=!1,this.isStopped=!1,arguments.length){case 0:this.destination=I.empty;break;case 1:if(!r){this.destination=I.empty;break}if("object"==typeof r){r instanceof e?(this.destination=r,this.destination.add(this)):(this.syncErrorThrowable=!0,this.destination=new U(this,r));break}default:this.syncErrorThrowable=!0,this.destination=new U(this,r,n,o)}}return V(e,t),e.prototype[R.rxSubscriber]=function(){return this},e.create=function(t,r,n){var o=new e(t,r,n);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this,e=t._parent,r=t._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=e,this._parents=r,this},e}(T.Subscription),L=F,U=function(t){function e(e,r,n,o){t.call(this),this._parentSubscriber=e;var i,s=this;P.isFunction(r)?i=r:r&&(i=r.next,n=r.error,o=r.complete,r!==I.empty&&(s=Object.create(r),P.isFunction(s.unsubscribe)&&this.add(s.unsubscribe.bind(s)),s.unsubscribe=this.unsubscribe.bind(this))),this._context=s,this._next=i,this._error=n,this._complete=o}return V(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber;if(this._error)e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else{if(!e.syncErrorThrowable)throw this.unsubscribe(),t;e.syncErrorValue=t,e.syncErrorThrown=!0,this.unsubscribe()}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var r=function(){return t._complete.call(t._context)};e.syncErrorThrowable?(this.__tryOrSetError(e,r),this.unsubscribe()):(this.__tryOrUnsub(r),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){throw this.unsubscribe(),t}},e.prototype.__tryOrSetError=function(t,e,r){try{e.call(this._context,r)}catch(e){return t.syncErrorValue=e,t.syncErrorThrown=!0,!0}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(F),q={Subscriber:L},Y={toSubscriber:function(t,e,r){if(t){if(t instanceof q.Subscriber)return t;if(t[R.rxSubscriber])return t[R.rxSubscriber]()}return t||e||r?new q.Subscriber(t,e,r):new q.Subscriber(I.empty)}},B=t(function(t,e){function r(t){var e,r=t.Symbol;return"function"==typeof r?r.observable?e=r.observable:(e=r("observable"),r.observable=e):e="@@observable",e}e.getSymbolObservable=r,e.observable=r(E.root),e.$$observable=e.observable}),D=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n=this.operator,o=Y.toSubscriber(t,e,r);if(n?n.call(o,this.source):o.add(this.source?this._subscribe(o):this._trySubscribe(o)),o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.syncErrorThrown=!0,t.syncErrorValue=e,t.error(e)}},t.prototype.forEach=function(t,e){var r=this;if(e||(E.root.Rx&&E.root.Rx.config&&E.root.Rx.config.Promise?e=E.root.Rx.config.Promise:E.root.Promise&&(e=E.root.Promise)),!e)throw new Error("no Promise impl found");return new e(function(e,n){var o;o=r.subscribe(function(e){if(o)try{t(e)}catch(t){n(t),o.unsubscribe()}else t(e)},n,e)})},t.prototype._subscribe=function(t){return this.source.subscribe(t)},t.prototype[B.observable]=function(){return this},t.create=function(e){return new t(e)},t}(),$={Observable:D},H={isArrayLike:function(t){return t&&"number"==typeof t.length}},z={isPromise:function(t){return t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}},G=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},K={PromiseObservable:function(t){function e(e,r){t.call(this),this.promise=e,this.scheduler=r}return G(e,t),e.create=function(t,r){return new e(t,r)},e.prototype._subscribe=function(t){var e=this,r=this.promise,i=this.scheduler;if(null==i)this._isScalar?t.closed||(t.next(this.value),t.complete()):r.then(function(r){e.value=r,e._isScalar=!0,t.closed||(t.next(r),t.complete())},function(e){t.closed||t.error(e)}).then(null,function(t){E.root.setTimeout(function(){throw t})});else if(this._isScalar){if(!t.closed)return i.schedule(n,0,{value:this.value,subscriber:t})}else r.then(function(r){e.value=r,e._isScalar=!0,t.closed||t.add(i.schedule(n,0,{value:r,subscriber:t}))},function(e){t.closed||t.add(i.schedule(o,0,{err:e,subscriber:t}))}).then(null,function(t){E.root.setTimeout(function(){throw t})})},e}($.Observable)},W=t(function(t,e){function r(t){var e=t.Symbol;if("function"==typeof e)return e.iterator||(e.iterator=e("iterator polyfill")),e.iterator;var r=t.Set;if(r&&"function"==typeof(new r)["@@iterator"])return"@@iterator";var n=t.Map;if(n)for(var o=Object.getOwnPropertyNames(n.prototype),i=0;i<o.length;++i){var s=o[i];if("entries"!==s&&"size"!==s&&n.prototype[s]===n.prototype.entries)return s}return"@@iterator"}e.symbolIteratorPonyfill=r,e.iterator=r(E.root),e.$$iterator=e.iterator}),J=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},Q=function(t){function e(e,r){if(t.call(this),this.scheduler=r,null==e)throw new Error("iterator cannot be null.");this.iterator=i(e)}return J(e,t),e.create=function(t,r){return new e(t,r)},e.dispatch=function(t){var e=t.index,r=t.hasError,n=t.iterator,o=t.subscriber;if(r)o.error(t.error);else{var i=n.next();i.done?o.complete():(o.next(i.value),t.index=e+1,o.closed?"function"==typeof n.return&&n.return():this.schedule(t))}},e.prototype._subscribe=function(t){var r=this,n=r.iterator,o=r.scheduler;if(o)return o.schedule(e.dispatch,0,{index:0,iterator:n,subscriber:t});for(;;){var i=n.next();if(i.done){t.complete();break}if(t.next(i.value),t.closed){"function"==typeof n.return&&n.return();break}}},e}($.Observable),X=function(){function t(t,e,r){void 0===e&&(e=0),void 0===r&&(r=t.length),this.str=t,this.idx=e,this.len=r}return t.prototype[W.iterator]=function(){return this},t.prototype.next=function(){return this.idx<this.len?{done:!1,value:this.str.charAt(this.idx++)}:{done:!0,value:void 0}},t}(),Z=function(){function t(t,e,r){void 0===e&&(e=0),void 0===r&&(r=s(t)),this.arr=t,this.idx=e,this.len=r}return t.prototype[W.iterator]=function(){return this},t.prototype.next=function(){return this.idx<this.len?{done:!1,value:this.arr[this.idx++]}:{done:!0,value:void 0}},t}(),tt=Math.pow(2,53)-1,et={IteratorObservable:Q},rt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},nt={ScalarObservable:function(t){function e(e,r){t.call(this),this.value=e,this.scheduler=r,this._isScalar=!0,r&&(this._isScalar=!1)}return rt(e,t),e.create=function(t,r){return new e(t,r)},e.dispatch=function(t){var e=t.done,r=t.value,n=t.subscriber;e?n.complete():(n.next(r),n.closed||(t.done=!0,this.schedule(t)))},e.prototype._subscribe=function(t){var r=this.value,n=this.scheduler;if(n)return n.schedule(e.dispatch,0,{done:!1,value:r,subscriber:t});t.next(r),t.closed||t.complete()},e}($.Observable)},ot=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},it={EmptyObservable:function(t){function e(e){t.call(this),this.scheduler=e}return ot(e,t),e.create=function(t){return new e(t)},e.dispatch=function(t){t.subscriber.complete()},e.prototype._subscribe=function(t){var r=this.scheduler;if(r)return r.schedule(e.dispatch,0,{subscriber:t});t.complete()},e}($.Observable)},st={isScheduler:function(t){return t&&"function"==typeof t.schedule}},ct=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ut={ArrayObservable:function(t){function e(e,r){t.call(this),this.array=e,this.scheduler=r,r||1!==e.length||(this._isScalar=!0,this.value=e[0])}return ct(e,t),e.create=function(t,r){return new e(t,r)},e.of=function(){for(var t=[],r=0;r<arguments.length;r++)t[r-0]=arguments[r];var n=t[t.length-1];st.isScheduler(n)?t.pop():n=null;var o=t.length;return o>1?new e(t,n):1===o?new nt.ScalarObservable(t[0],n):new it.EmptyObservable(n)},e.dispatch=function(t){var e=t.array,r=t.index,n=t.count,o=t.subscriber;r>=n?o.complete():(o.next(e[r]),o.closed||(t.index=r+1,this.schedule(t)))},e.prototype._subscribe=function(t){var r=this.array,n=r.length,o=this.scheduler;if(o)return o.schedule(e.dispatch,0,{array:r,index:0,count:n,subscriber:t});for(var i=0;i<n&&!t.closed;i++)t.next(r[i]);t.complete()},e}($.Observable)},at=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ht={ArrayLikeObservable:function(t){function e(e,r){t.call(this),this.arrayLike=e,this.scheduler=r,r||1!==e.length||(this._isScalar=!0,this.value=e[0])}return at(e,t),e.create=function(t,r){var n=t.length;return 0===n?new it.EmptyObservable:1===n?new nt.ScalarObservable(t[0],r):new e(t,r)},e.dispatch=function(t){var e=t.arrayLike,r=t.index,n=t.length,o=t.subscriber;o.closed||(r>=n?o.complete():(o.next(e[r]),t.index=r+1,this.schedule(t)))},e.prototype._subscribe=function(t){var r=this,n=r.arrayLike,o=r.scheduler,i=n.length;if(o)return o.schedule(e.dispatch,0,{arrayLike:n,index:0,length:i,subscriber:t});for(var s=0;s<i&&!t.closed;s++)t.next(n[s]);t.complete()},e}($.Observable)},lt={Notification:function(){function t(t,e,r){this.kind=t,this.value=e,this.error=r,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,r){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return r&&r()}},t.prototype.accept=function(t,e,r){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,r)},t.prototype.toObservable=function(){switch(this.kind){case"N":return $.Observable.of(this.value);case"E":return $.Observable.throw(this.error);case"C":return $.Observable.empty()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},pt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ft=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new dt(t,this.scheduler,this.delay))},t}(),bt=ft,dt=function(t){function e(e,r,n){void 0===n&&(n=0),t.call(this,e),this.scheduler=r,this.delay=n}return pt(e,t),e.dispatch=function(t){var e=t.notification,r=t.destination;e.observe(r),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.add(this.scheduler.schedule(e.dispatch,this.delay,new vt(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(lt.Notification.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(lt.Notification.createError(t))},e.prototype._complete=function(){this.scheduleMessage(lt.Notification.createComplete())},e}(q.Subscriber),yt=dt,vt=function(){return function(t,e){this.notification=t,this.destination=e}}(),mt={observeOn:function(t,e){return void 0===e&&(e=0),this.lift(new ft(t,e))},ObserveOnOperator:bt,ObserveOnSubscriber:yt,ObserveOnMessage:vt},_t=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},wt={from:{FromObservable:function(t){function e(e,r){t.call(this,null),this.ish=e,this.scheduler=r}return _t(e,t),e.create=function(t,r){if(null!=t){if("function"==typeof t[B.observable])return t instanceof $.Observable&&!r?t:new e(t,r);if(j.isArray(t))return new ut.ArrayObservable(t,r);if(z.isPromise(t))return new K.PromiseObservable(t,r);if("function"==typeof t[W.iterator]||"string"==typeof t)return new et.IteratorObservable(t,r);if(H.isArrayLike(t))return new ht.ArrayLikeObservable(t,r)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")},e.prototype._subscribe=function(t){var e=this.ish,r=this.scheduler;return null==r?e[B.observable]().subscribe(t):e[B.observable]().subscribe(new mt.ObserveOnSubscriber(t,r,0))},e}($.Observable)}.FromObservable.create};$.Observable.from=wt.from;class xt{constructor(){this._lastCommand={value:null,name:null}}setMap(t){this._rMap=t}getMap(){return this._rMap}value(t){return t?(t(this._lastCommand),this):this._lastCommand}execute(t,e,r){return this._execute(t,e,r)}_saveExecution(t,e){return this._lastCommand={value:e,name:t},e}_execute(t,e,r){this._executingCommand=t;const n=e(this,r);let o=n;return b(n)&&n.then(e=>this._saveExecution(t,e)),this._saveExecution(t,o)}getCommandName(){return this._executingCommand}fromObserver(t){return t.setCommandBus(this)}observer(t,...e){if("string"!=typeof t)return D.from(t).setCommandBus(this);const r=v(t);if(!r)throw`Observer ${t} not register`;return r.bind(this)(...e).setCommandBus(this)}}var Ot={of:ut.ArrayObservable.of};$.Observable.of=Ot.of;var gt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},St={InnerSubscriber:function(t){function e(e,r,n){t.call(this),this.parent=e,this.outerValue=r,this.outerIndex=n,this.index=0}return gt(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(q.Subscriber)},Et={subscribeToResult:function(t,e,r,n){var o=new St.InnerSubscriber(t,r,n);if(o.closed)return null;if(e instanceof $.Observable)return e._isScalar?(o.next(e.value),o.complete(),null):e.subscribe(o);if(H.isArrayLike(e)){for(var i=0,s=e.length;i<s&&!o.closed;i++)o.next(e[i]);o.closed||o.complete()}else{if(z.isPromise(e))return e.then(function(t){o.closed||(o.next(t),o.complete())},function(t){return o.error(t)}).then(null,function(t){E.root.setTimeout(function(){throw t})}),o;if(e&&"function"==typeof e[W.iterator])for(var c=e[W.iterator]();;){var u=c.next();if(u.done){o.complete();break}if(o.next(u.value),o.closed)break}else if(e&&"function"==typeof e[B.observable]){var a=e[B.observable]();if("function"==typeof a.subscribe)return a.subscribe(new St.InnerSubscriber(t,r,n));o.error(new TypeError("Provided object does not correctly implement Symbol.observable"))}else{var h="You provided "+(N.isObject(e)?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.";o.error(new TypeError(h))}}return null}},Pt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},jt={OuterSubscriber:function(t){function e(){t.apply(this,arguments)}return Pt(e,t),e.prototype.notifyNext=function(t,e,r,n,o){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(q.Subscriber)},Nt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},Mt=function(){function t(t,e,r){void 0===r&&(r=Number.POSITIVE_INFINITY),this.project=t,this.resultSelector=e,this.concurrent=r}return t.prototype.call=function(t,e){return e.subscribe(new At(t,this.project,this.resultSelector,this.concurrent))},t}(),kt=Mt,At=function(t){function e(e,r,n,o){void 0===o&&(o=Number.POSITIVE_INFINITY),t.call(this,e),this.project=r,this.resultSelector=n,this.concurrent=o,this.hasCompleted=!1,this.buffer=[],this.active=0,this.index=0}return Nt(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,r)},e.prototype._innerSub=function(t,e,r){this.add(Et.subscribeToResult(this,t,e,r))},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete()},e.prototype.notifyNext=function(t,e,r,n,o){this.resultSelector?this._notifyResultSelector(t,e,r,n):this.destination.next(e)},e.prototype._notifyResultSelector=function(t,e,r,n){var o;try{o=this.resultSelector(t,e,r,n)}catch(t){return void this.destination.error(t)}this.destination.next(o)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(jt.OuterSubscriber),Ct={mergeMap:function(t,e,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"number"==typeof e&&(r=e,e=null),this.lift(new Mt(t,e,r))},MergeMapOperator:kt,MergeMapSubscriber:At};$.Observable.prototype.mergeMap=Ct.mergeMap,$.Observable.prototype.flatMap=Ct.mergeMap;const Tt=t=>{const e=t.getCommandBus();return e||(t.source?Tt(t.source):void 0)},It=(t,e)=>{let r=t;return"function"==typeof t&&(r=t(e)),r&&!Array.isArray(r)&&(r=[r]),r},Rt=(t,e)=>{D.prototype[t]=function(r){const n=Tt(this);return this.mergeMap(o=>{let i=It(r,o);const s=n.execute(t,e,i);return b(s)?D.from(s):D.of(s)})}};class Vt extends xt{constructor(){super(),this.queue=[],this.subscribers=[],this.async=!1}setSource(t){this._source=t}setMap(t){t&&(this._source&&this._source.setMap(t),super.setMap(t))}execute(t,e,r){if(console.log("ASYNC",this.async),this.async)return void this.queue.push({commandName:t,command:e,args:r});const n=this._execute(t,e,r);return b(n)&&(console.log("Set ASYNC"),this.async=!0,n.then(t=>(console.log("DESPUES"),this._next()))),n}_next(){if(0===this.queue.length)return this.async=!1,void this._complete();const t=this.queue.shift(),e=this._execute(t.commandName,t.command,t.args);if(b(e))return console.log("Es promesa"),this.async=!0,void e.then(t=>(console.log("DESPUES"),this._next()));this._next()}_complete(){this.subscribers.map(t=>t(this._lastCommand))}subscribe(t){this.subscribers.push(t)}}Vt.lift=function(t,e){const r=new Vt;return r.setMap(t),r.setSource(e),r};const Ft={},Lt=function(t){return t&&"function"==typeof t.subscribe&&"function"==typeof t.execute},Ut=(t,e)=>{const r=p(t,e);xt.prototype[t]=function(...e){let n=this;return Lt(n)||(n=Vt.lift(this.getMap(),this)),n.execute(t,r,e),n},Rt(t,r)},qt=(t,e)=>{if(t){if(e)Ft[t]=e;else if(!(e=Ft[t]))throw`Command ${t} not registered`;Ut(t,e)}else Object.keys(Ft).map(t=>qt(t))};var Yt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},Bt=function(){function t(t,e){this.project=t,this.resultSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Dt(t,this.project,this.resultSelector))},t}(),Dt=function(t){function e(e,r,n){t.call(this,e),this.project=r,this.resultSelector=n,this.index=0}return Yt(e,t),e.prototype._next=function(t){var e,r=this.index++;try{e=this.project(t,r)}catch(t){return void this.destination.error(t)}this._innerSub(e,t,r)},e.prototype._innerSub=function(t,e,r){var n=this.innerSubscription;n&&n.unsubscribe(),this.add(this.innerSubscription=Et.subscribeToResult(this,t,e,r))},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.innerSubscription=null},e.prototype.notifyComplete=function(e){this.remove(e),this.innerSubscription=null,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e,r,n,o){this.resultSelector?this._tryNotifyNext(t,e,r,n):this.destination.next(e)},e.prototype._tryNotifyNext=function(t,e,r,n){var o;try{o=this.resultSelector(t,e,r,n)}catch(t){return void this.destination.error(t)}this.destination.next(o)},e}(jt.OuterSubscriber),$t={switchMap:function(t,e){return this.lift(new Bt(t,e))}};$.Observable.prototype.switchMap=$t.switchMap;const Ht=t=>{const e=t.getCommandBus();return e||(t.source?Ht(t.source):void 0)};D.prototype.setCommandBus=function(t){return this._commandBus=t,this},D.prototype.getCommandBus=function(t){return this._commandBus},D.prototype.observer=function(t,...e){const r=Ht(this);return this.mergeMap(n=>r.observer(t,...e))};let zt;class Gt extends xt{constructor(){super(),console.log("Create Map instance")}register(t,e){qt(t,e)}registerObservable(t,e){y(t,e)}applyMiddlewares(t,...e){f(t,e),"string"==typeof t?qt(t):qt()}init(...t){return new Gt(...t)}}var Kt=(zt||(zt=new Gt),zt);const Wt=window.L;Kt.register("create",function(t,e,r,n){const o=Wt.map(t).setView([e,r],n);return Wt.tileLayer("http://{s}.tile.osm.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'}).addTo(o),this.setMap(o),o});const Jt=window.L;Kt.register("marker",function(t,e){const r=this.getMap();return Jt.marker([t,e]).addTo(r)});Kt.register("popup",function(t){this.getMap();const e=this.value(),{value:r,name:n}=e;return"marker"===n&&r.bindPopup(t),e});var Qt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},Xt={fromEventPattern:{FromEventPatternObservable:function(t){function e(e,r,n){t.call(this),this.addHandler=e,this.removeHandler=r,this.selector=n}return Qt(e,t),e.create=function(t,r,n){return new e(t,r,n)},e.prototype._subscribe=function(t){var e=this,r=this.removeHandler,n=this.selector?function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];e._callSelector(t,r)}:function(e){t.next(e)},o=this._callAddHandler(n,t);P.isFunction(r)&&t.add(new T.Subscription(function(){r(n,o)}))},e.prototype._callSelector=function(t,e){try{var r=this.selector.apply(this,e);t.next(r)}catch(e){t.error(e)}},e.prototype._callAddHandler=function(t,e){try{return this.addHandler(t)||null}catch(t){e.error(t)}},e}($.Observable)}.FromEventPatternObservable.create};$.Observable.fromEventPattern=Xt.fromEventPattern;var Zt=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},te=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.thisArg))},t}(),ee=te,re=function(t){function e(e,r,n){t.call(this,e),this.project=r,this.count=0,this.thisArg=n||this}return Zt(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(q.Subscriber),ne={map:function(t,e){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return this.lift(new te(t,e))},MapOperator:ee};$.Observable.prototype.map=ne.map;Kt.registerObservable("center",function(){const t=this.getMap();return D.fromEventPattern(function(e){return t.on("move",e)},function(e){t.off("move",e)}).map(e=>t.getCenter())});Kt.registerObservable("click",function(){let t=this.getMap();const e=this.value(),{value:r,name:n}=e;let o=t=>t.latlng;"marker"===n&&(t=r,o=(t=>(console.log("MARKER",t),r)));return D.fromEventPattern(function(e){return t.on("click",e)},function(e){t.off("click",e)}).map(o)});var oe=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ie={ArgumentOutOfRangeError:function(t){function e(){var e=t.call(this,"argument out of range");this.name=e.name="ArgumentOutOfRangeError",this.stack=e.stack,this.message=e.message}return oe(e,t),e}(Error)},se=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ce=function(){function t(t){if(this.total=t,this.total<0)throw new ie.ArgumentOutOfRangeError}return t.prototype.call=function(t,e){return e.subscribe(new ue(t,this.total))},t}(),ue=function(t){function e(e,r){t.call(this,e),this.total=r,this.count=0}return se(e,t),e.prototype._next=function(t){var e=this.total,r=++this.count;r<=e&&(this.destination.next(t),r===e&&(this.destination.complete(),this.unsubscribe()))},e}(q.Subscriber),ae={take:function(t){return 0===t?new it.EmptyObservable:this.lift(new ce(t))}};$.Observable.prototype.take=ae.take;var he=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},le={Action:function(t){function e(e,r){t.call(this)}return he(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(T.Subscription)},pe=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},fe={AsyncAction:function(t){function e(e,r){t.call(this,e,r),this.scheduler=e,this.work=r,this.pending=!1}return pe(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t,this.pending=!0;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),E.root.setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){return void 0===r&&(r=0),null!==r&&this.delay===r&&!1===this.pending?e:E.root.clearInterval(e)&&void 0||void 0},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r=!1,n=void 0;try{this.work(t)}catch(t){r=!0,n=!!t&&t||new Error(t)}if(r)return this.unsubscribe(),n},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,r=e.actions,n=r.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==n&&r.splice(n,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(le.Action)},be={Scheduler:function(){function t(e,r){void 0===r&&(r=t.now),this.SchedulerAction=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(r,e)},t.now=Date.now?Date.now:function(){return+new Date},t}()},de=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},ye={async:new({AsyncScheduler:function(t){function e(){t.apply(this,arguments),this.actions=[],this.active=!1,this.scheduled=void 0}return de(e,t),e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var r;this.active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(be.Scheduler)}.AsyncScheduler)(fe.AsyncAction)},ve={isDate:function(t){return t instanceof Date&&!isNaN(+t)}},me=m&&m.__extends||function(t,e){function r(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)},_e=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new we(t,this.delay,this.scheduler))},t}(),we=function(t){function e(e,r,n){t.call(this,e),this.delay=r,this.scheduler=n,this.queue=[],this.active=!1,this.errored=!1}return me(e,t),e.dispatch=function(t){for(var e=t.source,r=e.queue,n=t.scheduler,o=t.destination;r.length>0&&r[0].time-n.now()<=0;)r.shift().notification.observe(o);if(r.length>0){var i=Math.max(0,r[0].time-n.now());this.schedule(t,i)}else e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,r=new xe(e.now()+this.delay,t);this.queue.push(r),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(lt.Notification.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t)},e.prototype._complete=function(){this.scheduleNotification(lt.Notification.createComplete())},e}(q.Subscriber),xe=function(){return function(t,e){this.time=t,this.notification=e}}(),Oe={delay:function(t,e){void 0===e&&(e=ye.async);var r=ve.isDate(t)?+t-e.now():Math.abs(t);return this.lift(new _e(r,e))}};$.Observable.prototype.delay=Oe.delay;var ge={fromPromise:K.PromiseObservable.create};$.Observable.fromPromise=ge.fromPromise;Kt.applyMiddlewares(t=>(e,r)=>{const n=e.getCommandName();console.log("Pre execute Command ",n,r);const o=t(e,r);return console.log("Post execute Command",n,o),o}),Kt.applyMiddlewares("create",t=>(e,r)=>{const n=e.getCommandName();console.time(n);const o=t(e,r);return console.timeEnd(n),o}),Kt.create("map",51.505,-.09,13).marker(52.1,-.09).popup("adios Mundo"),Kt.observer("center").take(5).subscribe(t=>console.log("subscribe Center",t)),Kt.observer("click").marker(t=>[t.lat,t.lng]).subscribe(t=>console.log("subscribe CLICK",t));const Se=[{lat:51.50270552998373,lng:-.08368492126464844},{lat:51.53270552998373,lng:-.08368492126464844},{lat:1,lng:2}];Kt.observer(Se).delay(1e3).map(t=>(console.log("PRE 2 MAP",t),t)).marker(t=>[t.lat,t.lng]).popup("click").subscribe()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
